{"version":3,"sources":["webpack:///./components/lineGraph/style.css","webpack:///./components/lineGraph/index.js"],"names":["module","exports","getTicks","count","min","max","reverse","prefix","postfix","loop","Array","from","keys","range","Math","ceil","floor","map","d","parseInt","transformXTick","tick","fn","util","isFunction","match","msDiff","replace","now","epoch","isoDate","transformYTick","normalizeRange","val","newMin","newMax","round5","x","roundDown","sign","abs","findMinY","data","values","arr","isArray","isNumber","y","findMaxY","controlPoint","current","previous","next","o","pointA","pointB","lengthX","lengthY","length","sqrt","pow","angle","atan2","lineProperties","PI","cos","sin","bezierCommand","point","i","a","cpsX","cpsY","cpeX","cpeY","lineCommand","svgPath","points","command","opts","maxX","dPostfix","height","width","reduce","acc","makePaths","idx","yMin","yMax","xMin","xMax","yRangeMin","yRangeMax","offsetY","maxMinFixed","smooth","avgWindow","dataMap","minX","minY","maxY","realHeight","fnX","dataVal","round","isDefined","xVal","fnY","yVal","dataArray","p","filter","e","finalDataArray","windowSize","getter","value","setter","get","result","leftOffeset","to","sum","j","smoothValues","l","ySmooth","dOriginal","makePath","undefined","avgWindowLeft","avgWindowRight","initialState","mouseData","LineChart","observer","Component","constructor","props","super","mouseMove","this","stores","getCoordsWithPadding","layerX","layerY","appState","setMousePosition","state","svgRef","paddingLeft","paddingRight","paddingTop","paddingBottom","showYTicksLeft","showYTicksRight","showXTicks","PADDING_TOP","PADDING_BOTTOM","svgHeight","clientHeight","clientWidth","getMouseCoordX","xPos","getCoordX","getTextBoxX","mousePos","align","subtractPadding","pos","getMouseData","key","opt","autoLimit","padding","isObject","dataMapCurrent","Object","rest","resto","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","tickCount","xTicks","xTicksVal","yTicksLeft","yTicksLeftVal","yTicksLeftPrefix","yTicksLeftPostfix","yTicksRight","yTicksRightVal","yTicksRightPrefix","yTicksRightPostfix","yMaxLeft","yMinLeft","yMaxRight","yMinRight","rangeMinLeft","rangeMaxLeft","rangeMinRight","rangeMaxRight","dataLeft","dataRight","legendLeft","legendRight","unitLeft","unitRight","hoverValLeft","hoverValRight","marker","darkmode","PADDING_LEFT","common","MIN_Y_LEFT","MAX_Y_LEFT","MIN_Y_RIGHT","MAX_Y_RIGHT","MIN_X","findMinX","concat","MAX_X","findMaxX","pathLeft","pathRight","TOTAL_GRAPHS_LEFT","TOTAL_GRAPHS_RIGHT","TOTAL_GRAPHS","X_TICKS","Y_TICKS_LEFT","Y_TICKS_RIGHT","markerX","class","style","lineChart","xmlns","svg","viewBox","preserveAspectRatio","ref","c","path","fill-rule","x1","x2","y1","y2","mouseLine","legend","font-size","pathText","rx","ry","mouseHoverBox","mouseHoverDarkmode","mouseHover","hoverVal","dy","text-anchor","left","v","data-value","top","bottom"],"mappings":"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","file":"route-demand~route-home~route-prices~route-production~route-strategy~route-wear~route-weather.chunk.ec022.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"lineChart__1V7gu\",\"svg\":\"svg__2VZNe\",\"pathText\":\"pathText__2RfbE\",\"pathOriginal\":\"pathOriginal__9eH9i\",\"pathLeft0\":\"pathLeft0__3tOjN\",\"pathLeft1\":\"pathLeft1__3XeI-\",\"pathLeft2\":\"pathLeft2__Jskj_\",\"pathLeft3\":\"pathLeft3__vtNwg\",\"pathLeft4\":\"pathLeft4__ZfOXV\",\"pathLeft5\":\"pathLeft5__1V5kT\",\"pathLeft6\":\"pathLeft6__3g2rw\",\"pathLeft7\":\"pathLeft7__2aVhq\",\"pathLeft8\":\"pathLeft8__3LkIB\",\"pathLeft9\":\"pathLeft9__1eWVE\",\"pathRight0\":\"pathRight0__3sPo3\",\"pathRight1\":\"pathRight1__16EJJ\",\"pathRight2\":\"pathRight2__1giMc\",\"pathRight3\":\"pathRight3__yhWxI\",\"pathRight4\":\"pathRight4__3M2kd\",\"pathRight5\":\"pathRight5__1IsUE\",\"x-axis\":\"x-axis__1601s\",\"y-axis-left\":\"y-axis-left__3tpCF\",\"y-axis-right\":\"y-axis-right__3gWmK\",\"marker\":\"marker__2peOe\",\"mouseHover\":\"mouseHover__2B4N6\",\"mouseHoverDarkmode\":\"mouseHoverDarkmode__3VPOP\",\"mouseHoverBox\":\"mouseHoverBox__3fJuY\",\"mouseLine\":\"mouseLine__1cdau\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nimport style from './style.css';\n\nconst TEXT_BOX_PADDING_X = 10;\nconst TEXT_PADDING_X = 20;\n\nfunction getTicks(count, min, max, reverse = false, prefix = '', postfix = '') {\n    let loop = Array.from(Array(count).keys());\n    if (reverse) {\n        loop = loop.reverse();\n    }\n    const range = Math.ceil(max) - Math.floor(min);\n    if (prefix === '' && postfix === '') {\n        return loop.map(d => parseInt((range / (count - 1) * d), 10) + Math.floor(min));\n    }\n    return loop.map(d => `${prefix}${parseInt((range / (count - 1) * d), 10) + Math.floor(min)}${postfix}`);\n}\n\nfunction transformXTick(tick, fn) {\n    if (util.isFunction(fn)) {\n        return fn(tick);\n    }\n    if (typeof tick === 'string') {\n        if (tick.match(/\\d+h/)) {\n            const msDiff = tick.replace(/h/g, '') * 3600 * 1000;\n            const now = util.epoch();\n            const then = now - msDiff;\n            return util.isoDate(then);\n        }\n    }\n    return tick;\n}\n\nfunction transformYTick(tick, fn) {\n    if (util.isFunction(fn)) {\n        return fn(tick);\n    }\n    return tick;\n}\n\nfunction normalizeRange(val, min, max, newMin, newMax) {\n    return newMin + (val - min) * (newMax - newMin) / (max - min);\n}\n\nfunction round5(x, roundDown = false) {\n    let sign = 1;\n    if (x < 0) {\n        sign = -1;\n    }\n    if (roundDown && sign === 1) {\n        return Math.floor(Math.abs(x) / 5) * 5 * sign;\n    }\n    return Math.ceil(Math.abs(x) / 5) * 5 * sign;\n}\n\nfunction findMinX({ data, min }) {\n    const values = data.map((arr) => {\n        if (util.isArray(arr)) {\n            if (util.isNumber(min)) {\n                return Math.min(min, ...arr.map(d => d.x));\n            }\n            return Math.min(...arr.map(d => d.x));\n        }\n    });\n    return Math.min(...values);\n}\n\nfunction findMaxX({ data, max }) {\n    const values = data.map((arr) => {\n        if (util.isArray(arr)) {\n            if (util.isNumber(max)) {\n                return Math.max(max, ...arr.map(d => d.x));\n            }\n            return Math.max(...arr.map(d => d.x));\n        }\n    });\n    return Math.max(...values);\n}\n\nfunction findMinY({ data, min }) {\n    const values = data.map((arr) => {\n        if (util.isArray(arr)) {\n            if (util.isNumber(min)) {\n                return Math.min(min, ...arr.map(d => d.y));\n            }\n            return Math.min(...arr.map(d => d.y));\n        }\n    });\n    return Math.min(...values);\n}\n\nfunction findMaxY({ data, max }) {\n    const values = data.map((arr) => {\n        // console.log(arr);\n        if (util.isArray(arr)) {\n            if (util.isNumber(max)) {\n                return Math.max(max, ...arr.map(d => d.y));\n            }\n            return Math.max(...arr.map(d => d.y));\n        }\n    });\n    return Math.max(...values);\n}\n\nfunction smoothValues(arr, windowSize = 2, getter = (value) => value, setter) {\n    const get = getter\n    const result = []\n    for (let i = 0; i < arr.length; i += 1) {\n        const leftOffeset = i - windowSize\n        const from = leftOffeset >= 0 ? leftOffeset : 0\n        const to = i + windowSize + 1\n        let count = 0\n        let sum = 0\n        for (let j = from; j < to && j < arr.length; j += 1) {\n            sum += get(arr[j])\n            count += 1\n        }\n        result[i] = setter ? setter(arr[i], sum / count) : sum / count\n    }\n    return result\n}\n\n\n// Properties of a line \n// I:  - pointA (array) [x,y]: coordinates\n//     - pointB (array) [x,y]: coordinates\n// O:  - (object) { length: l, angle: a }: properties of the line\nfunction lineProperties(pointA, pointB) {\n    const lengthX = pointB[0] - pointA[0];\n    const lengthY = pointB[1] - pointA[1];\n    return {\n        length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n        angle: Math.atan2(lengthY, lengthX),\n    };\n}\n\n// Position of a control point \n// I:  - current (array) [x, y]: current point coordinates\n//     - previous (array) [x, y]: previous point coordinates\n//     - next (array) [x, y]: next point coordinates\n//     - reverse (boolean, optional): sets the direction\n// O:  - (array) [x,y]: a tuple of coordinates\nfunction controlPoint(current, previous, next, reverse) {\n    // When 'current' is the first or last point of the array\n    // 'previous' or 'next' don't exist.\n    // Replace with 'current'\n    const p = previous || current;\n    const n = next || current;\n    \n    // The smoothing ratio\n    const smoothing = 0.2;\n    \n    // Properties of the opposed-line\n    const o = lineProperties(p, n);\n    \n    // If is end-control-point, add PI to the angle to go backward\n    const angle = o.angle + (reverse ? Math.PI : 0);\n    const length = o.length * smoothing;\n    \n    // The control point position is relative to the current point\n    const x = current[0] + Math.cos(angle) * length;\n    const y = current[1] + Math.sin(angle) * length;\n    return [x, y]\n}\n\n// Create the bezier curve command \n// I:  - point (array) [x,y]: current point coordinates\n//     - i (integer): index of 'point' in the array 'a'\n//     - a (array): complete array of points coordinates\n// O:  - (string) 'C x2,y2 x1,y1 x,y': SVG cubic bezier C command\nfunction bezierCommand(point, i, a) {\n    // start control point\n    const [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point)  // end control point\n    const [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true);\n    return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1]}`\n}\n\n// Svg path line command\n// I:  - point (array) [x, y]: coordinates\n// O:  - (string) 'L x,y': svg line command\nfunction lineCommand(point) {\n    if (point[1] === null) {\n        return `M ${point[0]} ${point[1]}`;\n    }\n    return `L ${point[0]} ${point[1]}`;\n}\n\n// Render the svg <path> element \n// I:  - points (array): points coordinates\n//     - command (function)\n//       I:  - point (array) [x,y]: current point coordinates\n//           - i (integer): index of 'point' in the array 'a'\n//           - a (array): complete array of points coordinates\n//       O:  - (string) a svg path command\n// O:  - (string): a Svg <path> element\nfunction svgPath(points, command, opts = {}) {\n    // build the d attributes by looping over the points\n    const maxX = Math.max(...points.map(d => d[0]));\n    const minX = Math.min(...points.map(d => d[0]));\n    const firstPoint = points[0] || [[0, opts.height]];\n    const lastPoint = points[points.length - 1] || [[maxX, opts.height]];\n\n    const dPrefix = `M ${0},${opts.height} L ${firstPoint[0] - 20},${opts.height - 1}`;\n    const dPostfix = `L ${lastPoint[0] + 10},${opts.height} L ${opts.width},${opts.height - 1}`;\n\n    const d = points.reduce((acc, point, i, a) => i === 0\n        // if first point\n        ? `L ${point[0]},${point[1]}`\n        // else\n        : `${acc} ${command(point, i, a)}`\n    , '');\n    \n    return `${dPrefix} ${d} ${dPostfix}`;\n}\n\nfunction makePaths(opts) {\n    return opts.data.map((d, idx) => makePath({\n        ...opts,\n        data: d,\n        yRangeMin: util.isArray(opts.yRangeMin) ? opts.yRangeMin[idx] : undefined,\n        yRangeMax: util.isArray(opts.yRangeMax) ? opts.yRangeMax[idx] : undefined,\n        avgWindow: util.isArray(opts.avgWindowLeft) ? opts.avgWindowLeft[idx] : (util.isArray(opts.avgWindowRight) ? opts.avgWindowRight[idx] : undefined),\n    }));\n}\n\nfunction makePath({ data, yMin, yMax, xMin, xMax, width, height, yRangeMin, yRangeMax, offsetY = 0, maxMinFixed = false, smooth = false, avgWindow = 2 }) {\n    const dataMap = {};\n    if (data && data.length) {\n        const maxX = xMax || Math.max(...data.map(d => d.x));\n        const minX = xMin || Math.min(...data.map(d => d.x));\n\n        let minY;\n        let maxY;\n        if (maxMinFixed) {\n            minY = util.isNumber(yMin) ? yMin : findMinY({ data });\n        } else {\n            minY = util.isNumber(yMin) ? findMinY({ data, min: yMin }) : findMinY({ data });\n            minY = round5(minY, true);\n        }\n        if (maxMinFixed) {\n            maxY = util.isNumber(yMax) ? yMax : findMaxY({ data });\n        } else {\n            maxY = util.isNumber(yMax) ? findMaxY({ data, max: yMax }) : findMaxY({ data });\n            maxY = round5(maxY);\n        }\n\n        const realHeight = height;\n        const fnX = (val, idx) => {\n            if (val === -1) {\n                return -1;\n            }\n\n            const dataVal = normalizeRange(val, minX, maxX, minX, maxX);\n            const x = Math.round(normalizeRange(dataVal, minX, maxX, 0, width));\n            // const x = Math.round(val / maxX * width);\n            if (util.isDefined(idx)) {\n                if (!dataMap[idx]) {\n                    dataMap[idx] = {};\n                }\n                dataMap[idx].x = x;\n                dataMap[idx].xVal = val;\n            }\n            return x;\n        }\n\n        const fnY = (val, idx) => {\n            if (val === -1) {\n                return height;\n            }\n            let dataVal = val;\n            if (util.isNumber(yRangeMin) && util.isNumber(yRangeMax)) {\n                dataVal = normalizeRange(dataVal, minY, maxY, yRangeMin, yRangeMax);\n                return realHeight - normalizeRange(dataVal, yRangeMin, yRangeMax, 0, height - offsetY);\n            }\n            if (dataVal === null) {\n                return null;\n            }\n            dataVal = normalizeRange(dataVal, minY, maxY, minY, maxY);\n            const y = Math.round(realHeight - normalizeRange(dataVal, minY, maxY, 0, height - offsetY));\n            if (util.isDefined(idx)) {\n                if (!dataMap[idx]) { dataMap[idx] = {}; }\n                dataMap[idx].y = y;\n                dataMap[idx].yVal = dataVal;\n            }\n            return y;\n        };\n\n        const dataArray = data.map((p, idx) => [fnX(p.x, idx + 1), fnY(p.y, idx + 1)]).filter(e => e[1] !== null);\n        const finalDataArray = avgWindow > 0 ? smoothValues(dataArray, avgWindow, (e) => e[1], (e, val) => [e[0], val]) : dataArray;\n        for (let i = 0, l = finalDataArray.length; i < l; i += 1) {\n            if (util.isDefined(dataMap[i])) {\n                dataMap[i + 1].ySmooth = finalDataArray[i][1];\n            }\n        }\n\n        const d = svgPath(finalDataArray, smooth ? bezierCommand : lineCommand, { height, width });\n        const dOriginal = svgPath(dataArray, lineCommand, { height });\n        return { d, maxX, maxY, minY, dOriginal, dataMap };\n    }\n    return {};\n}\n\nconst initialState = {\n    mouseData: {},\n};\n\n@observer\nclass LineChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.svgRef = null;\n    }\n\n    mouseMove = (e) => {\n        if (this.props.stores) {\n            const { x, y } = this.getCoordsWithPadding(e.layerX, e.layerY);\n            const { appState } = this.props.stores;\n            appState.setMousePosition([x, y]);\n        }\n    };\n\n    getCoordsWithPadding(xVal, yVal) {\n        if (!this.svgRef) {\n            return {};\n        }\n\n        const {\n            width = 600,\n            height = 200,\n            paddingLeft,\n            paddingRight,\n            paddingTop,\n            paddingBottom,\n            showYTicksLeft,\n            showYTicksRight,\n            showXTicks,\n        } = this.props;\n\n        const PADDING_LEFT = paddingLeft || (showYTicksLeft ? 35 : 0);\n        const PADDING_RIGHT = paddingRight || (showYTicksRight ? 35 : 0);\n        const PADDING_TOP = paddingTop;\n        const PADDING_BOTTOM = paddingBottom || (showXTicks ? 20 : 0);\n        // console.log({ PADDING_LEFT, PADDING_RIGHT, PADDING_TOP, PADDING_BOTTOM });\n\n        const svgWidth = this.svgRef.clientWidth;\n        const svgHeight = this.svgRef.clientHeight;\n\n        const x = parseInt(normalizeRange(xVal, PADDING_LEFT, svgWidth, PADDING_RIGHT, width), 10);\n        const y = parseInt(normalizeRange(yVal, PADDING_TOP, svgHeight, PADDING_BOTTOM, height), 10);\n\n        return { x, y };\n    }\n\n    getMouseCoordX(maxX, xPos) {\n        const { width = 600 } = this.props;\n        return parseInt(normalizeRange(xPos, 0, width, 0, maxX), 10) + 1;\n    }\n\n    getCoordX(minX, maxX, x) {\n        const { width = 600 } = this.props;\n        return normalizeRange(x, minX, maxX, 0, width);\n    }\n\n    getTextBoxX(mousePos, align, subtractPadding = 0) {\n        const RIGHT_TEXT_OFFSET = 150;\n        const LEFT_SIDE_OF_MOUSE_LINE = 180;\n        const { width = 600 } = this.props;\n\n        const pos = (mousePos / width * 100) > 75 ? mousePos - LEFT_SIDE_OF_MOUSE_LINE : mousePos;\n        if (align === 'right') {\n            return pos + TEXT_PADDING_X - subtractPadding + RIGHT_TEXT_OFFSET;\n        }\n        return pos + TEXT_PADDING_X - subtractPadding;\n    }\n\n    getMouseData(minX, maxX, dataMap, xPos, key, opt = { autoLimit: false, padding: 0 }) {\n        const { width = 600 } = this.props;\n        const x = parseInt(normalizeRange(xPos, 0, width, minX, maxX), 10) + 1;\n        if (!util.isObject(dataMap)) {\n            return null;\n        }\n        // Find closest value to current mouse position.\n        const dataMapArr = Object.values(dataMap);\n        const dataMapCurrent = dataMapArr.reduce(({ xVal, ...resto }, { xVal: a, ...rest }) =>\n            Math.abs(x - a) < Math.abs(x - xVal) ? { xVal: a, ...rest } : { xVal, ...resto }\n        );\n\n\n        if (util.isObject(dataMapCurrent)) {\n            if (!key) {\n                return dataMapCurrent;\n            }\n            // if (opt.autoLimit && key === 'y') {\n            //     const val = dataMapCurrent.yVal;\n            //     if (val > height / 2) {\n            //         return val - 70 - opt.padding;\n            //     }\n            //     return val + 20 - opt.padding;\n            // }\n            // if (opt.autoLimit && key === 'x') {\n            //     const val = dataMapCurrent.x;\n            //     if (val > width / 2) {\n            //         // console.log(`autoLimit=${autoLimit}, key=${key}, val=${val}, width=${width}`)\n            //         return val - 160 - opt.padding;\n            //     }\n            //     return val + 20 - opt.padding;\n            // }\n            const val = dataMapCurrent[key];\n            return val;\n        }\n    }\n\n    componentDidMount() {\n        this.svgRef.addEventListener('mousemove', this.mouseMove);\n        // onMouseMove={this.mouseMove}\n    }\n\n    componentWillUnmount() {\n        this.svgRef.removeEventListener('mousemove', this.mouseMove);\n    }\n\n    render() {\n        const {\n            width = 600,         // Width of svg.\n            height = 200,        // Height of svg.\n            offsetY = 0,         // Data plot offset y axis.\n            paddingLeft = 0,     // Make room for yTicksLeft.\n            paddingRight = 0,    // Make room for yTicksRight.\n            paddingTop = 0,      // Make room for legends.\n            paddingBottom = 0,   // Make room for xTicks.\n            tickCount = 6,       // Number of ticks to show\n\n            showXTicks,          // Show X ticks.\n            showYTicksLeft,      // Show Y ticks left.\n            showYTicksRight,     // Show Y ticks right.\n\n            xTicks,              // xTicks array to use instead of values. JSON.stringified and backslash escaped.\n            xTicksVal,           // Function used to show x ticks\n\n            yTicksLeft,          // yTicks array to use instead of values. JSON.stringified and backslash escaped.\n            yTicksLeftVal,       // Function used to show y ticks\n            yTicksLeftPrefix,\n            yTicksLeftPostfix,\n\n            yTicksRight,         // yTicks array to use instead of values. JSON.stringified and backslash escaped.\n            yTicksRightVal,      // Function used to show y ticks\n            yTicksRightPrefix,\n            yTicksRightPostfix,\n\n            xMin,\n            xMax,\n\n            yMaxLeft,            // Y max value to use for yTicks\n            yMinLeft,            // Y min value to use for yTicks\n\n            yMaxRight,           // Y max value to use for yTicks\n            yMinRight,           // Y min value to use for yTicks\n\n            rangeMinLeft = [],\n            rangeMaxLeft = [],\n\n            rangeMinRight = [],\n            rangeMaxRight = [],\n\n            dataLeft = [],\n            dataRight = [],\n\n            legendLeft = [],\n            legendRight = [],\n\n            unitLeft = [],\n            unitRight = [],\n\n            avgWindowLeft =[],\n            avgWindowRight =[],\n\n            hoverValLeft = [],   // Function used to show value for hover.\n            hoverValRight = [],  // Function used to show value for hover.\n\n            marker,\n        } = this.props;\n        const { appState = {} } = this.props.stores || {};\n        const { mousePos = [], darkmode } = appState;\n\n        const PADDING_LEFT = paddingLeft || (showYTicksLeft ? 35 : 0);\n        const PADDING_RIGHT = paddingRight || (showYTicksRight ? 35 : 0);\n        const PADDING_TOP = paddingTop;\n        const PADDING_BOTTOM = paddingBottom || (showXTicks ? 20 : 0);\n        // console.log({ PADDING_LEFT, PADDING_RIGHT, PADDING_TOP, PADDING_BOTTOM });\n\n        const common = {\n            width,\n            height,\n            offsetY,\n        };\n\n        // console.table(xTicks);\n        // console.table(yTicks);\n        const MIN_Y_LEFT = round5(findMinY({ data: dataLeft, min: yMinLeft }), true);\n        const MAX_Y_LEFT = round5(findMaxY({ data: dataLeft, max: yMaxLeft }), false);\n\n        const MIN_Y_RIGHT = round5(findMinY({ data: dataRight, min: yMinRight }), true);\n        const MAX_Y_RIGHT = round5(findMaxY({ data: dataRight, max: yMaxRight }), false);\n\n        const MIN_X = findMinX({ data: dataLeft.concat(dataRight), min: xMin });\n        const MAX_X = findMaxX({ data: dataLeft.concat(dataRight), max: xMax });\n        // console.log({ MIN_Y_LEFT, MAX_Y_LEFT, MIN_Y_RIGHT, MAX_Y_RIGHT, MIN_X, MAX_X });\n\n        const pathLeft = makePaths({\n            ...common,\n            data: dataLeft,\n            xMin: MIN_X,\n            xMax: MAX_X,\n            yMin: MIN_Y_LEFT,\n            yMax: MAX_Y_LEFT,\n            yRangeMin: rangeMinLeft,\n            yRangeMax: rangeMaxLeft,\n            maxMinFixed: true,\n            smooth: false,\n            avgWindowLeft,\n            offsetY: PADDING_TOP,\n        });\n\n        const pathRight = makePaths({\n            ...common,\n            data: dataRight,\n            xMin: MIN_X,\n            xMax: MAX_X,\n            yMin: MIN_Y_RIGHT,\n            yMax: MAX_Y_RIGHT,\n            yRangeMin: rangeMinRight,\n            yRangeMax: rangeMaxRight,\n            maxMinFixed: true,\n            smooth: false,\n            avgWindowRight,\n            offsetY: PADDING_TOP,\n        });\n        // console.log(pathLeft);\n\n        const TOTAL_GRAPHS_LEFT = pathLeft.length;\n        const TOTAL_GRAPHS_RIGHT = pathRight.length;\n        const TOTAL_GRAPHS = TOTAL_GRAPHS_LEFT + TOTAL_GRAPHS_RIGHT;\n        const X_TICKS = xTicks || getTicks(tickCount, MIN_X, MAX_X);\n        const Y_TICKS_LEFT = yTicksLeft || getTicks(tickCount, MIN_Y_LEFT, MAX_Y_LEFT, true, yTicksLeftPrefix, yTicksLeftPostfix);\n        const Y_TICKS_RIGHT = yTicksRight || getTicks(tickCount, MIN_Y_RIGHT, MAX_Y_RIGHT, true, yTicksRightPrefix, yTicksRightPostfix);\n        const markerX = this.getCoordX(MIN_X, MAX_X, marker);\n\n        return (\n            <div class={style.lineChart} style={`height: ${height}px; overflow: hidden;`}>\n                <svg xmlns='http://www.w3.org/2000/svg' class={style.svg} viewBox={`0 0 ${width} ${height}`}\n                    preserveAspectRatio='none'\n                    style={`padding-left: ${PADDING_LEFT}px; padding-bottom: ${PADDING_BOTTOM}px; width: calc(100%); max-height: 100%;`}\n                    ref={c => this.svgRef = c}\n                >\n                    {pathLeft && pathLeft.reverse().map((path, idx) => {\n                        const mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                        return (\n                            <>\n                                <path d={path.d} class={style[`pathLeft${TOTAL_GRAPHS_LEFT - idx - 1}`]} fill-rule='evenodd' />\n                                {mousePos && mousePos.length > 0 && path.dataMap \n                                    && mouseData && mouseData.yVal\n                                    && <line\n                                        x1={this.getCoordX(MIN_X, MAX_X, MIN_X)}\n                                        x2={mouseData.x}\n                                        y1={mouseData.ySmooth}\n                                        y2={mouseData.ySmooth}\n                                        class={`${style.mouseLine} ${style[`pathLeft${TOTAL_GRAPHS_LEFT - idx - 1}`]}`} />}\n                            </>\n                        );\n                    })}\n                    {pathRight && pathRight.reverse().map((path, idx) => {\n                        const mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                        return (\n                            <>\n                                <path d={path.d} class={style[`pathRight${TOTAL_GRAPHS_RIGHT - idx - 1}`]} />\n                                {mousePos && mousePos.length > 0 && path.dataMap \n                                    && mouseData && mouseData.yVal\n                                    && <line\n                                        x1={this.getCoordX(MIN_X, MAX_X, MAX_X)}\n                                        x2={mouseData.x}\n                                        y1={mouseData.ySmooth}\n                                        y2={mouseData.ySmooth}\n                                        class={`${style.mouseLine} ${style[`pathRight${TOTAL_GRAPHS_RIGHT - idx - 1}`]}`} />}\n                            </>\n                        );\n                    })}\n\n                    {/* {dCold && dCold.map(o => <line x1={o[0].x} y1={o[0].y} x2={o[1].x} y2={o[1].y} class={style.pathCold} />)};\n                    {dWarm && dWarm.map(o => <line x1={o[0].x} y1={o[0].y} x2={o[1].x} y2={o[1].y} class={style.pathWarm} />)}; */}\n\n                    {legendLeft && legendLeft.map((legend, idx) => (\n                        <>\n                            <line x1='10' y1={5 + 10 * idx} x2='30' y2={5 + 10 * idx} class={style[`pathLeft${idx}`]} />\n                            <text x='35' y={10 + 10 * idx} font-size='10px' class={style.pathText}>{legend}</text>\n                        </>\n                    ))}\n                    {legendRight && legendRight.map((legend, idx) => (\n                        <>\n                            <line x1={width - 150} y1={5 + 10 * idx} x2={width - 130} y2={5 + 10 * idx} class={style[`pathRight${idx}`]} />\n                            <text x={width - 125} y={10 + 10 * idx} font-size='10px' class={style.pathText}>{legend}</text>\n                        </>\n                    ))} \n\n                    {mousePos && mousePos.length > 0 && <line x1={mousePos[0]} y1={height} x2={mousePos[0]} y2='0' class={style.mouseLine} />}\n                    {markerX && <line x1={markerX} y1={height} x2={markerX} y2='0' class={style.marker} />}\n\n                    {pathLeft && mousePos && mousePos.length > 0 && <rect \n                        x={this.getTextBoxX(mousePos[0], '', TEXT_BOX_PADDING_X)}\n                        y={height / 2}\n                        width='165' height={TOTAL_GRAPHS * 15 + 25} rx='5' ry='5' class={style.mouseHoverBox}\n                    />}\n                    {mousePos && mousePos.length > 0 \n                        && <text \n                            x={this.getTextBoxX(mousePos[0])}\n                            y={height / 2}\n                            font-size='11px'\n                            class={darkmode ? style.mouseHoverDarkmode : style.mouseHover}\n                            style='border: #ff0000 solid 2px;'\n                        >\n                            {pathLeft && pathLeft.reverse().map((path, idx) => {\n                                const hoverVal = util.isArray(hoverValLeft) && util.isFunction(hoverValLeft[idx]) ? hoverValLeft[idx] : (val) => val;\n                                const mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                                return (\n                                    <>\n                                        {mouseData && idx === 0 && <tspan\n                                            x={this.getTextBoxX(mousePos[0])}\n                                            dy='1.2em'\n                                        >\n                                            {transformXTick(mouseData.xVal, xTicksVal)}\n                                        </tspan>}\n                                        {path.d && path.dataMap && util.isNumber(mouseData.yVal) && \n                                        <tspan\n                                            // x={this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0], 'x', { autoLimit: true, padding: 0, maxX: MAX_X })}\n                                            // x={this.getCoordX(MIN_X, MAX_X, mouseData.xVal)}\n                                            x={this.getTextBoxX(mousePos[0])}\n                                            dy='1.2em'\n                                            text-anchor='start'\n                                        >\n                                            <tspan class={style[`pathLeft${idx}`]}>--</tspan> {legendLeft[idx]}: {hoverVal(mouseData.yVal)} {unitLeft[idx]}\n                                        </tspan>}\n                                    </>\n                                );\n                            })}\n                            {pathRight && pathRight.reverse().map((path, idx) => {\n                                const hoverVal = util.isArray(hoverValRight) && util.isFunction(hoverValRight[idx]) ? hoverValRight[idx] : (val) => val;\n                                const mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                                return (\n                                    <>\n                                        {path.d && path.dataMap && util.isNumber(mouseData.yVal) && \n                                        <tspan\n                                            x={this.getTextBoxX(mousePos[0], 'right')}\n                                            dy='1.2em'\n                                            text-anchor='end'\n                                        >\n                                             {legendRight[idx]}: {hoverVal(mouseData.yVal)} {unitRight[idx]} <tspan class={style[`pathRight${idx}`]}>--</tspan>\n                                        </tspan>}\n                                    </>\n                                );\n                            })}\n                        </text>}\n                </svg>\n                {showXTicks && (\n                    <div class={style['x-axis']}\n                        style={{\n                            left: `${PADDING_LEFT}px`,\n                            width: `calc(100% - ${PADDING_LEFT}px)`,\n                        }}\n                    >\n                        {X_TICKS.map(v => <div data-value={transformXTick(v, xTicksVal)} />)}\n                    </div>\n                )}\n                {showYTicksLeft && (\n                    <div\n                        class={style['y-axis-left']}\n                        style={{\n                            top: `${PADDING_TOP}px`,\n                            bottom: `${PADDING_BOTTOM}px`,\n                        }}\n                    >\n                        {Y_TICKS_LEFT.map(v => <div data-value={transformYTick(v, yTicksLeftVal)} />)}\n                    </div>\n                )}\n                {showYTicksRight && (\n                    <div\n                        class={style['y-axis-right']}\n                        style={{\n                            top: `${PADDING_TOP}px`,\n                            bottom: `${PADDING_BOTTOM}px`,\n                        }}\n                    >\n                        {Y_TICKS_RIGHT.map(v => <div data-value={transformYTick(v, yTicksRightVal)} />)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default LineChart;\n"],"sourceRoot":""}