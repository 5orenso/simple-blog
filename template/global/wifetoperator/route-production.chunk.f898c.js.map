{"version":3,"sources":["webpack:///./routes/production/index.js"],"names":["initialState","Production","observer","props","setWindpark","e","stores","windmillStore","setCurrentWindparkName","target","dataset","windpark","loadAll","state","xMin","xMax","now","markerDays","forcastYrData","weatherYrStore","this","productionStore","priceStore","currentWindparkName","windparkCapacity","wutil","getDateDiffTime","Math","floor","Date","getTime","timeRangeDays","setState","loadYrData","loadOpenData","getWindSpeeds","generateData","prices","updateQueryFilter","name","currentWindpark","altitude","position","lat","lon","load","weatherOpenStore","componentDidMount","render","darkmode","appState","windparks","windparkMaxCapacity","windparkCapacityPercent","productionData","productionBoostData","productionBoostDataFiltered","productionLongLifeData","productionLongLifeDataFiltered","class","style","util","format","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeftPostfix","unitLeft","avgWindowLeft","smoothLeft","marker","markers","center","zoom","waypoints","windmills","Component"],"mappings":"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","file":"route-production.chunk.f898c.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\nimport Map from '../../components/map';\n\nconst initialState = {};\n\n@observer\nclass Production extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherYrStore, productionStore, priceStore } = this.props.stores;\n\t\tconst { currentWindparkName, windparkCapacity } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tconst markerDays = wutil.timeRangeDays(-4, 11);\n\t\tthis.setState({ now, xMin, xMax, markerDays });\n\n\t\tawait this.loadYrData();\n\t\tawait this.loadOpenData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tpriceStore.generateData();\n\n\t\tconst { prices } = priceStore;\n\t\tproductionStore.generateData(forcastYrData, prices, windparkCapacity);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherYrStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\taltitude: currentWindpark.position.altitude,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherYrStore.load();\n\t}\n\n\tasync loadOpenData() {\n\t\tconst { weatherOpenStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherOpenStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherOpenStore.load();\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax, markerDays } = this.state;\n\t\tconst { appState, windmillStore, productionStore, weatherYrStore, weatherOpenStore } = this.props.stores;\n        const { darkmode } = appState;\n\t\tconst { windparks, currentWindparkName, currentWindpark, windparkCapacity, windparkMaxCapacity } = windmillStore;\n\t\tconst windparkCapacityPercent = windparkCapacity / windparkMaxCapacity * 100\n\t\tconst { productionData, productionBoostDataFiltered: productionBoostData, productionLongLifeDataFiltered: productionLongLifeData } = productionStore;\n\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tconst windspeedsOpen = weatherOpenStore.getWindSpeeds(currentWindparkName);\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2' style='margin-bottom: 200px;'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-5'>\n\t\t\t\t\t\t<h1><i class='fas fa-chart-bar' /> Production - {currentWindparkName}</h1>\n\t\t\t\t\t\t<span class='text-muted'>Capacity at</span> {util.format(windparkCapacityPercent, 1)}%\n\t\t\t\t\t\t<span class='text-muted'>, {windparkCapacity}/{windparkMaxCapacity} Mw</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-7 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={400}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\tdataLeft={[productionData, productionBoostData, productionLongLifeData]}\n\t\t\t\t\t\t\tlegendLeft={['Normal production', 'Boost 10%', 'Long life -5%']}\n\t\t\t\t\t\t\tyMaxLeft={windparkCapacity}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\t// yTicks={['500Mw', '400Mw', '300Mw', '200Mw', '100Mw', '0Mw']}\n\t\t\t\t\t\t\tyTicksLeftPostfix={'Mw'}\n\t\t\t\t\t\t\tunitLeft={['Mw', 'Mw', 'Mw']}\n\t\t\t\t\t\t\tavgWindowLeft={[1, 1, 1]}\n\t\t\t\t\t\t\tsmoothLeft={[1, 1, 1]}\n\n\t\t\t\t\t\t\t// dataRight={[forcastYrData, windspeedsOpen]}\n\t\t\t\t\t\t\t// legendRight={['Wind forcast Yr', 'Wind OpenWeather']}\n\t\t\t\t\t\t\t// yMaxRight={30}\n\t\t\t\t\t\t\t// yMinRight={0}\n\t\t\t\t\t\t\t// showYTicksRight={1}\n\t\t\t\t\t\t\t// yTicksRightPostfix='m/s'\n\t\t\t\t\t\t\t// unitRight={['m/s', 'm/s']}\n\t\t\t\t\t\t\t// smoothRight={[1, 1]}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t\tmarkers={markerDays}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class='row pt-4'>\n\t\t\t\t\t<div class='col-12' style='height: 50vh;'>\n\t\t\t\t\t\t<Map stores={this.props.stores}\n\t\t\t\t\t\t\tdarkmode={darkmode}\n\t\t\t\t\t\t\tcenter={[currentWindpark.position.lat, currentWindpark.position.lon]}\n\t\t\t\t\t\t\tzoom={currentWindpark.zoom}\n\t\t\t\t\t\t\twaypoints={currentWindpark.windmills}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Production;\n"],"sourceRoot":""}