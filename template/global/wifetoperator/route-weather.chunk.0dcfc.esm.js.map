{"version":3,"sources":["webpack:///./routes/weather/index.js"],"names":["initialState","Weather","observer","Component","constructor","props","super","setWindpark","e","windmillStore","this","stores","setCurrentWindparkName","target","dataset","windpark","loadAll","state","weatherAiStore","weatherYrStore","currentWindparkName","xMin","wutil","getDateDiffTime","xMax","now","Math","floor","Date","getTime","setState","loadYrData","forcastYrData","getWindSpeeds","generateData","windparks","i","l","length","park","updateQueryFilter","name","altitude","position","lat","lon","load","Promise","all","componentDidMount","render","windspeeds","forcasts","weatherAiData","class","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","util","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeft","unitLeft","marker"],"mappings":"2fAOA,MAAMA,EAAe,G,IAGfC,EADLC,Y,EAAD,cACsBC,YAClBC,YAAYC,GACRC,MAAMD,GADS,KAwCtBE,YAAeC,IACd,MAAM,cAAEC,GAAkBC,KAAKL,MAAMM,OAErCF,EAAcG,uBADGJ,EAAEK,OAAOC,QAAQC,UAElCL,KAAKM,WA1CCN,KAAKO,M,+VAAL,IACOjB,GAId,gBACC,MAAM,cAAES,EAAF,eAAiBS,EAAjB,eAAiCC,GAAmBT,KAAKL,MAAMM,QAC/D,oBAAES,GAAwBX,EAE1BY,EAAOC,IAAMC,iBAAiB,GAC9BC,EAAOF,IAAMC,gBAAgB,IAC7BE,EAAMC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAC9CnB,KAAKoB,SAAS,CAAEL,MAAKJ,OAAMG,eAErBd,KAAKqB,aACX,MAAMC,EAAgBb,EAAec,cAAcb,GAEnDF,EAAegB,aAAaF,GAG7B,mBACC,MAAM,eAAEb,EAAF,cAAkBV,GAAkBC,KAAKL,MAAMM,QAC/C,UAAEwB,GAAc1B,EAGtB,IAAK,IAAI2B,EAAI,EAAGC,EAAIF,EAAUG,OAAQF,EAAIC,EAAGD,GAAK,EAAG,CACpD,MAAMG,EAAOJ,EAAUC,GACvBjB,EAAeqB,kBAAkB,CAChCC,KAAMF,EAAKE,KACXC,SAAUH,EAAKI,SAASD,SACxBE,IAAKL,EAAKI,SAASC,IACnBC,IAAKN,EAAKI,SAASE,YAEd1B,EAAe2B,OAEtB,aAAaC,QAAQC,IAXF,IAqBpBC,oBACCvC,KAAKM,UAGNkC,SACC,MAAM,IAAEzB,EAAF,KAAOJ,EAAP,KAAaG,GAASd,KAAKO,OAC3B,eAAEE,EAAF,eAAkBD,EAAlB,cAAkCT,GAAkBC,KAAKL,MAAMM,QAC/D,UAAEwB,EAAF,oBAAaf,GAAwBX,EACrC0C,EAAahC,EAAec,cAAcb,IACxCgC,SAAUC,GAAkBnC,EAEpC,OACC,mBAAKoC,MAAM,6BACV,mBAAKA,MAAM,OACV,mBAAKA,MAAM,SACV,sBAAI,iBAAGA,MAAM,0BAAb,aAED,mBAAKA,MAAM,cACV,kBAAIA,MAAM,6BACTnB,GAAaA,EAAUoB,IAAIC,GAC3B,kBAAIF,MAAM,YACT,sBACCA,MAAQ,0BAAwBE,EAAGf,OAASrB,EAAsB,SAAW,IAC7EqC,QAAS/C,KAAKH,YACdmD,gBAAeF,EAAGf,MACjBe,EAAGf,UAKR,mBAAKa,MAAM,UAEV,YAAC,IAAD,CACC3C,OAAQD,KAAKL,MAAMM,OACnBgD,MAAO,KACPC,OAAQ,IACRC,WAAY,EACZC,UAAWC,GAAOC,IAAKC,QAAQF,GAC/B1C,KAAMA,EACNG,KAAMA,EACN0C,WAAY,GAGZC,SAAU,CAAChB,EAAYE,GACvBe,WAAY,CAAC,kBAAmB,sBAChCC,SAAU,GACVC,SAAU,EACVC,eAAgB,EAChBC,WAAY,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,SACxEC,SAAU,CAAC,MAAO,OAElBC,OAAQjD,W,EAYAxB","file":"route-weather.chunk.0dcfc.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\n\nconst initialState = {};\n\n@observer\nclass Weather extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherAiStore, weatherYrStore } = this.props.stores;\n\t\tconst { currentWindparkName } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({ now, xMin, xMax });\n\n\t\tawait this.loadYrData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\n\t\tweatherAiStore.generateData(forcastYrData);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { windparks } = windmillStore;\n\n\t\tconst yrPromises = [];\n\t\tfor (let i = 0, l = windparks.length; i < l; i += 1) {\n\t\t\tconst park = windparks[i];\n\t\t\tweatherYrStore.updateQueryFilter({\n\t\t\t\tname: park.name,\n\t\t\t\taltitude: park.position.altitude,\n\t\t\t\tlat: park.position.lat,\n\t\t\t\tlon: park.position.lon,\n\t\t\t});\n\t\t\tawait weatherYrStore.load();\n\t\t}\n\t\treturn await Promise.all(yrPromises);\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax } = this.state;\n\t\tconst { weatherYrStore, weatherAiStore, windmillStore } = this.props.stores;\n\t\tconst { windparks, currentWindparkName } = windmillStore;\n\t\tconst windspeeds = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tconst { forcasts: weatherAiData } = weatherAiStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-4'>\n\t\t\t\t\t\t<h1><i class='fas fa-cloud-sun-rain' /> Weather</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-8 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t{/* <xmp>{JSON.stringify(windspeeds, null, 4)}</xmp> */}\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\t// dataLeft={[windspeeds, aiData, forcastStormData, forcastYrData]}\n\t\t\t\t\t\t\tdataLeft={[windspeeds, weatherAiData]}\n\t\t\t\t\t\t\tlegendLeft={['Wind forcast Yr', 'Wind AI prediction']}\n\t\t\t\t\t\t\tyMaxLeft={30}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\tyTicksLeft={['30 m/s', '25 m/s', '20 m/s', '15 m/s', '10 m/s', '5 m/s', '0 m/s']}\n\t\t\t\t\t\t\tunitLeft={['m/s', 'm/s']}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* <xmp>{forcasts.length}</xmp>\n\t\t\t\t<xmp>{JSON.stringify(windspeeds, null, 4)}</xmp>\n\t\t\t\t<xmp>{JSON.stringify(forcasts, null, 4)}</xmp> */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;\n"],"sourceRoot":""}