{"version":3,"sources":["webpack:///./routes/strategy/index.js"],"names":["initialState","Strategy","observer","props","setWindpark","e","stores","windmillStore","setCurrentWindparkName","target","dataset","windpark","loadAll","state","xMin","xMax","now","markerDays","forcastYrData","weatherYrStore","this","productionStore","priceStore","demandStore","currentWindparkName","windparkCapacity","wutil","getDateDiffTime","Math","floor","Date","getTime","timeRangeDays","setState","loadYrData","loadOpenData","getWindSpeeds","generateData","prices","updateQueryFilter","name","currentWindpark","altitude","position","lat","lon","load","weatherOpenStore","componentDidMount","render","demandData","demands","demandAi","demandAiFiltered","windparks","windparkMaxCapacity","windparkCapacityPercent","productionData","productionBoostData","productionBoostDataFiltered","productionLongLifeData","productionLongLifeDataFiltered","class","style","util","format","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeft","unitLeft","avgWindowLeft","smoothLeft","dataRight","legendRight","yMaxRight","yMinRight","showYTicksRight","yTicksRight","unitRight","avgWindowRight","smoothRight","marker","markers","Component"],"mappings":"2fAOMA,EAAe,GAGfC,EADLC,Y,cAEG,WAAYC,GAAO,aACf,cAAMA,IAAN,MAoDPC,YAAc,SAACC,GACY,EAAKF,MAAMG,OAA7BC,cAEMC,uBADGH,EAAEI,OAAOC,QAAQC,UAElC,EAAKC,WAvDC,EAAKC,M,+VAAL,IACOb,GAHQ,E,0HAOhBY,QAAN,gEAIOE,EACAC,EACAC,EACAC,EAKAC,EAFN,OATuBC,GADxB,EACqFC,KAAKjB,MAAMG,QAAxEa,eAAgBE,EADxC,EACwCA,gBAAiBC,EADzD,EACyDA,WAAYC,EADrE,EACqEA,YAC5DC,GADAjB,EADT,EACSA,eACAiB,oBAAqBC,EAAqBlB,EAArBkB,iBAEvBX,EAAOY,IAAMC,iBAAiB,GAC9BZ,EAAOW,IAAMC,gBAAgB,IAC7BX,EAAMY,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KACxCd,EAAaS,IAAMM,eAAe,EAAG,IAC3CZ,KAAKa,SAAS,CAAEjB,MAAKF,OAAMC,OAAME,eAEjC,gBAAMG,KAAKc,cAAX,KAAuB,eACvB,uBAAMd,KAAKe,gBAAX,MAAyB,sBACnBjB,EAAgBC,EAAeiB,cAAcZ,GACnDF,EAAWe,eAGXhB,EAAgBgB,aAAanB,EADVI,EAAXgB,OAC4Cb,GAEpDF,EAAYc,eAPa,+BADF,sCAVxB,a,EAqBMH,WAAN,sDAUQ,OATCf,GADT,EAC2CC,KAAKjB,MAAMG,QAA7Ca,gBAGOoB,kBAAkB,CAChCC,MAHOC,EAFT,EACyBlC,cAChBkC,iBAGeD,KACtBE,SAAUD,EAAgBE,SAASD,SACnCE,IAAKH,EAAgBE,SAASC,IAC9BC,IAAKJ,EAAgBE,SAASE,MAExB,gBAAM1B,EAAe2B,QAArB,KAA2B,MAVnC,a,EAaMX,aAAN,sDASQ,OARCY,GADT,EAC6C3B,KAAKjB,MAAMG,QAA/CyC,kBAGSR,kBAAkB,CAClCC,MAHOC,EAFT,EAC2BlC,cAClBkC,iBAGeD,KACtBI,IAAKH,EAAgBE,SAASC,IAC9BC,IAAKJ,EAAgBE,SAASE,MAExB,gBAAME,EAAiBD,QAAvB,KAA6B,MATrC,a,EAmBAE,kBAAA,WACC5B,KAAKR,W,EAGNqC,OAAA,WAAS,aACgC7B,KAAKP,MAArCG,EADA,EACAA,IAAKF,EADL,EACKA,KAAMC,EADX,EACWA,KAAME,EADjB,EACiBA,WADjB,EAEgDG,KAAKjB,MAAMG,OAA3DC,EAFA,EAEAA,cAAec,EAFf,EAEeA,gBAAiBE,EAFhC,EAEgCA,YACvB2B,EAA2C3B,EAApD4B,QAAuCC,EAAa7B,EAA/B8B,iBAErBC,EAA0E/C,EAA1E+C,UAAW9B,EAA+DjB,EAA/DiB,oBAAqBC,EAA0ClB,EAA1CkB,iBAAkB8B,EAAwBhD,EAAxBgD,oBACpDC,EAA0B/B,EAAmB8B,EAAsB,IACjEE,EAA6HpC,EAA7HoC,eAA6CC,EAAgFrC,EAA7GsC,4BAAkFC,EAA2BvC,EAA3DwC,+BAE1E,OACC,mBAAKC,MAAM,4BAA4BC,MAAM,yBAC5C,mBAAKD,MAAM,OACV,mBAAKA,MAAM,SACV,sBAAI,iBAAGA,MAAM,wBAAb,eAAkDtC,GAClD,oBAAMsC,MAAM,cAAZ,eAFD,IAE8CE,IAAKC,OAAOT,EAAyB,GAFnF,IAGC,oBAAMM,MAAM,cAAZ,KAA4BrC,EAA5B,IAA+C8B,EAA/C,QAED,mBAAKO,MAAM,cACV,kBAAIA,MAAM,6BACTR,GAAaA,EAAUY,KAAI,SAAAC,GAAE,OAC7B,kBAAIL,MAAM,YACT,sBACCA,MAAK,0BAA2BK,EAAG3B,OAAShB,EAAsB,SAAW,IAC7E4C,QAAS,EAAKhE,YACdiE,gBAAeF,EAAG3B,MACjB2B,EAAG3B,YAKR,mBAAKsB,MAAM,UACV,YAAC,IAAD,CACCxD,OAAQc,KAAKjB,MAAMG,OACnBgE,MAAO,KACPC,OAAQ,IACRC,WAAY,EACZC,UAAW,SAAAC,GAAG,OAAIV,IAAKW,QAAQD,IAC/B5D,KAAMA,EACNC,KAAMA,EACN6D,WAAY,GAEZC,SAAU,CAAC3B,EAAYE,GACvB0B,WAAY,CAAC,SAAU,wBACvBC,SAAU,IACVC,SAAU,EACVC,eAAgB,EAChBC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,OACzCC,SAAU,CAAC,KAAM,MACjBC,cAAe,CAAC,EAAG,GACnBC,WAAY,CAAC,EAAG,GAEhBC,UAAW,CAAC7B,EAAgBC,EAAqBE,GACjD2B,YAAa,CAAC,oBAAqB,YAAa,iBAChDC,UAAW,IACXC,UAAW,EACXC,gBAAiB,EACjBC,YAAa,CAAC,MAAO,MAAO,MAAO,MAAO,OAC1CC,UAAW,CAAC,MACZC,eAAgB,CAAC,EAAG,EAAG,GACvBC,YAAa,CAAC,EAAG,EAAG,GAEpBC,OAAQ/E,EACRgF,QAAS/E,Q,GA/HOgF,e,EAwIRhG","file":"route-strategy.chunk.0802d.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\n\nconst initialState = {};\n\n@observer\nclass Strategy extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherYrStore, productionStore, priceStore, demandStore } = this.props.stores;\n\t\tconst { currentWindparkName, windparkCapacity } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tconst markerDays = wutil.timeRangeDays(-4, 11);\n\t\tthis.setState({ now, xMin, xMax, markerDays });\n\n\t\tawait this.loadYrData();\n\t\tawait this.loadOpenData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tpriceStore.generateData();\n\n\t\tconst { prices } = priceStore;\n\t\tproductionStore.generateData(forcastYrData, prices, windparkCapacity);\n\n\t\tdemandStore.generateData();\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherYrStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\taltitude: currentWindpark.position.altitude,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherYrStore.load();\n\t}\n\n\tasync loadOpenData() {\n\t\tconst { weatherOpenStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherOpenStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherOpenStore.load();\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax, markerDays } = this.state;\n\t\tconst { windmillStore, productionStore, demandStore } = this.props.stores;\n\t\tconst { demands: demandData, demandAiFiltered: demandAi } = demandStore;\n\n\t\tconst { windparks, currentWindparkName, windparkCapacity, windparkMaxCapacity } = windmillStore;\n\t\tconst windparkCapacityPercent = windparkCapacity / windparkMaxCapacity * 100\n\t\tconst { productionData, productionBoostDataFiltered: productionBoostData, productionLongLifeDataFiltered: productionLongLifeData } = productionStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2' style='margin-bottom: 200px;'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-4'>\n\t\t\t\t\t\t<h1><i class='fas fa-chess-knight' /> Strategy - {currentWindparkName}</h1>\n\t\t\t\t\t\t<span class='text-muted'>Capacity at</span> {util.format(windparkCapacityPercent, 1)}%\n\t\t\t\t\t\t<span class='text-muted'>, {windparkCapacity}/{windparkMaxCapacity} Mw</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-8 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\tdataLeft={[demandData, demandAi]}\n\t\t\t\t\t\t\tlegendLeft={['Demand', 'Demand AI prediction']}\n\t\t\t\t\t\t\tyMaxLeft={4000}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\tyTicksLeft={['4TW', '3TW', '2TW', '1TW', '0TW']}\n\t\t\t\t\t\t\tunitLeft={['Mw', 'Mw']}\n\t\t\t\t\t\t\tavgWindowLeft={[2, 2]}\n\t\t\t\t\t\t\tsmoothLeft={[1, 1]}\n\n\t\t\t\t\t\t\tdataRight={[productionData, productionBoostData, productionLongLifeData]}\n\t\t\t\t\t\t\tlegendRight={['Normal production', 'Boost 10%', 'Long life -5%']}\n\t\t\t\t\t\t\tyMaxRight={4000}\n\t\t\t\t\t\t\tyMinRight={0}\n\t\t\t\t\t\t\tshowYTicksRight={1}\n\t\t\t\t\t\t\tyTicksRight={['4TW', '3TW', '2TW', '1TW', '0TW']}\n\t\t\t\t\t\t\tunitRight={['Mw']}\n\t\t\t\t\t\t\tavgWindowRight={[1, 1, 1]}\n\t\t\t\t\t\t\tsmoothRight={[1, 1, 1]}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t\tmarkers={markerDays}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Strategy;\n"],"sourceRoot":""}