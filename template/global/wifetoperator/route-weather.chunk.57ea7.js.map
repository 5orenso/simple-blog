{"version":3,"sources":["webpack:///./routes/weather/index.js"],"names":["initialState","Weather","observer","props","setWindpark","e","stores","windmillStore","setCurrentWindparkName","target","dataset","windpark","loadAll","state","xMin","xMax","now","forcastYrData","weatherAiStore","this","weatherYrStore","currentWindparkName","wutil","getDateDiffTime","Math","floor","Date","getTime","setState","loadYrData","loadOpenData","getWindSpeeds","generateData","updateQueryFilter","name","currentWindpark","altitude","position","lat","lon","load","weatherOpenStore","componentDidMount","console","log","render","darkmode","appState","windparks","windspeeds","windspeedsOpen","weatherAiData","forcasts","class","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","util","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeft","unitLeft","avgWindowLeft","smoothLeft","marker","style","center","zoom","waypoints","windmills","Component"],"mappings":"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","file":"route-weather.chunk.57ea7.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\nimport Map from '../../components/map';\n\nconst initialState = {};\n\n@observer\nclass Weather extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherAiStore, weatherYrStore } = this.props.stores;\n\t\tconst { currentWindparkName } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({ now, xMin, xMax });\n\n\t\tawait this.loadYrData();\n\t\tawait this.loadOpenData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\n\t\tweatherAiStore.generateData(forcastYrData);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherYrStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\taltitude: currentWindpark.position.altitude,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherYrStore.load();\n\t}\n\n\tasync loadOpenData() {\n\t\tconst { weatherOpenStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherOpenStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherOpenStore.load();\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('componentDidMount');\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax } = this.state;\n\t\tconst { appState, weatherYrStore, weatherOpenStore, weatherAiStore, windmillStore } = this.props.stores;\n\t\tconst { darkmode } = appState;\n\t\tconst { windparks, currentWindparkName, currentWindpark } = windmillStore;\n\t\tconst windspeeds = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tconst windspeedsOpen = weatherOpenStore.getWindSpeeds(currentWindparkName);\n\t\tconst { forcasts: weatherAiData } = weatherAiStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-4'>\n\t\t\t\t\t\t<h1><i class='fas fa-cloud-sun-rain' /> Weather</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-8 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\t// dataLeft={[windspeeds, aiData, forcastStormData, forcastYrData]}\n\t\t\t\t\t\t\tdataLeft={[windspeeds, windspeedsOpen, weatherAiData]}\n\t\t\t\t\t\t\tlegendLeft={['Wind forcast Yr', 'Wind OpenWeather', 'Wind AI prediction']}\n\t\t\t\t\t\t\tyMaxLeft={30}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\tyTicksLeft={['30 m/s', '25 m/s', '20 m/s', '15 m/s', '10 m/s', '5 m/s', '0 m/s']}\n\t\t\t\t\t\t\tunitLeft={['m/s', 'm/s']}\n\t\t\t\t\t\t\tavgWindowLeft={[0, 0, 4]}\n\t\t\t\t\t\t\tsmoothLeft={[1, 1, 1]}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class='row pt-4'>\n\t\t\t\t\t<div class='col-12' style='height: 45vh;'>\n\t\t\t\t\t\t<Map stores={this.props.stores}\n\t\t\t\t\t\t\tdarkmode={darkmode}\n\t\t\t\t\t\t\tcenter={[currentWindpark.position.lat, currentWindpark.position.lon]}\n\t\t\t\t\t\t\tzoom={currentWindpark.zoom - 2}\n\t\t\t\t\t\t\twaypoints={currentWindpark.windmills}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* <xmp>{forcasts.length}</xmp>\n\t\t\t\t<xmp>{JSON.stringify(windspeeds, null, 4)}</xmp>\n\t\t\t\t<xmp>{JSON.stringify(forcasts, null, 4)}</xmp> */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;\n"],"sourceRoot":""}