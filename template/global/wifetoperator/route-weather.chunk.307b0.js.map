{"version":3,"sources":["webpack:///./routes/weather/index.js"],"names":["initialState","Weather","observer","props","setWindpark","e","stores","windmillStore","setCurrentWindparkName","target","dataset","windpark","loadAll","state","xMin","xMax","now","forcastYrData","weatherAiStore","this","weatherYrStore","currentWindparkName","wutil","getDateDiffTime","Math","floor","Date","getTime","setState","loadYrData","getWindSpeeds","generateData","i","l","updateQueryFilter","name","park","windparks","altitude","position","lat","lon","load","Promise","all","yrPromises","length","componentDidMount","render","windspeeds","weatherAiData","forcasts","class","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","util","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeft","unitLeft","marker","Component"],"mappings":"2fAOMA,EAAe,GAGfC,EADLC,Y,cAEG,WAAYC,GAAO,aACf,cAAMA,IAAN,MAuCPC,YAAc,SAACC,GACY,EAAKF,MAAMG,OAA7BC,cAEMC,uBADGH,EAAEI,OAAOC,QAAQC,UAElC,EAAKC,WA1CC,EAAKC,M,+VAAL,IACOb,GAHQ,E,0HAOhBY,QAAN,wDAIOE,EACAC,EACAC,EAIAC,EADN,OARuBC,GADxB,EAC2DC,KAAKhB,MAAMG,QAA9CY,eAAgBE,EADxC,EACwCA,eAC/BC,EAFT,EACSd,cACAc,oBAEFP,EAAOQ,IAAMC,iBAAiB,GAC9BR,EAAOO,IAAMC,gBAAgB,IAC7BP,EAAMQ,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAC9CR,KAAKS,SAAS,CAAEZ,MAAKF,OAAMC,SAE3B,gBAAMI,KAAKU,cAAX,MAAuB,sBACjBZ,EAAgBG,EAAeU,cAAcT,GAEnDH,EAAea,aAAad,GAHL,gCATxB,a,EAeMY,WAAN,gEAK8CG,GAAK,EALnD,sBAKuCA,EAAIC,GAEzCb,EAAec,kBAAkB,CAChCC,MAFKC,EAAOC,EAAUL,IAEXG,KACXG,SAAUF,EAAKG,SAASD,SACxBE,IAAKJ,EAAKG,SAASC,IACnBC,IAAKL,EAAKG,SAASE,MAEpB,gBAAMrB,EAAesB,QAArB,MAA2B,oDAb7B,iBAeQ,uBAAMC,QAAQC,IAAIC,IAAlB,KAA6B,KAfrC,UAIOA,EACGb,EAAOC,EACTG,EANR,SACShB,GADT,EAC2CD,KAAKhB,MAAMG,QAA7Cc,eAGFyB,EAAa,GACVb,EAAI,EAAGC,GAHRI,EAFT,EACyB9B,cAChB8B,WAGsBS,QAL/B,8L,EAyBAC,kBAAA,WACC5B,KAAKP,W,EAGNoC,OAAA,WAAS,aACoB7B,KAAKN,MAAzBG,EADA,EACAA,IAAKF,EADL,EACKA,KAAMC,EADX,EACWA,KADX,EAEkDI,KAAKhB,MAAMG,OAA7CY,EAFhB,EAEgBA,eAAgBX,EAFhC,EAEgCA,cAChC8B,EAAmC9B,EAAnC8B,UAAWhB,EAAwBd,EAAxBc,oBACb4B,EAJE,EAEA7B,eAE0BU,cAAcT,GAC9B6B,EAAkBhC,EAA5BiC,SAER,OACC,mBAAKC,MAAM,6BACV,mBAAKA,MAAM,OACV,mBAAKA,MAAM,SACV,sBAAI,iBAAGA,MAAM,0BAAb,aAED,mBAAKA,MAAM,cACV,kBAAIA,MAAM,6BACTf,GAAaA,EAAUgB,KAAI,SAAAC,GAAE,OAC7B,kBAAIF,MAAM,YACT,sBACCA,MAAK,0BAA2BE,EAAGnB,OAASd,EAAsB,SAAW,IAC7EkC,QAAS,EAAKnD,YACdoD,gBAAeF,EAAGnB,MACjBmB,EAAGnB,YAKR,mBAAKiB,MAAM,UAEV,YAAC,IAAD,CACC9C,OAAQa,KAAKhB,MAAMG,OACnBmD,MAAO,KACPC,OAAQ,IACRC,WAAY,EACZC,UAAW,SAAAC,GAAG,OAAIC,IAAKC,QAAQF,IAC/B/C,KAAMA,EACNC,KAAMA,EACNiD,WAAY,GAGZC,SAAU,CAAChB,EAAYC,GACvBgB,WAAY,CAAC,kBAAmB,sBAChCC,SAAU,GACVC,SAAU,EACVC,eAAgB,EAChBC,WAAY,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,SACxEC,SAAU,CAAC,MAAO,OAElBC,OAAQxD,Q,GAnGOyD,e,EA+GPxE","file":"route-weather.chunk.307b0.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\n\nconst initialState = {};\n\n@observer\nclass Weather extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherAiStore, weatherYrStore } = this.props.stores;\n\t\tconst { currentWindparkName } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({ now, xMin, xMax });\n\n\t\tawait this.loadYrData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\n\t\tweatherAiStore.generateData(forcastYrData);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { windparks } = windmillStore;\n\n\t\tconst yrPromises = [];\n\t\tfor (let i = 0, l = windparks.length; i < l; i += 1) {\n\t\t\tconst park = windparks[i];\n\t\t\tweatherYrStore.updateQueryFilter({\n\t\t\t\tname: park.name,\n\t\t\t\taltitude: park.position.altitude,\n\t\t\t\tlat: park.position.lat,\n\t\t\t\tlon: park.position.lon,\n\t\t\t});\n\t\t\tawait weatherYrStore.load();\n\t\t}\n\t\treturn await Promise.all(yrPromises);\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax } = this.state;\n\t\tconst { weatherYrStore, weatherAiStore, windmillStore } = this.props.stores;\n\t\tconst { windparks, currentWindparkName } = windmillStore;\n\t\tconst windspeeds = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tconst { forcasts: weatherAiData } = weatherAiStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-4'>\n\t\t\t\t\t\t<h1><i class='fas fa-cloud-sun-rain' /> Weather</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-8 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t{/* <xmp>{JSON.stringify(windspeeds, null, 4)}</xmp> */}\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\t// dataLeft={[windspeeds, aiData, forcastStormData, forcastYrData]}\n\t\t\t\t\t\t\tdataLeft={[windspeeds, weatherAiData]}\n\t\t\t\t\t\t\tlegendLeft={['Wind forcast Yr', 'Wind AI prediction']}\n\t\t\t\t\t\t\tyMaxLeft={30}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\tyTicksLeft={['30 m/s', '25 m/s', '20 m/s', '15 m/s', '10 m/s', '5 m/s', '0 m/s']}\n\t\t\t\t\t\t\tunitLeft={['m/s', 'm/s']}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* <xmp>{forcasts.length}</xmp>\n\t\t\t\t<xmp>{JSON.stringify(windspeeds, null, 4)}</xmp>\n\t\t\t\t<xmp>{JSON.stringify(forcasts, null, 4)}</xmp> */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;\n"],"sourceRoot":""}