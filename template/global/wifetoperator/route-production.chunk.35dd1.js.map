{"version":3,"sources":["webpack:///./routes/production/index.js"],"names":["initialState","Production","observer","props","setWindpark","e","stores","windmillStore","setCurrentWindparkName","target","dataset","windpark","loadAll","state","xMin","xMax","now","forcastYrData","weatherYrStore","this","productionStore","priceStore","currentWindparkName","windparkCapacity","wutil","getDateDiffTime","Math","floor","Date","getTime","setState","loadYrData","loadOpenData","getWindSpeeds","generateData","prices","updateQueryFilter","name","currentWindpark","altitude","position","lat","lon","load","weatherOpenStore","componentDidMount","render","darkmode","appState","windparks","windparkMaxCapacity","windparkCapacityPercent","productionData","productionBoostData","productionLongLifeData","windspeedsOpen","class","util","format","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeftPostfix","unitLeft","avgWindowLeft","smoothLeft","dataRight","legendRight","yMaxRight","yMinRight","showYTicksRight","yTicksRightPostfix","unitRight","smoothRight","marker","style","center","zoom","waypoints","windmills","Component"],"mappings":"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","file":"route-production.chunk.35dd1.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\nimport Map from '../../components/map';\n\nconst initialState = {};\n\n@observer\nclass Production extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherYrStore, productionStore, priceStore } = this.props.stores;\n\t\tconst { currentWindparkName, windparkCapacity } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({ now, xMin, xMax });\n\n\t\tawait this.loadYrData();\n\t\tawait this.loadOpenData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tpriceStore.generateData();\n\n\t\tconst { prices } = priceStore;\n\t\tproductionStore.generateData(forcastYrData, prices, windparkCapacity);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherYrStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\taltitude: currentWindpark.position.altitude,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherYrStore.load();\n\t}\n\n\tasync loadOpenData() {\n\t\tconst { weatherOpenStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherOpenStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherOpenStore.load();\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax } = this.state;\n\t\tconst { appState, windmillStore, productionStore, weatherYrStore, weatherOpenStore } = this.props.stores;\n        const { darkmode } = appState;\n\t\tconst { windparks, currentWindparkName, currentWindpark, windparkCapacity, windparkMaxCapacity } = windmillStore;\n\t\tconst windparkCapacityPercent = windparkCapacity / windparkMaxCapacity * 100\n\t\tconst { productionData, productionBoostData, productionLongLifeData } = productionStore;\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tconst windspeedsOpen = weatherOpenStore.getWindSpeeds(currentWindparkName);\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-5'>\n\t\t\t\t\t\t<h1><i class='fas fa-chart-bar' /> Production - {currentWindparkName}</h1>\n\t\t\t\t\t\t<span class='text-muted'>Running at</span> {util.format(windparkCapacityPercent, 1)}%\n\t\t\t\t\t\t<span class='text-muted'>, {windparkCapacity}/{windparkMaxCapacity} Mw</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-7 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={400}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\tdataLeft={[productionData, productionBoostData, productionLongLifeData]}\n\t\t\t\t\t\t\tlegendLeft={['Normal production', 'Boost 10%', 'Long life -5%']}\n\t\t\t\t\t\t\tyMaxLeft={windparkCapacity}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\t// yTicks={['500Mw', '400Mw', '300Mw', '200Mw', '100Mw', '0Mw']}\n\t\t\t\t\t\t\tyTicksLeftPostfix={'Mw'}\n\t\t\t\t\t\t\tunitLeft={['Mw', 'Mw', 'Mw']}\n\t\t\t\t\t\t\tavgWindowLeft={[2, 2, 2]}\n\t\t\t\t\t\t\tsmoothLeft={[1, 1, 1]}\n\n\t\t\t\t\t\t\tdataRight={[forcastYrData, windspeedsOpen]}\n\t\t\t\t\t\t\tlegendRight={['Wind forcast Yr', 'Wind OpenWeather']}\n\t\t\t\t\t\t\tyMaxRight={30}\n\t\t\t\t\t\t\tyMinRight={0}\n\t\t\t\t\t\t\tshowYTicksRight={1}\n\t\t\t\t\t\t\tyTicksRightPostfix='m/s'\n\t\t\t\t\t\t\tunitRight={['m/s', 'm/s']}\n\t\t\t\t\t\t\tsmoothRight={[1, 1]}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class='row pt-4'>\n\t\t\t\t\t<div class='col-12' style='height: 50vh;'>\n\t\t\t\t\t\t<Map stores={this.props.stores}\n\t\t\t\t\t\t\tdarkmode={darkmode}\n\t\t\t\t\t\t\tcenter={[currentWindpark.position.lat, currentWindpark.position.lon]}\n\t\t\t\t\t\t\tzoom={currentWindpark.zoom}\n\t\t\t\t\t\t\twaypoints={currentWindpark.windmills}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Production;\n"],"sourceRoot":""}