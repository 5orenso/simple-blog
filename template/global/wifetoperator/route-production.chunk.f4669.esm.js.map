{"version":3,"sources":["webpack:///./routes/production/index.js"],"names":["initialState","Production","observer","Component","constructor","props","super","setWindpark","e","windmillStore","this","stores","setCurrentWindparkName","target","dataset","windpark","loadAll","state","weatherYrStore","productionStore","priceStore","currentWindparkName","windparkCapacity","xMin","wutil","getDateDiffTime","xMax","now","Math","floor","Date","getTime","markerDays","timeRangeDays","setState","loadYrData","loadOpenData","forcastYrData","getWindSpeeds","generateData","prices","currentWindpark","updateQueryFilter","name","altitude","position","lat","lon","load","weatherOpenStore","componentDidMount","render","appState","darkmode","windparks","windparkMaxCapacity","windparkCapacityPercent","productionData","productionBoostDataFiltered","productionBoostData","productionLongLifeDataFiltered","productionLongLifeData","windspeedsOpen","class","style","util","format","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeftPostfix","unitLeft","avgWindowLeft","smoothLeft","dataRight","legendRight","yMaxRight","yMinRight","showYTicksRight","yTicksRightPostfix","unitRight","smoothRight","marker","markers","center","zoom","waypoints","windmills"],"mappings":"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","file":"route-production.chunk.f4669.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\nimport Map from '../../components/map';\n\nconst initialState = {};\n\n@observer\nclass Production extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherYrStore, productionStore, priceStore } = this.props.stores;\n\t\tconst { currentWindparkName, windparkCapacity } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tconst markerDays = wutil.timeRangeDays(-4, 11);\n\t\tthis.setState({ now, xMin, xMax, markerDays });\n\n\t\tawait this.loadYrData();\n\t\tawait this.loadOpenData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tpriceStore.generateData();\n\n\t\tconst { prices } = priceStore;\n\t\tproductionStore.generateData(forcastYrData, prices, windparkCapacity);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherYrStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\taltitude: currentWindpark.position.altitude,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherYrStore.load();\n\t}\n\n\tasync loadOpenData() {\n\t\tconst { weatherOpenStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherOpenStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherOpenStore.load();\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax, markerDays } = this.state;\n\t\tconst { appState, windmillStore, productionStore, weatherYrStore, weatherOpenStore } = this.props.stores;\n        const { darkmode } = appState;\n\t\tconst { windparks, currentWindparkName, currentWindpark, windparkCapacity, windparkMaxCapacity } = windmillStore;\n\t\tconst windparkCapacityPercent = windparkCapacity / windparkMaxCapacity * 100\n\t\tconst { productionData, productionBoostDataFiltered: productionBoostData, productionLongLifeDataFiltered: productionLongLifeData } = productionStore;\n\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tconst windspeedsOpen = weatherOpenStore.getWindSpeeds(currentWindparkName);\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2' style='margin-bottom: 200px;'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-5'>\n\t\t\t\t\t\t<h1><i class='fas fa-chart-bar' /> Production - {currentWindparkName}</h1>\n\t\t\t\t\t\t<span class='text-muted'>Capacity at</span> {util.format(windparkCapacityPercent, 1)}%\n\t\t\t\t\t\t<span class='text-muted'>, {windparkCapacity}/{windparkMaxCapacity} Mw</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-7 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={400}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\tdataLeft={[productionData, productionBoostData, productionLongLifeData]}\n\t\t\t\t\t\t\tlegendLeft={['Normal production', 'Boost 10%', 'Long life -5%']}\n\t\t\t\t\t\t\tyMaxLeft={windparkCapacity}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\t// yTicks={['500Mw', '400Mw', '300Mw', '200Mw', '100Mw', '0Mw']}\n\t\t\t\t\t\t\tyTicksLeftPostfix={'Mw'}\n\t\t\t\t\t\t\tunitLeft={['Mw', 'Mw', 'Mw']}\n\t\t\t\t\t\t\tavgWindowLeft={[2, 2, 2]}\n\t\t\t\t\t\t\tsmoothLeft={[1, 1, 1]}\n\n\t\t\t\t\t\t\tdataRight={[forcastYrData, windspeedsOpen]}\n\t\t\t\t\t\t\tlegendRight={['Wind forcast Yr', 'Wind OpenWeather']}\n\t\t\t\t\t\t\tyMaxRight={30}\n\t\t\t\t\t\t\tyMinRight={0}\n\t\t\t\t\t\t\tshowYTicksRight={1}\n\t\t\t\t\t\t\tyTicksRightPostfix='m/s'\n\t\t\t\t\t\t\tunitRight={['m/s', 'm/s']}\n\t\t\t\t\t\t\tsmoothRight={[1, 1]}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t\tmarkers={markerDays}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class='row pt-4'>\n\t\t\t\t\t<div class='col-12' style='height: 50vh;'>\n\t\t\t\t\t\t<Map stores={this.props.stores}\n\t\t\t\t\t\t\tdarkmode={darkmode}\n\t\t\t\t\t\t\tcenter={[currentWindpark.position.lat, currentWindpark.position.lon]}\n\t\t\t\t\t\t\tzoom={currentWindpark.zoom}\n\t\t\t\t\t\t\twaypoints={currentWindpark.windmills}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Production;\n"],"sourceRoot":""}