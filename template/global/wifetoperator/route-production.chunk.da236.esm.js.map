{"version":3,"sources":["webpack:///./routes/production/index.js"],"names":["initialState","Production","observer","Component","constructor","props","super","setWindpark","e","windmillStore","this","stores","setCurrentWindparkName","target","dataset","windpark","loadAll","state","weatherYrStore","productionStore","priceStore","currentWindparkName","xMin","wutil","getDateDiffTime","xMax","now","Math","floor","Date","getTime","setState","loadYrData","forcastYrData","getWindSpeeds","generateData","prices","currentWindpark","updateQueryFilter","name","altitude","position","lat","lon","load","componentDidMount","render","appState","darkmode","windparks","productionData","productionBoostData","productionLongLifeData","class","map","wp","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","util","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicks","unitLeft","avgWindowLeft","dataRight","legendRight","yMaxRight","yMinRight","showYTicksRight","yTicksPostfixRight","unitRight","marker","style","center","zoom","waypoints","windmills"],"mappings":"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","file":"route-production.chunk.da236.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\nimport Map from '../../components/map';\n\nconst initialState = {};\n\n@observer\nclass Production extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { windmillStore, weatherYrStore, productionStore, priceStore } = this.props.stores;\n\t\tconst { currentWindparkName } = windmillStore;\n\n\t\tconst xMin = wutil.getDateDiffTime(-4);\n\t\tconst xMax = wutil.getDateDiffTime(10);\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({ now, xMin, xMax });\n\n\t\tawait this.loadYrData();\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\t\tpriceStore.generateData();\n\n\t\tconst { prices } = priceStore;\n\t\tproductionStore.generateData(forcastYrData, prices);\n\t}\n\n\tasync loadYrData() {\n\t\tconst { weatherYrStore, windmillStore } = this.props.stores;\n\t\tconst { currentWindpark } = windmillStore;\n\n\t\tweatherYrStore.updateQueryFilter({\n\t\t\tname: currentWindpark.name,\n\t\t\taltitude: currentWindpark.position.altitude,\n\t\t\tlat: currentWindpark.position.lat,\n\t\t\tlon: currentWindpark.position.lon,\n\t\t});\n\t\treturn await weatherYrStore.load();\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, xMin, xMax } = this.state;\n\t\tconst { appState, windmillStore, productionStore, weatherYrStore } = this.props.stores;\n        const { darkmode } = appState;\n\t\tconst { windparks, currentWindparkName, currentWindpark } = windmillStore;\n\t\tconst { productionData, productionBoostData, productionLongLifeData } = productionStore;\n\t\tconst forcastYrData = weatherYrStore.getWindSpeeds(currentWindparkName);\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-4'>\n\t\t\t\t\t\t<h1><i class='fas fa-chart-bar' /> Production</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-8 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph\n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={400}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\txMin={xMin}\n\t\t\t\t\t\t\txMax={xMax}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\tdataLeft={[productionData, productionBoostData, productionLongLifeData]}\n\t\t\t\t\t\t\tlegendLeft={['Normal production', 'Boost 10%', 'Long life -5%']}\n\t\t\t\t\t\t\tyMaxLeft={500}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\tyTicks={['500Mw', '400Mw', '300Mw', '200Mw', '100Mw', '0Mw']}\n\t\t\t\t\t\t\tunitLeft={['Mw', 'Mw', 'Mw']}\n\t\t\t\t\t\t\tavgWindowLeft={[8, 8, 8]}\n\n\t\t\t\t\t\t\tdataRight={[forcastYrData]}\n\t\t\t\t\t\t\tlegendRight={['Wind forcast Yr']}\n\t\t\t\t\t\t\tyMaxRight={30}\n\t\t\t\t\t\t\tyMinRight={0}\n\t\t\t\t\t\t\tshowYTicksRight={1}\n\t\t\t\t\t\t\tyTicksPostfixRight='m/s'\n\t\t\t\t\t\t\tunitRight={['m/s', 'm/s']}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class='row pt-4'>\n\t\t\t\t\t<div class='col-12' style='height: 50vh;'>\n\t\t\t\t\t\t<Map stores={this.props.stores}\n\t\t\t\t\t\t\tdarkmode={darkmode}\n\t\t\t\t\t\t\tcenter={[currentWindpark.position.lat, currentWindpark.position.lon]}\n\t\t\t\t\t\t\tzoom={currentWindpark.zoom}\n\t\t\t\t\t\t\twaypoints={currentWindpark.windmills}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Production;\n"],"sourceRoot":""}