{"version":3,"sources":["webpack:///./routes/prices/index.js"],"names":["initialState","Prices","observer","Component","constructor","props","super","setWindpark","e","windmillStore","this","stores","setCurrentWindparkName","target","dataset","windpark","loadAll","state","priceStore","generateData","now","Math","floor","Date","getTime","markerDays","wutil","timeRangeDays","setState","componentDidMount","render","prices","priceData","pricesAiFiltered","aiData","windparks","currentWindparkName","class","style","map","wp","name","onClick","data-windpark","width","height","showXTicks","xTicksVal","val","util","isoDate","paddingTop","dataLeft","legendLeft","yMaxLeft","yMinLeft","showYTicksLeft","yTicksLeft","unitLeft","avgWindowLeft","smoothLeft","marker","markers"],"mappings":"2fAOA,MAAMA,EAAe,G,IAGfC,EADLC,Y,EAAD,cACqBC,YACjBC,YAAYC,GACRC,MAAMD,GADS,KAgBtBE,YAAeC,IACd,MAAM,cAAEC,GAAkBC,KAAKL,MAAMM,OAErCF,EAAcG,uBADGJ,EAAEK,OAAOC,QAAQC,UAElCL,KAAKM,WAlBCN,KAAKO,M,+VAAL,IACOjB,GAId,gBACC,MAAM,WAAEkB,GAAeR,KAAKL,MAAMM,OAClCO,EAAWC,eAEX,MAAMC,EAAMC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KACxCC,EAAaC,IAAMC,eAAe,EAAG,IAC3CjB,KAAKkB,SAAS,CAAER,MAAKK,eAUtBI,oBACCnB,KAAKM,UAGNc,SACC,MAAM,IAAEV,EAAF,WAAOK,GAAef,KAAKO,OAC3B,cAAER,EAAF,WAAiBS,GAAeR,KAAKL,MAAMM,QACzCoB,OAAQC,EAAWC,iBAAkBC,GAAWhB,GAClD,UAAEiB,EAAF,oBAAaC,GAAwB3B,EAE3C,OACC,mBAAK4B,MAAM,4BAA4BC,MAAM,yBAC5C,mBAAKD,MAAM,OACV,mBAAKA,MAAM,SACV,sBAAI,iBAAGA,MAAM,sBAAb,YAED,mBAAKA,MAAM,cACV,kBAAIA,MAAM,6BACTF,GAAaA,EAAUI,IAAIC,GAC3B,kBAAIH,MAAM,YACT,sBACCA,MAAQ,0BAAwBG,EAAGC,OAASL,EAAsB,SAAW,IAC7EM,QAAShC,KAAKH,YACdoC,gBAAeH,EAAGC,MACjBD,EAAGC,UAKR,mBAAKJ,MAAM,UACV,YAAC,IAAD,CACC1B,OAAQD,KAAKL,MAAMM,OACnBiC,MAAO,KACPC,OAAQ,IACRC,WAAY,EACZC,UAAWC,GAAOC,IAAKC,QAAQF,GAC/BG,WAAY,GAEZC,SAAU,CAACpB,EAAWE,GACtBmB,WAAY,CAAC,SAAU,iBACvBC,SAAU,IACVC,SAAU,EACVC,eAAgB,EAChBC,WAAY,CAAC,QAAS,UAAW,QAAS,UAAW,SACrDC,SAAU,CAAC,MAAO,OAClBC,cAAe,CAAC,EAAG,GACnBC,WAAY,CAAC,EAAG,GAEhBC,OAAQzC,EACR0C,QAASrC,W,EASDxB","file":"route-prices.chunk.a1487.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\n\nimport wutil from '../../lib/wifet-util';\nimport LineGraph from '../../components/lineGraph';\n\nconst initialState = {};\n\n@observer\nclass Prices extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tasync loadAll() {\n\t\tconst { priceStore } = this.props.stores;\n\t\tpriceStore.generateData();\n\n\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\tconst markerDays = wutil.timeRangeDays(-4, 11);\n\t\tthis.setState({ now, markerDays });\n\t}\n\n\tsetWindpark = (e) => {\n\t\tconst { windmillStore } = this.props.stores;\n\t\tconst windpark = e.target.dataset.windpark;\n\t\twindmillStore.setCurrentWindparkName(windpark);\n\t\tthis.loadAll();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n\trender() {\n\t\tconst { now, markerDays } = this.state;\n\t\tconst { windmillStore, priceStore } = this.props.stores;\n\t\tconst { prices: priceData, pricesAiFiltered: aiData } = priceStore;\n\t\tconst { windparks, currentWindparkName } = windmillStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid mt-5 pt-2' style='margin-bottom: 200px;'>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-4'>\n\t\t\t\t\t\t<h1><i class='fas fa-chart-line' /> Prices</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-8 pt-2'>\n\t\t\t\t\t\t<ul class='nav nav-pills float-right'>\n\t\t\t\t\t\t{windparks && windparks.map(wp => (\n\t\t\t\t\t\t\t<li class='nav-item'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-link nav-link ${wp.name === currentWindparkName ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\tonClick={this.setWindpark}\n\t\t\t\t\t\t\t\t\tdata-windpark={wp.name}\n\t\t\t\t\t\t\t\t>{wp.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12'>\n\t\t\t\t\t\t<LineGraph \n\t\t\t\t\t\t\tstores={this.props.stores}\n\t\t\t\t\t\t\twidth={1200}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tshowXTicks={1}\n\t\t\t\t\t\t\txTicksVal={val => util.isoDate(val)}\n\t\t\t\t\t\t\tpaddingTop={30}\n\n\t\t\t\t\t\t\tdataLeft={[priceData, aiData]}\n\t\t\t\t\t\t\tlegendLeft={['Prices', 'AI prediction']}\n\t\t\t\t\t\t\tyMaxLeft={200}\n\t\t\t\t\t\t\tyMinLeft={0}\n\t\t\t\t\t\t\tshowYTicksLeft={1}\n\t\t\t\t\t\t\tyTicksLeft={['2 NOK', '1.5 NOK', '1 NOK', '0.5 NOK', '0 NOK']}\n\t\t\t\t\t\t\tunitLeft={['øre', 'øre']}\n\t\t\t\t\t\t\tavgWindowLeft={[2, 2]}\n\t\t\t\t\t\t\tsmoothLeft={[1, 1]}\n\n\t\t\t\t\t\t\tmarker={now}\n\t\t\t\t\t\t\tmarkers={markerDays}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Prices;\n"],"sourceRoot":""}