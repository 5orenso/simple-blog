{"version":3,"sources":["webpack:///./routes/tv/top10ticker.js","webpack:///./routes/tv/style.css"],"names":["byBib","a","b","aHas","musher","bib","MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","initialState","OneTeam","observer","Component","constructor","props","super","loadLiveRaceResults","async","teamIds","focusOnMushers","raceStore","stores","race","getRaceTrackerData","raceTrackerRace","getRaceTrackerActiveTeams","loadRaceResults","raceid","loadWorkoutSummary","getWorkoutSummaryActiveTeams","loadRace","setState","isLoading","appState","classid","load","selectedClassIds","selectedClassId","toggleSelectedClassId","allTeamIds","classes","filter","currentClass","id","contestants","length","map","team","flat","loadTeams","join","liveRace","getAllClassesSortedBy","getClassById","raceTrackerResults","getRacetrackerResults","clearTimeout","updateTimer","reload","setTimeout","reloadLastEpoch","Math","floor","Date","getTime","RELOAD_INTERVAL_IN_SEC","scrollList","this","scrollTimer","scrollPosition","state","newScrollPosition","CONTAINER_WIDTH","contestantContainer","scrollWidth","clientWidth","scrollTo","top","left","behavior","SCROLL_INTERVAL_IN_SEC","toggleFocusOnMusher","e","musherId","target","parentElement","dataset","musherid","componentWillUnmount","tick","componentDidMount","componentWillReceiveProps","nextProps","render","userStore","position","limit","user","teams","language","lastAllowedChangeDate","endDate","setHours","getHours","find","data","slice","line","lineData","raceTrackerMapLine","parseInt","Bib","contestant","sort","class","style","hoverElement","hoverelementonly","distance","data-id","href","title","onScroll","scrollImages","ref","c","idx","currentTeam","currentResults","onTouchstart","stopPropagation","onTouchend","onTouchmove","getRankingColor","flag","firstname","lastname","module","exports"],"mappings":"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","file":"94.chunk.33d13.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport linkstate from 'linkstate';\nimport { route } from 'preact-router';\n\nimport mu from '../../lib/musher-util';\n\nimport style from './style.css';\n\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nconst initialState = {};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\nconst SCROLL_INTERVAL_IN_SEC = 5;\nconst CONTAINER_WIDTH = 450;\nconst CONTAINER_MAX_WIDTH = 1486;\n\nfunction byBib(a, b) {\n    const aHas = typeof a.musher !== 'undefined';\n    const bHas = typeof b.musher !== 'undefined';\n    return (bHas - aHas) || (aHas === true && a.musher.bib - b.musher.bib) || 0;\n}\n\n@observer\nclass OneTeam extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n            scrollPosition: 0,\n        };\n        this.updateTimer = {};\n        this.scrollTimer = null;\n        this.contestantContainer = null;\n    }\n\n    loadLiveRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { race } = raceStore;\n        await raceStore.getRaceTrackerData(race.raceTrackerRace);\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        this.setState({ isLoading: true });\n        const { raceStore, appState } = props.stores;\n        const { raceid, classid } = props;\n        await raceStore.load(raceid);\n        const { race } = raceStore;\n        const { focusOnMushers } = appState;\n\n        const { selectedClassIds = [] } = appState;\n        const selectedClassId = classid || selectedClassIds[0];\n\n        if (classid) {\n            appState.toggleSelectedClassId(classid, true);\n        }\n\n        const allTeamIds = race.classes\n            .filter(currentClass => currentClass.id === selectedClassId)\n            .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n            .map((currentClass) => {\n                return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n            })\n            .flat();\n        if (allTeamIds.length > 0) {\n            await raceStore.loadTeams(allTeamIds.join(','));\n        }\n        if (race.liveRace > 0) {\n            await this.loadLiveRaceResults(this.props, allTeamIds, focusOnMushers);\n\n        } else {\n            await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n        }\n\n        // const allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n        //     return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n        // }).flat();\n\n        // if (allTeamIds.length > 0) {\n        //     await raceStore.loadTeams(allTeamIds.join(','));\n        //     if (race.liveRace > 0) {\n        //         await this.loadLiveRaceResults(props, allTeamIds, focusOnMushers);\n\n        //     } else {\n        //         await this.loadRaceResults(props, allTeamIds, focusOnMushers);\n        //     }\n        // }\n        raceStore.getAllClassesSortedBy();\n\n        const currentClass = raceStore.getClassById(selectedClassId);\n        if (currentClass && currentClass.raceTrackerResults) {\n            raceStore.getRacetrackerResults(currentClass.raceTrackerResults);\n        }\n\n        // Set reload timer\n        clearTimeout(this.updateTimer.reload);\n        this.updateTimer.reload = setTimeout(async () => {\n            const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n            this.setState({ reloadLastEpoch });\n            this.loadRace(props);\n        }, RELOAD_INTERVAL_IN_SEC * 1000);\n\n        this.scrollList();\n        this.setState({ isLoading: false });\n    }\n\n    scrollList = () => {\n        this.scrollTimer = setTimeout(async () => {\n            const { scrollPosition } = this.state;\n            const maxScrollLeft = this.contestantContainer.scrollWidth - this.contestantContainer.clientWidth;\n            // const containerMaxWidth = this.contestantContainer.offsetWidth;\n            let newScrollPosition = scrollPosition + CONTAINER_WIDTH * 3;\n            if (newScrollPosition > maxScrollLeft + CONTAINER_WIDTH * 3) {\n                newScrollPosition = 0;\n            } else {\n                this.contestantContainer.scrollTo({\n                    top: 0,\n                    left: newScrollPosition,\n                    behavior: 'smooth'\n                });\n                this.scrollList();\n            }\n            this.setState({\n                scrollPosition: newScrollPosition,\n            });\n        }, SCROLL_INTERVAL_IN_SEC * 1000);\n    }\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n    render() {\n\t\tconst { contentIsNotLoaded, lockMessage, scrollPosition } = this.state;\n\t\tconst { userStore, raceStore, appState } = this.props.stores;\n        const { classid, position = 'right', limit = 10 } = this.props;\n\t\tconst { user = {}, teams = [], isAdmin } = userStore;\n        const { language = 'en' } = user;\n\n        const { darkmode, displayDetails, editUserDetails, selectedClassIds = [], focusOnMushers = [] } = appState;\n\n\t\tconst { race = {}, teamList, classes = [] } = raceStore;\n\t\tconst { activeTeams, waypoints, zoomToMarkers, raceTrackerResults } = raceStore;\n\n\t\tconst lastAllowedChangeDate = new Date(race.endDate);\n\t\tlastAllowedChangeDate.setHours(lastAllowedChangeDate.getHours() + 2);\n\n        const currentClass = race.classes ? race.classes.find(e => e.id === classid) || {} : {};\n\n        let contestants = [];\n        if (raceTrackerResults && raceTrackerResults.data) {\n            contestants = raceTrackerResults.data.slice(0, limit).map((line) => {\n                const lineData = raceStore.raceTrackerMapLine(line);\n                const bib = parseInt(lineData.Bib, 10);\n                let contestant = {};\n                if (classes && classes[currentClass.id].contestants) {\n                    contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n                }\n                return contestant;\n            });\n        } else if (classes[currentClass.id] && classes[currentClass.id].contestants) {\n            contestants = classes[currentClass.id].contestants.sort(byBib).slice(0, limit).map(contestant => contestant);\n        }\n\n        return (<>\n            <div class={`fixed-top ${style.hoverElement}`} style='height: 100px;'>\n                <div class={`${style.hoverelementonly}`}>\n                    <div class={`row`}>\n                        {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                            <div class='col'>\n                                <a\n                                    class={`btn btn-block ${currentClass.id === classid ? 'btn-success' : 'btn-outline-success'} text-nowrap`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10ticker/${race.id}/${currentClass.id}`}\n                                >\n                                    {currentClass.title}\n                                </a>\n                            </div>\n                        </>)}\n                    </div>\n                </div>\n            </div>\n\t\t\t<div class='container-fluid position-relative' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP}; height: calc(100% - ${MARGIN_BOTTOM} - ${MARGIN_TOP});`}>\n                <div\n                    class='d-flex position-absolute'\n                    style='\n                        bottom: -185px;\n                        left: 150px;\n                        background-image: url(\"https://themusher.app/assets/tv-ticker.png\");\n                        background-position: 0 100%;\n                        background-repeat: no-repeat;\n                        width: 1780px;\n                        height: 115px;\n                    '\n                >\n                    <div\n                        class='text-white text-left position-absolute'\n                        style='\n                            font-size: 2.3em;\n                            font-weight: normal;\n                            bottom: 50px;\n                            left: 110px;\n                            width: 550px;\n                    '>\n                        <span class='font-weight-light'>Topp 10</span> - GPS Ranking\n                    </div>\n                    <div\n                        class='text-dark text-left position-absolute'\n                        style={`\n                            font-size: 2.0em;\n                            font-weight: normal;\n                            bottom: 4px;\n                            left: 99px;\n                            width: ${CONTAINER_MAX_WIDTH}px;\n                    `}>\n                        <div class='w-100'>\n                            <div\n                                class='d-flex flex-row flex-nowrap'\n                                style='overflow: auto; scroll-snap-type: x mandatory;'\n                                onScroll={this.scrollImages}\n                                ref={c => this.contestantContainer = c}\n                            >\n                                {contestants && contestants.map((contestant, idx) => {\n                                    const { musher = {}, currentTeam = {}, currentStages, currentResults = {}, completed, duration,\n                                        normalizedDuration, weightedNormalizedDuration, totalKcalRelated, weightedTotalKcal,\n                                        flatTotalKcal, percentHarder, loadIndex, raceDistance, isDone, normalizedKcal, normalizedFlatKcal,\n                                        finishedDate, totalWorkoutTimeUsedSec,\n                                    } = contestant;\n\n                                    return <>\n                                        <div class='clearfix position-relative p-0 mx-0'>\n                                            <div\n                                                class={`h-100 d-flex flex-nowrap justify-content-start align-items-center`}\n                                                style={`\n                                                    flex-wrap: wrap;\n                                                    overflow-y: hidden;\n                                                    width: ${CONTAINER_WIDTH}px;\n                                                `}\n                                                onTouchstart={(e) => { e.stopPropagation(); }}\n                                                onTouchend={(e) => { e.stopPropagation(); }}\n                                                onTouchmove={(e) => { e.stopPropagation(); }}\n                                            >\n                                                <div\n                                                    class='pl-3 pr-2 clearfix text-white rounded-pill-right'\n                                                    style={`width: 100px; background-color: ${mu.getRankingColor(idx + 1)}`}\n                                                >\n                                                    {musher.bib || idx + 1}\n                                                </div>\n                                                <div class='pl-1 pr-3'>\n                                                    <nobr>\n                                                        {musher.flag} {musher.firstname} {musher.lastname}<br />\n                                                        {/* <small class='text-muted'>{musher.sportsClub}</small><br /> */}\n                                                    </nobr>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </>;\n                                })}\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default OneTeam;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__3_DrK\",\"hoverElement\":\"hoverElement__3ED7Q\",\"hoverelementhide\":\"hoverelementhide__2AP13\"};"],"sourceRoot":""}