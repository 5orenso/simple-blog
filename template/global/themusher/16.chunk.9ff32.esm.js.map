{"version":3,"sources":["webpack:///./components/data/distance.js","webpack:///./components/data/temperature.js","webpack:///./components/data/weight.js","webpack:///./components/races/liveResults.js","webpack:///./routes/tv/style.css","webpack:///./components/data/elevation.js","webpack:///./routes/tv/top10progress.js","webpack:///./components/data/speed.js"],"names":["displayDistance","distance","util","format","Distance","observer","Component","render","value","smallUnit","this","props","userStore","stores","user","settings","imperial","kmToMiles","class","Temperature","celciusToFahrenheit","Weight","kgToPounds","Checkpoints","checkpoints","thClass","thStyle","selectedCheckpointId","width","widthCp","onClickCheckpoint","dotColor","map","cp","cpIdx","style","id","onClick","data-id","sortOrder","Contestants","currentClass","contestants","limit","onClickMusher","tdClass","tdStyle","progressStyle","progressbarStyle","results","finalContestants","slice","raceStore","sortedContestants","reqTotalRestInSec","requiredRestMinutes","now","Math","floor","Date","getTime","co","coIdx","hasLeftCpPrev","bibIdxOutPrev","estTimeToCpMinutesPrev","hasScratchedPrev","totalInCpTime","selectedMusher","find","e","bib","parseInt","data-bib","startTime","isoTime","idx","checkpointResults","filter","checkpoint","sort","fields","a","b","o","dir","substring","reduce","p","n","res","hasLeftCp","direction","hasArrivedCp","hasScratched","bibIdxIn","findIndex","bibIdxOut","percentInCp","timeInCp","isStartLine","timestamp","mu","deltaSec","timeEqualization","restInCpSoFar","nowEpoch","prevCpOutEpoch","timeUsedOnStage","percentDone","estTimeToCpMinutes","line","role","aria-valuenow","aria-valuemin","aria-valuemax","data-prevtimestamp","data-timeUsedOnStage","data-estTimeToCpMinutesPrev","data-nowEpoch","data-prevCpOutEpoch","cpId","length","output","colspan","getRankingColor","flag","lastname","RaceLiveResults","componentWillReceiveProps","nextProps","reloadLastEpoch","sortOrderResults","startDate","sortContestantsByResult","componentDidMount","tableClass","module","exports","Elevation","meterToFeet","MARGIN_TOP","marginTop","MARGIN_BOTTOM","marginTopBack","marginBottom","initialState","subMenuMarginTop","TvTop10Progress","constructor","super","loadLiveRaceResults","async","teamIds","focusOnMushers","bibs","classid","race","historyPointIndex","replayHistory","timerRunning","state","showDrawerReplay","classInfo","getClassById","isAdmin","getRaceTrackerData","raceTrackerRace","history","endDate","getRaceTrackerActiveTeams","clearTimeout","updateTimer","reload","setTimeout","console","log","setState","RELOAD_INTERVAL_IN_SEC","loadRaceResults","raceid","loadWorkoutSummary","getWorkoutSummaryActiveTeams","loadRace","isLoading","appState","load","selectedClassIds","selectedClassId","toggleSelectedClassId","allTeamIds","classes","musher","team","flat","loadTeams","join","liveRace","getAllClassesSortedBy","err","toggleFocusOnMusher","musherId","target","parentElement","dataset","musherid","toggleBib","getMusherByBibId","checkForEnter","key","toggleShowDrawerReplay","back","goBack","componentWillUnmount","tick","teams","position","selectedClass","hoverElement","hoverelementonly","href","title","toggleDrawerMusher","toggleDrawerCheckpoint","src","height","Speed","kmtToMph"],"mappings":"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","file":"16.chunk.9ff32.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction displayDistance(distance) {\n\tif (distance < 5) {\n\t\treturn util.format(distance, 2);\n\t}\n\tif (distance < 10) {\n\t\treturn util.format(distance, 1);\n\t}\n\treturn util.format(distance, 1);\n}\n\nfunction kmToMiles(value) {\n    return 0.621371 * value;\n}\n\n@observer\nclass Distance extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n\t\t\t\t\t{displayDistance(kmToMiles(value))} {smallUnit ? <><small><small><small class='ml-0 text-muted'>mi</small></small></small></> : <>mi</>}\n\t\t\t\t</nobr>\n            </>);\n        }\n\n\t\treturn (<>\n\t\t\t<nobr>\n\t            {displayDistance(value)} {smallUnit ? <><small><small><small class='ml-0 text-muted'>km</small></small></small></> : <>km</>}\n\t\t\t</nobr>\n\t    </>);\n    }\n}\n\nexport default Distance;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction celciusToFahrenheit(value) {\n    return ((value * 9/5) + 32);\n}\n\n@observer\nclass Temperature extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(celciusToFahrenheit(value), 0)}°F\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 1)}°C\n            </nobr>\n        </>);\n    }\n}\n\nexport default Temperature;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction kgToPounds(value) {\n    return 2.20462 * value;\n}\n\n@observer\nclass Weight extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(kgToPounds(value), 0)} lb\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 0)} kg\n            </nobr>\n        </>);\n    }\n}\n\nexport default Weight;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport Markdown from 'preact-markdown';\n\nimport mu from '../../lib/musher-util';\n\nconst initialState = {\n\tisLoading: false,\n};\n\nconst fieldSorter = (fields) => (a, b) => fields.map(o => {\n    let dir = 1;\n    if (o[0] === '-') { dir = -1; o=o.substring(1); }\n    return a[o] > b[o] ? dir : a[o] < b[o] ? -(dir) : 0;\n}).reduce((p, n) => p ? p : n, 0);\n\n@observer\nclass Checkpoints extends Component {\n    render() {\n        const { checkpoints, thClass, thStyle, selectedCheckpointId, width, widthCp, onClickCheckpoint = () => {}, dotColor } = this.props;\n        return (<>\n            {checkpoints && checkpoints.map((cp, cpIdx) => <>\n                {cpIdx > 0 && <th class={thClass} style={thStyle}>\n                    <div class='' style={`width: ${width}px;`}>\n                        &nbsp;\n                    </div>\n                </th>}\n                <th class={thClass} style={thStyle}>\n                    <div\n                        class={`checkpoint position-relative ${selectedCheckpointId === cp.id ? 'text-primary' : ''}`}\n                        style={`width: ${widthCp}px; font-size: 1.1em;`}\n                        onClick={onClickCheckpoint}\n                        data-id={cp.id}\n                    >\n                        <i class='fas fa-campground' />\n\n                        <div\n                            class={`rounded-pill-both px-1 text-center position-absolute ${dotColor ? '' : 'bg-secondary'} font-weight-bold`}\n                            style={`bottom: 0px; right: -20px; font-size: 0.6em; ${dotColor ? `background-color: ${dotColor};` : ''}`}\n                        >\n                            {cp.sortOrder && cp.sortOrder !== 'n/a' && <>{cp.sortOrder}</>}\n                        </div>\n\n                    </div>\n                </th>\n            </>)}\n        </>);\n    }\n}\n\n// @observer\n// class ContestantLineCheckpoint extends Component {\n//     render() {\n\n//         return (<>\n\n//         </>);\n//     }\n// }\n\n@observer\nclass Contestants extends Component {\n    render() {\n        const {\n            currentClass,\n            contestants,\n            limit,\n            onClickMusher,\n            tdClass,\n            tdStyle,\n            progressStyle,\n            progressbarStyle,\n        } = this.props;\n\n        const { checkpoints = [], results = [] } = currentClass;\n        const finalContestants = contestants && limit ? contestants.slice(0, limit) : contestants;\n\n        const { raceStore } = this.props.stores;\n        const { sortedContestants = [] } = raceStore;\n\n        const reqTotalRestInSec = currentClass.requiredRestMinutes * 60;\n        const now = Math.floor(new Date().getTime() / 1000, 10);\n\n        return (<>\n            {finalContestants && finalContestants.map((co, coIdx) => {\n                let cpIdx = 0;\n                let hasLeftCpPrev;\n                let bibIdxOutPrev;\n                let estTimeToCpMinutesPrev;\n                let hasScratchedPrev;\n                let totalInCpTime = 0;\n\n                let selectedMusher = sortedContestants ? sortedContestants.find(e => e.bib === parseInt(co.bib, 10)) : null;\n                selectedMusher = selectedMusher ? selectedMusher : {};\n\n                return(<>\n                    <tr class='musher' onClick={onClickMusher} data-bib={co.bib}>\n                        <td class={tdClass} style={tdStyle}>\n                            {co.startTime ? util.isoTime(co.startTime) : ''}\n                        </td>\n\n                        {checkpoints && checkpoints.map((cp, idx) => {\n                            const checkpointResults = results.slice().filter(e => e.checkpoint === cp.id).sort(fieldSorter(['timestamp']));\n                            const res = checkpointResults.filter(e => parseInt(e.bib, 10) == co.bib);\n                            const hasLeftCp = res.find(e => e.direction === 'out');\n                            const hasArrivedCp = res.find(e => e.direction === 'in');\n                            const hasScratched = res.find(e => e.direction === 'scratched');\n\n                            const allResultsIn = checkpointResults.filter(e => (e.direction === 'in' || e.direction === 'scratched'));\n                            const bibIdxIn = allResultsIn.findIndex(e => parseInt(e.bib, 10) == co.bib);\n\n                            const allResultsOut = checkpointResults.filter(e => e.direction === 'out');\n                            const bibIdxOut = allResultsOut.findIndex(e => parseInt(e.bib, 10) == co.bib);\n\n                            let timeInCp = 0;\n                            let percentInCp;\n                            if (!cp.isStartLine && hasArrivedCp && hasLeftCp && hasArrivedCp.timestamp && hasLeftCp.timestamp) {\n                                timeInCp = mu.deltaSec(hasArrivedCp.timestamp, hasLeftCp.timestamp);\n                            }\n                            totalInCpTime += timeInCp ? timeInCp : 0;\n\n                            if (!hasLeftCp && hasArrivedCp && !cp.isStartLine) {\n                                if (cp.timeEqualization && reqTotalRestInSec) {\n                                    const restInCpSoFar = mu.deltaSec(hasArrivedCp.timestamp, now);\n                                    // console.log({ reqTotalRestInSec, totalInCpTime, restInCpSoFar })\n                                    percentInCp = (totalInCpTime + restInCpSoFar) / reqTotalRestInSec * 100;\n                                    percentInCp = percentInCp > 100 ? 100 : percentInCp;\n                                    // console.log({ percentInCp })\n                                }\n                            }\n\n                            if (hasScratchedPrev) {\n                                return '';\n                            }\n\n                            if (bibIdxIn === -1)  {\n                                if (hasLeftCpPrev) {\n                                    const nowEpoch = Math.floor(new Date().getTime() / 1000);\n                                    const prevCpOutEpoch = Math.floor(new Date(hasLeftCpPrev.timestamp).getTime() / 1000);\n                                    const timeUsedOnStage = Math.floor((nowEpoch - prevCpOutEpoch) / 60);\n                                    // let percentDone = timeUsedOnStage / estTimeToCpMinutesPrev * 100;\n                                    let percentDone = timeUsedOnStage / cp.estTimeToCpMinutes * 100;\n                                    percentDone = percentDone > 95 ? 95 : percentDone;\n                                    const line = (<>\n                                        <td class={`text-center align-middle px-0 pr-1 ${tdClass}`} style={tdStyle}>\n                                            <div class='progress' style={`${progressStyle}`}>\n                                                <div\n                                                    class={`progress-bar progress-bar-striped`}\n                                                    role='progressbar'\n                                                    style={`width: ${percentDone}%; ${progressbarStyle}`}\n                                                    aria-valuenow={percentDone}\n                                                    aria-valuemin='0'\n                                                    aria-valuemax='100'\n                                                    data-prevtimestamp={hasLeftCpPrev.timestamp}\n                                                    data-timeUsedOnStage={timeUsedOnStage}\n                                                    data-estTimeToCpMinutesPrev={estTimeToCpMinutesPrev}\n                                                    data-nowEpoch={nowEpoch}\n                                                    data-prevCpOutEpoch={prevCpOutEpoch}\n                                                >{bibIdxOutPrev + 1 > 0 ? bibIdxOutPrev + 1 : ''}</div>\n                                            </div>\n\n                                            {/* estTimeToCpMinutesPrev: {estTimeToCpMinutesPrev}\n                                            timeUsedOnStage: {timeUsedOnStage}\n                                            percentDone: {percentDone} */}\n                                            {co.cpId && res.length > 0 && <>\n                                                {/* <xmp>{JSON.stringify(co, null, 4)}</xmp><br /> */}\n                                                {/* <xmp>{JSON.stringify(res, null, 4)}</xmp><br /> */}\n                                                {/* <xmp>{JSON.stringify(allResults, null, 4)}</xmp><br /> */}\n                                            </>}\n                                        </td>\n                                    </>);\n                                    bibIdxOutPrev = bibIdxOut;\n                                    hasLeftCpPrev = hasLeftCp;\n                                    estTimeToCpMinutesPrev = cp.estTimeToCpMinutes;\n                                    return line;\n                                }\n                                return '';\n                            }\n                            cpIdx = idx;\n                            bibIdxOutPrev = bibIdxOut;\n                            hasLeftCpPrev = hasLeftCp;\n                            estTimeToCpMinutesPrev = cp.estTimeToCpMinutes;\n\n                            const output = (<>\n                                {(hasArrivedCp || hasScratched) && idx > 0 && <>\n                                    <td class={`text-center align-middle px-0 pr-1 ${tdClass}`} style={tdStyle}>\n                                        <div class='progress' style={`${progressStyle}`}>\n                                            <div\n                                                class={`progress-bar`}\n                                                role='progressbar'\n                                                style={`width: 100%; ${progressbarStyle}`}\n                                                aria-valuenow='100'\n                                                aria-valuemin='0'\n                                                aria-valuemax='100'\n                                            />\n                                        </div>\n                                        {co.cpId && res.length > 0 && <>\n                                            {/* <xmp>{JSON.stringify(co, null, 4)}</xmp><br /> */}\n                                            {/* <xmp>{JSON.stringify(res, null, 4)}</xmp><br /> */}\n                                            {/* <xmp>{JSON.stringify(allResults, null, 4)}</xmp><br /> */}\n                                        </>}\n                                    </td>\n                                </>}\n                                <td class={`text-center align-middle px-0 pr-1 ${tdClass}`} style={tdStyle}>\n                                    <div class='progress' style={`${progressStyle}`}>\n                                        <div\n                                            class={`progress-bar ${percentInCp > 0 ? 'progress-bar-striped' : ''} ${hasScratched ? 'bg-danger' : 'bg-success'}`}\n                                            role='progressbar'\n                                            style={`width: ${percentInCp || 100}%; ${progressbarStyle}`}\n                                            aria-valuenow={percentInCp}\n                                            aria-valuemin='0'\n                                            aria-valuemax='100'\n                                        >{hasScratched ? <i class='fas fa-times' /> : <>{bibIdxIn + 1 > 0 ? bibIdxIn + 1 : ''}</>}</div>\n                                    </div>\n                                    {co.cpId && res.length > 0 && <>\n                                        {/* <xmp>{JSON.stringify(co, null, 4)}</xmp><br /> */}\n                                        {/* <xmp>{JSON.stringify(res, null, 4)}</xmp><br /> */}\n                                        {/* <xmp>{JSON.stringify(allResults, null, 4)}</xmp><br /> */}\n                                    </>}\n                                </td>\n                            </>);\n\n                            hasScratchedPrev = hasScratched;\n                            return output;\n                        })}\n                        <td colspan={checkpoints.length * 2 - cpIdx} class={tdClass} style={tdStyle}>\n                            <div class='d-flex flex-nowrap'>\n                                <div\n                                    class='text-white font-weight-bolder pl-2 pr-1 py-0 rounded-pill-left rounded-none mr-2'\n                                    style={`background-color: ${mu.getRankingColor(coIdx + 1)}; width: 45px;`}\n                                >\n                                    {co.bib}\n                                </div>\n                                <div>\n                                    <nobr>\n                                        {co.flag} {co.lastname}\n                                    </nobr>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                </>);\n            })}\n        </>);\n    }\n}\n\n// @observer\n// class ContestantCheckpoint extends Component {\n\n//     render() {\n\n//         return (<>\n\n//         </>);\n//     }\n// }\n\n\n@observer\nclass RaceLiveResults extends Component {\n    componentWillReceiveProps(nextProps) {\n        if (this.props.currentClass.id !== nextProps.currentClass.id || this.props.reloadLastEpoch !== nextProps.reloadLastEpoch) {\n            const { currentClass } = this.props;\n            const { raceStore } = this.props.stores;\n            const { checkpoints = [], contestants = [], results = [], sortOrderResults, startDate } = currentClass;\n            raceStore.sortContestantsByResult({ contestants, results, checkpoints, sortOrderResults, startDate });\n        }\n\t}\n\n    componentDidMount() {\n        const { currentClass } = this.props;\n        const { raceStore } = this.props.stores;\n        const { checkpoints = [], contestants = [], results = [], sortOrderResults, startDate } = currentClass;\n        raceStore.sortContestantsByResult({ contestants, results, checkpoints, sortOrderResults, startDate });\n\t}\n\n    render() {\n        const widthCp = 20;\n        const width = 40;\n\t\tconst {\n            race,\n            currentClass,\n            onClickMusher = () => {},\n            onClickCheckpoint = () => {},\n            selectedCheckpointId,\n            limit = 100,\n            tableClass = 'table-striped table-sm',\n            thClass,\n            thStyle,\n            tdClass,\n            tdStyle,\n            progressStyle = 'height: 20px;',\n            progressbarStyle,\n        } = this.props;\n        const { checkpoints = [], sortOrderResults } = currentClass;\n        const { raceStore } = this.props.stores;\n        const { sortedContestants = [] } = raceStore;\n        const dotColor = '#808080';\n\n\t\treturn (<>\n            <div class='table-responsive'>\n                <table class={`table ${tableClass}`}>\n                    <thead>\n                        <tr>\n                            <th class={thClass} style={thStyle}>\n                                <div class='' style={`width: ${width}px;`}>\n                                    <i class='fas fa-flag' />\n                                </div>\n                            </th>\n\n                            <Checkpoints stores={this.props.stores}\n                                checkpoints={checkpoints}\n                                thClass={thClass}\n                                thStyle={thStyle}\n                                selectedCheckpointId={selectedCheckpointId}\n                                width={width}\n                                widthCp={widthCp}\n                                onClickCheckpoint={onClickCheckpoint}\n                                dotColor={dotColor}\n                            />\n\n                            <th class={thClass} style={thStyle}>\n                                <div class='' style={`width: ${widthCp}px;`}>\n                                    <i class='fas fa-flag-checkered' />\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <Contestants\n                            stores={this.props.stores}\n                            currentClass={currentClass}\n                            contestants={sortedContestants}\n                            limit={limit}\n                            onClickMusher={onClickMusher}\n                            tdClass={tdClass}\n                            tdStyle={tdStyle}\n                            progressStyle={progressStyle}\n                            progressbarStyle={progressbarStyle}\n                        />\n                    </tbody>\n                </table>\n            </div>\n\t\t</>);\n\t}\n}\n\nexport default RaceLiveResults;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__3_DrK\",\"hoverElement\":\"hoverElement__3ED7Q\",\"hoverelementhide\":\"hoverelementhide__2AP13\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction meterToFeet(value) {\n    return 3.28084 * value;\n}\n\n@observer\nclass Elevation extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(meterToFeet(value), 0)} {smallUnit ? <><small><small><small class='ml-0 text-muted'>ft</small></small></small></> : <>ft</>}\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 0)} {smallUnit ? <><small><small><small class='ml-0 text-muted'>m</small></small></small></> : <>m</>}\n            </nobr>\n        </>);\n    }\n}\n\nexport default Elevation;\n","import { h, Component } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport { route } from 'preact-router';\nimport Markdown from 'preact-markdown';\nimport linkstate from 'linkstate';\n\nimport RaceTracking from '../../components/public/raceTracking.js';\nimport RaceLiveResults from '../../components/races/liveResults';\n\nimport mu from '../../lib/musher-util';\nimport style from './style.css';\n\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_TOP_BACK = mu.marginTopBack(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\nconst SUB_MENU_MARGIN_TOP = mu.subMenuMarginTop();\n\nconst initialState = {};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\n\n@observer\nclass TvTop10Progress extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n    }\n\n    loadLiveRaceResults = async (props = this.props, { teamIds, focusOnMushers, bibs, classid }) => {\n        const { raceStore, userStore } = props.stores;\n        const { race } = raceStore;\n        const { historyPointIndex, replayHistory, timerRunning } = this.state;\n        const { showDrawerReplay } = this.props;\n        const classInfo = raceStore.getClassById(classid) || {};\n        const { isAdmin } = userStore;\n\n        await raceStore.getRaceTrackerData(race.raceTrackerRace, {\n            history: (replayHistory || showDrawerReplay),\n            bibs,\n            classid,\n            startDate: classInfo.startDate,\n            endDate: classInfo.endDate,\n            isAdmin,\n        });\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers, bibs, historyPointIndex);\n\n        // Set reload timer\n        if (timerRunning) {\n            clearTimeout(this.updateTimer.reload);\n            this.updateTimer.reload = setTimeout(() => {\n                console.log('loadLiveRaceResults.reloading...');\n                const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n                this.setState({ reloadLastEpoch });\n                // this.loadRace(props);\n                this.loadLiveRaceResults(this.props, { teamIds, focusOnMushers, bibs, classid });\n            }, RELOAD_INTERVAL_IN_SEC * 1000);\n        }\n    }\n\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        try {\n            this.setState({ isLoading: true });\n            const { raceStore, appState } = props.stores;\n            const { raceid, classid } = props;\n            await raceStore.load(raceid);\n            const { race } = raceStore;\n            const { focusOnMushers } = appState;\n\n            const { selectedClassIds = [] } = appState;\n            const selectedClassId = classid || selectedClassIds[0];\n\n            if (classid) {\n                appState.toggleSelectedClassId(classid, true);\n            }\n            const allTeamIds = race.classes\n                .filter(currentClass => currentClass.id === selectedClassId)\n                .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n                .map((currentClass) => {\n                    return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n                })\n                .flat();\n\n            const bibs = race.classes\n                .filter(currentClass => currentClass.id === selectedClassId)\n                .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n                .map((currentClass) => {\n                    return currentClass.contestants.filter(musher => musher.bib > 0).map(musher => musher.bib);\n                })\n                .flat();\n\n            if (allTeamIds.length > 0) {\n                await raceStore.loadTeams(allTeamIds.join(','));\n            }\n            if (race.liveRace > 0) {\n                await this.loadLiveRaceResults(this.props, { teamIds: allTeamIds, focusOnMushers, bibs, classid: selectedClassId });\n            } else {\n                await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n            }\n            raceStore.getAllClassesSortedBy();\n\n            this.setState({ isLoading: false });\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n    }\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n    toggleBib = () => {\n        const { bib } = this.state;\n        const { appState, raceStore } = this.props.stores;\n        const musher = raceStore.getMusherByBibId(bib);\n\t\tappState.toggleFocusOnMusher(musher.id);\n\n        const { focusOnMushers } = appState;\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n    }\n\n    checkForEnter = (e) => {\n        if (e.key === 'Enter') {\n            this.toggleBib();\n        }\n    }\n\n    toggleShowDrawerReplay = () => {\n        const { showDrawerReplay } = this.state;\n        this.setState({\n            showDrawerReplay: !showDrawerReplay,\n        });\n    }\n\n    back = () => {\n        const { history } = this.props.stores;\n        history.goBack();\n    }\n\n\n    render() {\n        const { showDrawerReplay } = this.state;\n        const { userStore, raceStore, appState } = this.props.stores;\n        const { user = {}, teams = [], isAdmin } = userStore;\n\n        const { raceid, classid, path, position = 'right', limit = 10 } = this.props;\n        const { focusOnMushers = [] } = appState;\n\n        const { race } = raceStore;\n        const selectedClass = raceStore.getClassById(classid);\n\n        return (<>\n            <div class={`fixed-top ${style.hoverElement}`} style='height: 100px;'>\n                <div class={`${style.hoverelementonly}`}>\n                    <div class={`row`}>\n                        {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                            <div class='col text-center'>\n                                <a\n                                    class={`btn btn-block ${currentClass.id === classid ? 'btn-success' : 'btn-outline-success'} text-nowrap`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10progress/${race.id}/${currentClass.id}/${position}`}\n                                >\n                                    {currentClass.title}\n                                </a>\n\n\n                                <a\n                                    class={`btn btn-link text-nowrap text-center`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10progress/${race.id}/${currentClass.id}/center`}\n                                >\n                                    center\n                                </a>\n                                <a\n                                    class={`btn btn-link text-nowrap ${position === 'left' ? 'float-right' : 'float-left'}`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10progress/${race.id}/${currentClass.id}/${position === 'left' ? 'right' : 'left'}`}\n                                >\n                                    {position === 'left' ? <>\n                                        right <i class='fas fa-angle-right' />\n                                    </> : <>\n                                        <i class='fas fa-angle-left' /> left\n                                    </>}\n                                </a>\n                            </div>\n                        </>)}\n                    </div>\n                </div>\n            </div>\n\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n                <div class='row'>\n                    <div class={position === 'center' ? 'offset-1 col-10' : (position === 'left' ? 'col-4 ml-5' : 'col-4 offset-8 mr-5')}>\n                        <div\n                            class='px-4 py-2 overflow-hidden'\n                            style='\n                                background-color: #FB4114; \n                                color: #ffffff; \n                                border-radius: 10px 10px 0 0; \n                                font-size: 1.8em;\n                            '\n                        >\n                            <span class='float-right font-weight-light'>{selectedClass.title}</span>\n                            Race standing\n                        </div>\n                        <div\n                            class='mr-5 p-0 position-relative w-100'\n                            style='\n                                background: rgba(0, 0, 0, 0.3);\n                                background-color: #1C1F4C;\n                                background-image: url(\"https://themusher.app/assets/tv-single-background.jpg\");\n                                background-size: cover !important;\n                                background-position: 0 0;    \n                            '\n                        >\n                            {selectedClass && selectedClass.id && <RaceLiveResults\n                                stores={this.props.stores}\n                                race={race}\n                                currentClass={selectedClass}\n                                key={`raceclass-${selectedClass.id}`}\n                                onClickMusher={this.toggleDrawerMusher}\n                                onClickCheckpoint={this.toggleDrawerCheckpoint}\n                                // selectedCheckpointId={selectedCheckpointId}\n                                limit={limit}\n                                tableClass={''}\n                                tdClass={''}\n                                tdStyle={'color: #ffffff; font-size: 1.5em;'}\n                                thStyle={'color: #ffffff; font-size: 1.5em;'}\n                                progressStyle={'height: 30px;'}\n                                progressbarStyle={'font-size: 1.5em;'}\n                            />}\n                        </div>\n                        <div\n                            class='px-4 py-2 overflow-hidden text-center'\n                            style='\n                                background-color: #FB4114; \n                                color: #ffffff; \n                                border-radius: 0 0 10px 10px;\n                                font-size: 1.4em;\n                            '\n                        >\n                            <nobr class='mr-4'>QPaws app</nobr>\n                                            \n                            <img src='https://themusher.app/assets/appstore-download.png' height='40' class='ml-5 mr-1' />\n                            <img src='https://themusher.app/assets/playstore-download.png' height='40' class='mx-1' />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default TvTop10Progress;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction kmtToMph(value) {\n    return 0.621371 * value;\n}\n\n@observer\nclass Speed extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(kmtToMph(value), 1)} {smallUnit ? <><small><small><small class='ml-0 text-muted'><Text id='workouts.mph'>mph</Text></small></small></small></> : <><Text id='workouts.mph'>mph</Text></>}\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 1)} {smallUnit ? <><small><small><small class='ml-0 text-muted'><Text id='workouts.kmt'>km/t</Text></small></small></small></> : <><Text id='workouts.kmt'>km/t</Text></>}\n            </nobr>\n        </>);\n    }\n}\n\nexport default Speed;\n"],"sourceRoot":""}