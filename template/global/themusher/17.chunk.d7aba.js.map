{"version":3,"sources":["webpack:///./components/data/distance.js","webpack:///./components/data/temperature.js","webpack:///./components/data/weight.js","webpack:///./components/races/liveResults.js","webpack:///./routes/tv/style.css","webpack:///./components/data/elevation.js","webpack:///./routes/tv/top10progress.js","webpack:///./components/data/speed.js"],"names":["displayDistance","distance","util","format","Distance","observer","render","this","props","value","smallUnit","stores","userStore","user","settings","imperial","kmToMiles","class","Component","Temperature","celciusToFahrenheit","Weight","kgToPounds","Checkpoints","checkpoints","thClass","thStyle","selectedCheckpointId","width","widthCp","onClickCheckpoint","dotColor","map","cp","cpIdx","style","id","onClick","data-id","sortOrder","Contestants","currentClass","contestants","limit","onClickMusher","tdClass","tdStyle","progressStyle","progressbarStyle","results","finalContestants","slice","raceStore","sortedContestants","reqTotalRestInSec","requiredRestMinutes","now","Math","floor","Date","getTime","co","coIdx","hasLeftCpPrev","bibIdxOutPrev","estTimeToCpMinutesPrev","hasScratchedPrev","totalInCpTime","selectedMusher","find","e","bib","parseInt","data-bib","startTime","isoTime","idx","fields","percentInCp","checkpointResults","filter","checkpoint","sort","a","b","o","dir","substring","reduce","p","n","res","hasLeftCp","direction","hasArrivedCp","hasScratched","bibIdxIn","findIndex","bibIdxOut","timeInCp","isStartLine","timestamp","mu","deltaSec","timeEqualization","restInCpSoFar","nowEpoch","prevCpOutEpoch","timeUsedOnStage","percentDone","estTimeToCpMinutes","line","role","aria-valuenow","aria-valuemin","aria-valuemax","data-prevtimestamp","data-timeUsedOnStage","data-estTimeToCpMinutesPrev","data-nowEpoch","data-prevCpOutEpoch","cpId","length","output","colspan","getRankingColor","flag","lastname","RaceLiveResults","componentWillReceiveProps","nextProps","reloadLastEpoch","sortContestantsByResult","sortOrderResults","startDate","componentDidMount","tableClass","module","exports","Elevation","meterToFeet","MARGIN_TOP","marginTop","MARGIN_BOTTOM","marginTopBack","marginBottom","initialState","subMenuMarginTop","TvTop10Progress","loadLiveRaceResults","classInfo","teamIds","focusOnMushers","bibs","race","historyPointIndex","state","replayHistory","timerRunning","showDrawerReplay","getClassById","classid","getRaceTrackerData","raceTrackerRace","history","endDate","isAdmin","getRaceTrackerActiveTeams","clearTimeout","updateTimer","reload","setTimeout","console","log","setState","RELOAD_INTERVAL_IN_SEC","loadRaceResults","loadWorkoutSummary","raceid","getWorkoutSummaryActiveTeams","loadRace","selectedClassId","allTeamIds","err","isLoading","appState","load","selectedClassIds","toggleSelectedClassId","classes","musher","team","flat","loadTeams","join","getAllClassesSortedBy","liveRace","toggleFocusOnMusher","target","parentElement","dataset","musherid","toggleBib","getMusherByBibId","checkForEnter","key","toggleShowDrawerReplay","back","goBack","componentWillUnmount","tick","position","selectedClass","hoverElement","hoverelementonly","href","title","toggleDrawerMusher","toggleDrawerCheckpoint","src","height","Speed","kmtToMph"],"mappings":"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","file":"17.chunk.d7aba.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction displayDistance(distance) {\n\tif (distance < 5) {\n\t\treturn util.format(distance, 2);\n\t}\n\tif (distance < 10) {\n\t\treturn util.format(distance, 1);\n\t}\n\treturn util.format(distance, 1);\n}\n\nfunction kmToMiles(value) {\n    return 0.621371 * value;\n}\n\n@observer\nclass Distance extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n\t\t\t\t\t{displayDistance(kmToMiles(value))} {smallUnit ? <><small><small><small class='ml-0 text-muted'>mi</small></small></small></> : <>mi</>}\n\t\t\t\t</nobr>\n            </>);\n        }\n\n\t\treturn (<>\n\t\t\t<nobr>\n\t            {displayDistance(value)} {smallUnit ? <><small><small><small class='ml-0 text-muted'>km</small></small></small></> : <>km</>}\n\t\t\t</nobr>\n\t    </>);\n    }\n}\n\nexport default Distance;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction celciusToFahrenheit(value) {\n    return ((value * 9/5) + 32);\n}\n\n@observer\nclass Temperature extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(celciusToFahrenheit(value), 0)}°F\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 1)}°C\n            </nobr>\n        </>);\n    }\n}\n\nexport default Temperature;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction kgToPounds(value) {\n    return 2.20462 * value;\n}\n\n@observer\nclass Weight extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(kgToPounds(value), 0)} lb\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 0)} kg\n            </nobr>\n        </>);\n    }\n}\n\nexport default Weight;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport Markdown from 'preact-markdown';\n\nimport mu from '../../lib/musher-util';\n\nconst initialState = {\n\tisLoading: false,\n};\n\nconst fieldSorter = (fields) => (a, b) => fields.map(o => {\n    let dir = 1;\n    if (o[0] === '-') { dir = -1; o=o.substring(1); }\n    return a[o] > b[o] ? dir : a[o] < b[o] ? -(dir) : 0;\n}).reduce((p, n) => p ? p : n, 0);\n\n@observer\nclass Checkpoints extends Component {\n    render() {\n        const { checkpoints, thClass, thStyle, selectedCheckpointId, width, widthCp, onClickCheckpoint = () => {}, dotColor } = this.props;\n        return (<>\n            {checkpoints && checkpoints.map((cp, cpIdx) => <>\n                {cpIdx > 0 && <th class={thClass} style={thStyle}>\n                    <div class='' style={`width: ${width}px;`}>\n                        &nbsp;\n                    </div>\n                </th>}\n                <th class={thClass} style={thStyle}>\n                    <div\n                        class={`checkpoint position-relative ${selectedCheckpointId === cp.id ? 'text-primary' : ''}`}\n                        style={`width: ${widthCp}px; font-size: 1.1em;`}\n                        onClick={onClickCheckpoint}\n                        data-id={cp.id}\n                    >\n                        <i class='fas fa-campground' />\n\n                        <div\n                            class={`rounded-pill-both px-1 text-center position-absolute ${dotColor ? '' : 'bg-secondary'} font-weight-bold`}\n                            style={`bottom: 0px; right: -20px; font-size: 0.6em; ${dotColor ? `background-color: ${dotColor};` : ''}`}\n                        >\n                            {cp.sortOrder && cp.sortOrder !== 'n/a' && <>{cp.sortOrder}</>}\n                        </div>\n\n                    </div>\n                </th>\n            </>)}\n        </>);\n    }\n}\n\n// @observer\n// class ContestantLineCheckpoint extends Component {\n//     render() {\n\n//         return (<>\n\n//         </>);\n//     }\n// }\n\n@observer\nclass Contestants extends Component {\n    render() {\n        const {\n            currentClass,\n            contestants,\n            limit,\n            onClickMusher,\n            tdClass,\n            tdStyle,\n            progressStyle,\n            progressbarStyle,\n        } = this.props;\n\n        const { checkpoints = [], results = [] } = currentClass;\n        const finalContestants = contestants && limit ? contestants.slice(0, limit) : contestants;\n\n        const { raceStore } = this.props.stores;\n        const { sortedContestants = [] } = raceStore;\n\n        const reqTotalRestInSec = currentClass.requiredRestMinutes * 60;\n        const now = Math.floor(new Date().getTime() / 1000, 10);\n\n        return (<>\n            {finalContestants && finalContestants.map((co, coIdx) => {\n                let cpIdx = 0;\n                let hasLeftCpPrev;\n                let bibIdxOutPrev;\n                let estTimeToCpMinutesPrev;\n                let hasScratchedPrev;\n                let totalInCpTime = 0;\n\n                let selectedMusher = sortedContestants ? sortedContestants.find(e => e.bib === parseInt(co.bib, 10)) : null;\n                selectedMusher = selectedMusher ? selectedMusher : {};\n\n                return(<>\n                    <tr class='musher' onClick={onClickMusher} data-bib={co.bib}>\n                        <td class={tdClass} style={tdStyle}>\n                            {co.startTime ? util.isoTime(co.startTime) : ''}\n                        </td>\n\n                        {checkpoints && checkpoints.map((cp, idx) => {\n                            const checkpointResults = results.slice().filter(e => e.checkpoint === cp.id).sort(fieldSorter(['timestamp']));\n                            const res = checkpointResults.filter(e => parseInt(e.bib, 10) == co.bib);\n                            const hasLeftCp = res.find(e => e.direction === 'out');\n                            const hasArrivedCp = res.find(e => e.direction === 'in');\n                            const hasScratched = res.find(e => e.direction === 'scratched');\n\n                            const allResultsIn = checkpointResults.filter(e => (e.direction === 'in' || e.direction === 'scratched'));\n                            const bibIdxIn = allResultsIn.findIndex(e => parseInt(e.bib, 10) == co.bib);\n\n                            const allResultsOut = checkpointResults.filter(e => e.direction === 'out');\n                            const bibIdxOut = allResultsOut.findIndex(e => parseInt(e.bib, 10) == co.bib);\n\n                            let timeInCp = 0;\n                            let percentInCp;\n                            if (!cp.isStartLine && hasArrivedCp && hasLeftCp && hasArrivedCp.timestamp && hasLeftCp.timestamp) {\n                                timeInCp = mu.deltaSec(hasArrivedCp.timestamp, hasLeftCp.timestamp);\n                            }\n                            totalInCpTime += timeInCp ? timeInCp : 0;\n\n                            if (!hasLeftCp && hasArrivedCp && !cp.isStartLine) {\n                                if (cp.timeEqualization && reqTotalRestInSec) {\n                                    const restInCpSoFar = mu.deltaSec(hasArrivedCp.timestamp, now);\n                                    // console.log({ reqTotalRestInSec, totalInCpTime, restInCpSoFar })\n                                    percentInCp = (totalInCpTime + restInCpSoFar) / reqTotalRestInSec * 100;\n                                    percentInCp = percentInCp > 100 ? 100 : percentInCp;\n                                    // console.log({ percentInCp })\n                                }\n                            }\n\n                            if (hasScratchedPrev) {\n                                return '';\n                            }\n\n                            if (bibIdxIn === -1)  {\n                                if (hasLeftCpPrev) {\n                                    const nowEpoch = Math.floor(new Date().getTime() / 1000);\n                                    const prevCpOutEpoch = Math.floor(new Date(hasLeftCpPrev.timestamp).getTime() / 1000);\n                                    const timeUsedOnStage = Math.floor((nowEpoch - prevCpOutEpoch) / 60);\n                                    // let percentDone = timeUsedOnStage / estTimeToCpMinutesPrev * 100;\n                                    let percentDone = timeUsedOnStage / cp.estTimeToCpMinutes * 100;\n                                    percentDone = percentDone > 95 ? 95 : percentDone;\n                                    const line = (<>\n                                        <td class={`text-center align-middle px-0 pr-1 ${tdClass}`} style={tdStyle}>\n                                            <div class='progress' style={`${progressStyle}`}>\n                                                <div\n                                                    class={`progress-bar progress-bar-striped`}\n                                                    role='progressbar'\n                                                    style={`width: ${percentDone}%; ${progressbarStyle}`}\n                                                    aria-valuenow={percentDone}\n                                                    aria-valuemin='0'\n                                                    aria-valuemax='100'\n                                                    data-prevtimestamp={hasLeftCpPrev.timestamp}\n                                                    data-timeUsedOnStage={timeUsedOnStage}\n                                                    data-estTimeToCpMinutesPrev={estTimeToCpMinutesPrev}\n                                                    data-nowEpoch={nowEpoch}\n                                                    data-prevCpOutEpoch={prevCpOutEpoch}\n                                                >{bibIdxOutPrev + 1 > 0 ? bibIdxOutPrev + 1 : ''}</div>\n                                            </div>\n\n                                            {/* estTimeToCpMinutesPrev: {estTimeToCpMinutesPrev}\n                                            timeUsedOnStage: {timeUsedOnStage}\n                                            percentDone: {percentDone} */}\n                                            {co.cpId && res.length > 0 && <>\n                                                {/* <xmp>{JSON.stringify(co, null, 4)}</xmp><br /> */}\n                                                {/* <xmp>{JSON.stringify(res, null, 4)}</xmp><br /> */}\n                                                {/* <xmp>{JSON.stringify(allResults, null, 4)}</xmp><br /> */}\n                                            </>}\n                                        </td>\n                                    </>);\n                                    bibIdxOutPrev = bibIdxOut;\n                                    hasLeftCpPrev = hasLeftCp;\n                                    estTimeToCpMinutesPrev = cp.estTimeToCpMinutes;\n                                    return line;\n                                }\n                                return '';\n                            }\n                            cpIdx = idx;\n                            bibIdxOutPrev = bibIdxOut;\n                            hasLeftCpPrev = hasLeftCp;\n                            estTimeToCpMinutesPrev = cp.estTimeToCpMinutes;\n\n                            const output = (<>\n                                {(hasArrivedCp || hasScratched) && idx > 0 && <>\n                                    <td class={`text-center align-middle px-0 pr-1 ${tdClass}`} style={tdStyle}>\n                                        <div class='progress' style={`${progressStyle}`}>\n                                            <div\n                                                class={`progress-bar`}\n                                                role='progressbar'\n                                                style={`width: 100%; ${progressbarStyle}`}\n                                                aria-valuenow='100'\n                                                aria-valuemin='0'\n                                                aria-valuemax='100'\n                                            />\n                                        </div>\n                                        {co.cpId && res.length > 0 && <>\n                                            {/* <xmp>{JSON.stringify(co, null, 4)}</xmp><br /> */}\n                                            {/* <xmp>{JSON.stringify(res, null, 4)}</xmp><br /> */}\n                                            {/* <xmp>{JSON.stringify(allResults, null, 4)}</xmp><br /> */}\n                                        </>}\n                                    </td>\n                                </>}\n                                <td class={`text-center align-middle px-0 pr-1 ${tdClass}`} style={tdStyle}>\n                                    <div class='progress' style={`${progressStyle}`}>\n                                        <div\n                                            class={`progress-bar ${percentInCp > 0 ? 'progress-bar-striped' : ''} ${hasScratched ? 'bg-danger' : 'bg-success'}`}\n                                            role='progressbar'\n                                            style={`width: ${percentInCp || 100}%; ${progressbarStyle}`}\n                                            aria-valuenow={percentInCp}\n                                            aria-valuemin='0'\n                                            aria-valuemax='100'\n                                        >{hasScratched ? <i class='fas fa-times' /> : <>{bibIdxIn + 1 > 0 ? bibIdxIn + 1 : ''}</>}</div>\n                                    </div>\n                                    {co.cpId && res.length > 0 && <>\n                                        {/* <xmp>{JSON.stringify(co, null, 4)}</xmp><br /> */}\n                                        {/* <xmp>{JSON.stringify(res, null, 4)}</xmp><br /> */}\n                                        {/* <xmp>{JSON.stringify(allResults, null, 4)}</xmp><br /> */}\n                                    </>}\n                                </td>\n                            </>);\n\n                            hasScratchedPrev = hasScratched;\n                            return output;\n                        })}\n                        <td colspan={checkpoints.length * 2 - cpIdx} class={tdClass} style={tdStyle}>\n                            <div class='d-flex flex-nowrap'>\n                                <div\n                                    class='text-white font-weight-bolder pl-2 pr-1 py-0 rounded-pill-left rounded-none mr-2'\n                                    style={`background-color: ${mu.getRankingColor(coIdx + 1)}; width: 45px;`}\n                                >\n                                    {co.bib}\n                                </div>\n                                <div>\n                                    <nobr>\n                                        {co.flag} {co.lastname}\n                                    </nobr>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                </>);\n            })}\n        </>);\n    }\n}\n\n// @observer\n// class ContestantCheckpoint extends Component {\n\n//     render() {\n\n//         return (<>\n\n//         </>);\n//     }\n// }\n\n\n@observer\nclass RaceLiveResults extends Component {\n    componentWillReceiveProps(nextProps) {\n        if (this.props.currentClass.id !== nextProps.currentClass.id || this.props.reloadLastEpoch !== nextProps.reloadLastEpoch) {\n            const { currentClass } = this.props;\n            const { raceStore } = this.props.stores;\n            const { checkpoints = [], contestants = [], results = [], sortOrderResults, startDate } = currentClass;\n            raceStore.sortContestantsByResult({ contestants, results, checkpoints, sortOrderResults, startDate });\n        }\n\t}\n\n    componentDidMount() {\n        const { currentClass } = this.props;\n        const { raceStore } = this.props.stores;\n        const { checkpoints = [], contestants = [], results = [], sortOrderResults, startDate } = currentClass;\n        raceStore.sortContestantsByResult({ contestants, results, checkpoints, sortOrderResults, startDate });\n\t}\n\n    render() {\n        const widthCp = 20;\n        const width = 40;\n\t\tconst {\n            race,\n            currentClass,\n            onClickMusher = () => {},\n            onClickCheckpoint = () => {},\n            selectedCheckpointId,\n            limit = 100,\n            tableClass = 'table-striped table-sm',\n            thClass,\n            thStyle,\n            tdClass,\n            tdStyle,\n            progressStyle = 'height: 20px;',\n            progressbarStyle,\n        } = this.props;\n        const { checkpoints = [], sortOrderResults } = currentClass;\n        const { raceStore } = this.props.stores;\n        const { sortedContestants = [] } = raceStore;\n        const dotColor = '#808080';\n\n\t\treturn (<>\n            <div class='table-responsive'>\n                <table class={`table ${tableClass}`}>\n                    <thead>\n                        <tr>\n                            <th class={thClass} style={thStyle}>\n                                <div class='' style={`width: ${width}px;`}>\n                                    <i class='fas fa-flag' />\n                                </div>\n                            </th>\n\n                            <Checkpoints stores={this.props.stores}\n                                checkpoints={checkpoints}\n                                thClass={thClass}\n                                thStyle={thStyle}\n                                selectedCheckpointId={selectedCheckpointId}\n                                width={width}\n                                widthCp={widthCp}\n                                onClickCheckpoint={onClickCheckpoint}\n                                dotColor={dotColor}\n                            />\n\n                            <th class={thClass} style={thStyle}>\n                                <div class='' style={`width: ${widthCp}px;`}>\n                                    <i class='fas fa-flag-checkered' />\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <Contestants\n                            stores={this.props.stores}\n                            currentClass={currentClass}\n                            contestants={sortedContestants}\n                            limit={limit}\n                            onClickMusher={onClickMusher}\n                            tdClass={tdClass}\n                            tdStyle={tdStyle}\n                            progressStyle={progressStyle}\n                            progressbarStyle={progressbarStyle}\n                        />\n                    </tbody>\n                </table>\n            </div>\n\t\t</>);\n\t}\n}\n\nexport default RaceLiveResults;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__3_DrK\",\"hoverElement\":\"hoverElement__3ED7Q\",\"hoverelementhide\":\"hoverelementhide__2AP13\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction meterToFeet(value) {\n    return 3.28084 * value;\n}\n\n@observer\nclass Elevation extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(meterToFeet(value), 0)} {smallUnit ? <><small><small><small class='ml-0 text-muted'>ft</small></small></small></> : <>ft</>}\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 0)} {smallUnit ? <><small><small><small class='ml-0 text-muted'>m</small></small></small></> : <>m</>}\n            </nobr>\n        </>);\n    }\n}\n\nexport default Elevation;\n","import { h, Component } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport { route } from 'preact-router';\nimport Markdown from 'preact-markdown';\nimport linkstate from 'linkstate';\n\nimport RaceTracking from '../../components/public/raceTracking.js';\nimport RaceLiveResults from '../../components/races/liveResults';\n\nimport mu from '../../lib/musher-util';\nimport style from './style.css';\n\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_TOP_BACK = mu.marginTopBack(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\nconst SUB_MENU_MARGIN_TOP = mu.subMenuMarginTop();\n\nconst initialState = {};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\n\n@observer\nclass TvTop10Progress extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n    }\n\n    loadLiveRaceResults = async (props = this.props, { teamIds, focusOnMushers, bibs, classid }) => {\n        const { raceStore, userStore } = props.stores;\n        const { race } = raceStore;\n        const { historyPointIndex, replayHistory, timerRunning } = this.state;\n        const { showDrawerReplay } = this.props;\n        const classInfo = raceStore.getClassById(classid) || {};\n        const { isAdmin } = userStore;\n\n        await raceStore.getRaceTrackerData(race.raceTrackerRace, {\n            history: (replayHistory || showDrawerReplay),\n            bibs,\n            classid,\n            startDate: classInfo.startDate,\n            endDate: classInfo.endDate,\n            isAdmin,\n        });\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers, bibs, historyPointIndex);\n\n        // Set reload timer\n        if (timerRunning) {\n            clearTimeout(this.updateTimer.reload);\n            this.updateTimer.reload = setTimeout(() => {\n                console.log('loadLiveRaceResults.reloading...');\n                const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n                this.setState({ reloadLastEpoch });\n                // this.loadRace(props);\n                this.loadLiveRaceResults(this.props, { teamIds, focusOnMushers, bibs, classid });\n            }, RELOAD_INTERVAL_IN_SEC * 1000);\n        }\n    }\n\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        try {\n            this.setState({ isLoading: true });\n            const { raceStore, appState } = props.stores;\n            const { raceid, classid } = props;\n            await raceStore.load(raceid);\n            const { race } = raceStore;\n            const { focusOnMushers } = appState;\n\n            const { selectedClassIds = [] } = appState;\n            const selectedClassId = classid || selectedClassIds[0];\n\n            if (classid) {\n                appState.toggleSelectedClassId(classid, true);\n            }\n            const allTeamIds = race.classes\n                .filter(currentClass => currentClass.id === selectedClassId)\n                .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n                .map((currentClass) => {\n                    return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n                })\n                .flat();\n\n            const bibs = race.classes\n                .filter(currentClass => currentClass.id === selectedClassId)\n                .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n                .map((currentClass) => {\n                    return currentClass.contestants.filter(musher => musher.bib > 0).map(musher => musher.bib);\n                })\n                .flat();\n\n            if (allTeamIds.length > 0) {\n                await raceStore.loadTeams(allTeamIds.join(','));\n            }\n            if (race.liveRace > 0) {\n                await this.loadLiveRaceResults(this.props, { teamIds: allTeamIds, focusOnMushers, bibs, classid: selectedClassId });\n            } else {\n                await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n            }\n            raceStore.getAllClassesSortedBy();\n\n            this.setState({ isLoading: false });\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n    }\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n    toggleBib = () => {\n        const { bib } = this.state;\n        const { appState, raceStore } = this.props.stores;\n        const musher = raceStore.getMusherByBibId(bib);\n\t\tappState.toggleFocusOnMusher(musher.id);\n\n        const { focusOnMushers } = appState;\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n    }\n\n    checkForEnter = (e) => {\n        if (e.key === 'Enter') {\n            this.toggleBib();\n        }\n    }\n\n    toggleShowDrawerReplay = () => {\n        const { showDrawerReplay } = this.state;\n        this.setState({\n            showDrawerReplay: !showDrawerReplay,\n        });\n    }\n\n    back = () => {\n        const { history } = this.props.stores;\n        history.goBack();\n    }\n\n\n    render() {\n        const { showDrawerReplay } = this.state;\n        const { userStore, raceStore, appState } = this.props.stores;\n        const { user = {}, teams = [], isAdmin } = userStore;\n\n        const { raceid, classid, path, position = 'right', limit = 10 } = this.props;\n        const { focusOnMushers = [] } = appState;\n\n        const { race } = raceStore;\n        const selectedClass = raceStore.getClassById(classid);\n\n        return (<>\n            <div class={`fixed-top ${style.hoverElement}`} style='height: 100px;'>\n                <div class={`${style.hoverelementonly}`}>\n                    <div class={`row`}>\n                        {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                            <div class='col text-center'>\n                                <a\n                                    class={`btn btn-block ${currentClass.id === classid ? 'btn-success' : 'btn-outline-success'} text-nowrap`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10progress/${race.id}/${currentClass.id}/${position}`}\n                                >\n                                    {currentClass.title}\n                                </a>\n\n\n                                <a\n                                    class={`btn btn-link text-nowrap text-center`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10progress/${race.id}/${currentClass.id}/center`}\n                                >\n                                    center\n                                </a>\n                                <a\n                                    class={`btn btn-link text-nowrap ${position === 'left' ? 'float-right' : 'float-left'}`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10progress/${race.id}/${currentClass.id}/${position === 'left' ? 'right' : 'left'}`}\n                                >\n                                    {position === 'left' ? <>\n                                        right <i class='fas fa-angle-right' />\n                                    </> : <>\n                                        <i class='fas fa-angle-left' /> left\n                                    </>}\n                                </a>\n                            </div>\n                        </>)}\n                    </div>\n                </div>\n            </div>\n\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n                <div class='row'>\n                    <div class={position === 'center' ? 'offset-1 col-10' : (position === 'left' ? 'col-4 ml-5' : 'col-4 offset-8 mr-5')}>\n                        <div\n                            class='px-4 py-2 overflow-hidden'\n                            style='\n                                background-color: #FB4114; \n                                color: #ffffff; \n                                border-radius: 10px 10px 0 0; \n                                font-size: 1.8em;\n                            '\n                        >\n                            <span class='float-right font-weight-light'>{selectedClass.title}</span>\n                            Race standing\n                        </div>\n                        <div\n                            class='mr-5 p-0 position-relative w-100'\n                            style='\n                                background: rgba(0, 0, 0, 0.3);\n                                background-color: #1C1F4C;\n                                background-image: url(\"https://themusher.app/assets/tv-single-background.jpg\");\n                                background-size: cover !important;\n                                background-position: 0 0;    \n                            '\n                        >\n                            {selectedClass && selectedClass.id && <RaceLiveResults\n                                stores={this.props.stores}\n                                race={race}\n                                currentClass={selectedClass}\n                                key={`raceclass-${selectedClass.id}`}\n                                onClickMusher={this.toggleDrawerMusher}\n                                onClickCheckpoint={this.toggleDrawerCheckpoint}\n                                // selectedCheckpointId={selectedCheckpointId}\n                                limit={limit}\n                                tableClass={''}\n                                tdClass={''}\n                                tdStyle={'color: #ffffff; font-size: 1.5em;'}\n                                thStyle={'color: #ffffff; font-size: 1.5em;'}\n                                progressStyle={'height: 30px;'}\n                                progressbarStyle={'font-size: 1.5em;'}\n                            />}\n                        </div>\n                        <div\n                            class='px-4 py-2 overflow-hidden text-center'\n                            style='\n                                background-color: #FB4114; \n                                color: #ffffff; \n                                border-radius: 0 0 10px 10px;\n                                font-size: 1.4em;\n                            '\n                        >\n                            <nobr class='mr-4'>QPaws app</nobr>\n                                            \n                            <img src='https://themusher.app/assets/appstore-download.png' height='40' class='ml-5 mr-1' />\n                            <img src='https://themusher.app/assets/playstore-download.png' height='40' class='mx-1' />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default TvTop10Progress;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nfunction kmtToMph(value) {\n    return 0.621371 * value;\n}\n\n@observer\nclass Speed extends Component {\n    render() {\n\t\tconst { value = 0, smallUnit } = this.props;\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { user } = userStore;\n\t\tconst { settings = {} } = user;\n\n        if (settings.imperial) {\n            return (<>\n                <nobr>\n                    {util.format(kmtToMph(value), 1)} {smallUnit ? <><small><small><small class='ml-0 text-muted'><Text id='workouts.mph'>mph</Text></small></small></small></> : <><Text id='workouts.mph'>mph</Text></>}\n                </nobr>\n            </>);\n        }\n\n\t\treturn (<>\n            <nobr>\n                {util.format(value, 1)} {smallUnit ? <><small><small><small class='ml-0 text-muted'><Text id='workouts.kmt'>km/t</Text></small></small></small></> : <><Text id='workouts.kmt'>km/t</Text></>}\n            </nobr>\n        </>);\n    }\n}\n\nexport default Speed;\n"],"sourceRoot":""}