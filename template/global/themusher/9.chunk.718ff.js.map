{"version":3,"sources":["webpack:///./components/login/loginForm.js","webpack:///./components/forgotten/index.js","webpack:///../node_modules/preact-pwa-install/src/util.js","webpack:///../node_modules/preact-pwa-install/src/index.js","webpack:///./components/install/index.js","webpack:///./components/register/index.js","webpack:///./components/error/index.js"],"names":["Login","observer","props","handleEmailInput","e","userStore","stores","email","target","value","setState","clearTimeout","checkEmailTimer","setTimeout","checkEmail","togglePassword","passwordType","state","updateCapsLockStatus","isCapsLock","login","routeLoginOk","appState","language","checkLogin","password","token","sendPubSubMessage","getInfo","route","resetLoginMessages","newUser","routeLoginNew","forgotten","routeLoginForgot","changeLanguage","setLanguage","validateLoginToken","response","loginToken","status","showToken","componentDidMount","this","util","isString","render","darkmode","emailIsAvailable","twoFactorLogin","message","messageIcon","error","errorIcon","isValidEmail","validateEmail","isOkToLogin","class","src","height","id","icon","remove","for","type","onInput","onKeypress","style","linkState","onClick","role","disabled","Component","sendLoginLink","validateCode","validateLoginCode","code","resetLoginLinkMessages","resetEmailSent","updateObjectField","routeLogin","showLogo","loginLink","emailSent","loginMessage","loginMessageIcon","loginError","loginErrorIcon","isOkToSendLink","isValidCode","placeholder","href","getWindow","window","isStandalone","matchMedia","matches","navigator","standalone","dispatchToOnPrompt","CACHE","onPrompts","forEach","onPrompt","prompt","awaitInstallPrompt","installPromptListener","preventDefault","installPrompt","Promise","resolve","appInstalledListener","addEventListener","userChoice","then","choiceResult","outcome","success","removeEventListener","push","func","filter","reset","useInstaller","useState","setInstallPrompt","useEffect","cancel","installed","InstallButton","onclick","register","registerUser","fingerprint","jwtToken","skipPubSub","removeError","removeMessage","emailMessage","passwordScore","scorePassword","passwordScoreNormalized","normalizeBetween","passwordStrength","checkPassStrength","isValidPassword","isOkToRegister","Error","componentDidUpdate","removeTimer","componentWillUnmount","className"],"mappings":"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","file":"9.chunk.718ff.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { route } from 'preact-router';\nimport linkState from 'linkstate';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport Error from '../error';\nimport Message from '../message';\nimport Install from '../install';\n\n@observer\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showToken: false,\n            isCapsLock: false,\n            passwordType: 'password',\n            email: this.props.email,\n        };\n    }\n\n    handleEmailInput = async (e) => {\n        const { userStore } = this.props.stores;\n        const email = e.target.value;\n        this.setState({ email });\n        clearTimeout(this.checkEmailTimer);\n        this.checkEmailTimer = setTimeout(() => userStore.checkEmail(email), 1000);\n    }\n\n    togglePassword = () => {\n        let { passwordType } = this.state;\n        if (passwordType === 'password') {\n            passwordType = 'text';\n        } else {\n            passwordType = 'password';\n        }\n        this.setState({ passwordType });\n    }\n\n    updateCapsLockStatus = (isCapsLock) => {\n        this.setState({\n            isCapsLock,\n        });\n    }\n\n    login = async () => {\n        const { routeLoginOk = '/' } = this.props;\n        const { email, password, token } = this.state;\n        const { userStore, appState } = this.props.stores;\n        const { language = 'en' } = appState;\n        const sendPubSubMessage = false;\n        const loginOk = await userStore.checkLogin({ email, password, token, sendPubSubMessage, language });\n        if (loginOk) {\n            await userStore.getInfo();\n            route(routeLoginOk);\n        }\n    }\n\n    resetLoginMessages = () => {\n        const { userStore } = this.props.stores;\n        userStore.resetLoginMessages();\n    }\n\n    newUser = () => {\n        const { email = '' } = this.state;\n        const { routeLoginNew = `/register/${email}` } = this.props;\n        route(routeLoginNew);\n    }\n\n    forgotten = () => {\n        const { email = '' } = this.state;\n        const { routeLoginForgot = `/forgotten/${email}` } = this.props;\n        route(routeLoginForgot);\n    }\n\n    // pwaInstallClick = (e) => {\n    //     // hide our user interface that shows our A2HS button\n    //     // addBtn.style.display = 'none';\n\n    //     // Show the prompt\n    //     this.deferredPrompt.prompt();\n    //     // Wait for the user to respond to the prompt\n    //     this.deferredPrompt.userChoice.then((choiceResult) => {\n    //         if (choiceResult.outcome === 'accepted') {\n    //             console.log('User accepted the A2HS prompt');\n    //         } else {\n    //             console.log('User dismissed the A2HS prompt');\n    //         }\n    //         this.deferredPrompt = null;\n    //     });\n    // }\n\n    // componentWillMount() {\n    //     window.addEventListener('beforeinstallprompt', (e) => {\n    //         // Prevent Chrome 67 and earlier from automatically showing the prompt\n    //         e.preventDefault();\n    //         // Stash the event so it can be triggered later.\n    //         this.deferredPrompt = e;\n\n    //         // // Update UI to notify the user they can add to home screen\n    //         // addBtn.style.display = 'block';\n    //     });\n    // }\n\n    changeLanguage = (e) => {\n        const lang = e.target.value;\n\t\tconst { appState } = this.props.stores;\n        appState.setLanguage(lang);\n    }\n\n    validateLoginToken = async () => {\n        const { userStore } = this.props.stores;\n        const { loginToken, routeLoginOk = '/' } = this.props;\n        // console.log(loginToken, util.isDefined(loginToken));\n        const response = await userStore.validateLoginToken(loginToken);\n        if (response && response.status === 200) {\n            await userStore.getInfo();\n            route(routeLoginOk);\n        }\n    }\n\n    componentDidMount() {\n        const { userStore } = this.props.stores;\n        if (this.props.email) {\n            clearTimeout(this.checkEmailTimer);\n            this.checkEmailTimer = setTimeout(() => userStore.checkEmail(this.props.email), 1000);\n        }\n        const { loginToken } = this.props;\n        if (util.isString(loginToken)) {\n            this.validateLoginToken();\n        }\n    }\n\n    render() {\n        const { isCapsLock, email, password, token, passwordType } = this.state;\n        const { appState, userStore } = this.props.stores;\n        const { language = 'en', darkmode } = appState;\n        const { routeLoginOk, routeLoginNew, routeLoginForgot, showLogo = true } = this.props;\n\n        const { emailIsAvailable, login, twoFactorLogin } = userStore;\n        const { message, messageIcon, error, errorIcon } = login;\n        const isValidEmail = util.validateEmail(email);\n        const isOkToLogin = isValidEmail && password;\n\n        return (\n            <div class='container-fluid'>\n                <div class='row'>\n                    <div class='col-10 offset-1 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 pt-5'>\n\n                        <div class='d-flex justify-content-center'>\n                            {darkmode ? <>\n                                <img src={`https://themusher.app/assets/logo-qpaws-dark.png`} height='100' />\n                            </> : <>\n                                <img src={`https://themusher.app/assets/logo-qpaws-light.png`} height='100' />\n                            </>}\n                        </div>\n                        <div class='d-flex justify-content-center'>\n                            <h5 class='mt-1 mb-3'><Text id='login.login'>Logg inn</Text></h5>\n                        </div>\n\n                        <Error message={error} icon={errorIcon} remove={this.resetLoginMessages} />\n                        <Message message={message} icon={messageIcon} remove={this.resetLoginMessages}  />\n\n                        <div class='form-group'>\n                            <label for='emailInput'><i class='far fa-envelope' /> <Text id='login.email'>E-post</Text></label>\n                            <input type='email'\n                                class={`form-control ${email ? (isValidEmail && !emailIsAvailable ? 'is-valid' : 'is-invalid') : ''}`}\n                                id='emailInput'\n                                onInput={this.handleEmailInput}\n                                value={email}\n                                onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                            />\n                            {email && isValidEmail && emailIsAvailable && <div class='invalid-feedback' style={`display: block;`}>\n                                <Text id='login.email-not-found'>E-posten finnes ikke, men du kan registrere deg 😃</Text>\n                            </div>}\n                            {email && !isValidEmail && <div class=\"invalid-feedback\" style={'display: block;'}>\n                                <Text id='login.email-not-valid'>Hmm, e-posten ser ikke helt riktig ut. Kan det være en skrivefeil?</Text>\n                            </div>}\n                            {email && isValidEmail && !emailIsAvailable && <div class=\"valid-feedback\" style={'display: block;'}>\n                                <Text id='login.email-looks-good'>E-post ser bra ut.</Text>\n                            </div>}\n                        </div>\n\n                        <div class='form-group'>\n                            <label for='passwordInput'><i class='fas fa-key' /> <Text id='login.password'>Passord</Text></label>\n                            <div class='input-group'>\n                                <input type={passwordType}\n                                    class={`form-control`}\n                                    id='passwordInput'\n                                    onInput={linkState(this, 'password')}\n                                    value={password}\n                                    onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                                />\n                                <div class='input-group-append'>\n                                    <button class='btn btn-outline-secondary' type='button'\n                                        onClick={this.togglePassword}\n                                    >\n                                        <i class={`fas fa-eye${passwordType === 'text' ? '-slash' : ''}`} />\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n\n                        {isCapsLock && <div class='alert alert-danger' role='alert'>\n                            <Text id='login.caps-lock-on'>CAPS LOCK er på!</Text>\n                        </div>}\n\n                        {twoFactorLogin &&\n                            <div class='form-group'>\n                                <label for='tokenInput'><i class='fas fa-unlock' /> <Text id='login.2fa-token'>2FA Token</Text></label>\n                                <input type='number'\n                                    class='form-control'\n                                    id='tokenInput'\n                                    onInput={linkState(this, 'token')}\n                                    value={token}\n                                />\n                            </div>}\n\n                        <button class={`btn ${isOkToLogin ? 'btn-primary' : 'btn-outline-primary'}`} type='button'\n                            onClick={this.login}\n                            disabled={!isOkToLogin}\n                        >\n                            <i class='fas fa-sign-in-alt mr-2' />\n                            <Text id='login.login'>Logg inn</Text>\n                        </button>\n                        <button class='btn btn-outline-secondary float-right' type='button'\n                            onClick={this.newUser}\n                        >\n                            <i class='fas fa-plus mr-2' />\n                            <Text id='login.new-user'>Ny bruker</Text>\n                        </button>\n\n                        <small class='form-text text-muted mt-5 text-center'>\n                            <button class='btn btn-small btn-link'\n                                onClick={this.forgotten}\n                            >\n                                <Text id='login.forgot-password'>Glemt passordet?</Text>\n                            </button>\n                        </small>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { route } from 'preact-router';\nimport linkState from 'linkstate';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport Error from '../error';\nimport Message from '../message';\n\n@observer\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showToken: false,\n            isCapsLock: false,\n            email: this.props.email,\n            code: '',\n        };\n    }\n\n    handleEmailInput = async (e) => {\n        const { userStore } = this.props.stores;\n        const email = e.target.value;\n        this.setState({ email });\n        clearTimeout(this.checkEmailTimer);\n        this.checkEmailTimer = setTimeout(() => userStore.checkEmail(email), 1000);\n    }\n\n    updateCapsLockStatus = (isCapsLock) => {\n        this.setState({\n            isCapsLock,\n        });\n    }\n\n    sendLoginLink = () => {\n        const { email = '' } = this.state;\n        const { userStore } = this.props.stores;\n        userStore.sendLoginLink(email);\n    }\n\n    validateCode = () => {\n        const { email, code } = this.state;\n        const { userStore } = this.props.stores;\n        userStore.validateLoginCode(email, code);\n    }\n\n    resetLoginLinkMessages = () => {\n        const { userStore } = this.props.stores;\n        userStore.resetLoginLinkMessages();\n    }\n\n    resetLoginMessages = () => {\n        const { userStore } = this.props.stores;\n        userStore.resetLoginMessages();\n    }\n\n    resetEmailSent = () => {\n        const { userStore } = this.props.stores;\n        userStore.updateObjectField('loginLink', 'emailSent', false);\n    }\n\n    newUser = () => {\n        const { email = '' } = this.state;\n        const { routeLoginNew = `/register/${email}` } = this.props;\n        route(routeLoginNew);\n    }\n\n    login = () => {\n        const { email = '' } = this.state;\n        const { routeLogin = `/${email}` } = this.props;\n        route(routeLogin);\n    }\n\n    changeLanguage = (e) => {\n        const lang = e.target.value;\n\t\tconst { appState } = this.props.stores;\n        appState.setLanguage(lang);\n    }\n\n    componentDidMount() {\n        const { userStore, appState } = this.props.stores;\n        const { language = 'en' } = appState;\n        if (this.props.email) {\n            clearTimeout(this.checkEmailTimer);\n            this.checkEmailTimer = setTimeout(() => userStore.checkEmail(this.props.email, language), 1000);\n        }\n    }\n\n    render() {\n        const { isCapsLock, email, code } = this.state;\n        const { appState, userStore } = this.props.stores;\n        const { showLogo = true } = this.props;\n        const { language = 'en' } = appState;\n        const { emailIsAvailable, loginLink, login } = userStore;\n        const { emailSent, message, messageIcon, error, errorIcon } = loginLink;\n        const {\n            message: loginMessage, messageIcon: loginMessageIcon,\n            error: loginError, errorIcon: loginErrorIcon\n        } = login;\n\n        const isValidEmail = util.validateEmail(email);\n        const isOkToSendLink = isValidEmail && !emailIsAvailable;\n        const isValidCode = util.validateCode(code, 100000, 999999);\n\n        const darkmode = true;\n\n        if (emailSent) {\n            return (\n                <div class='container-fluid'>\n                    <div class='row'>\n                        <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 pt-5'>\n                            {showLogo && <>\n                                <div class='d-flex justify-content-center mb-5 mt-5'>\n                                    {darkmode ? <>\n                                        <img src={`https://themusher.app/assets/logo-qpaws-dark.png`} height='100' />\n                                    </> : <>\n                                        <img src={`https://themusher.app/assets/logo-qpaws-light.png`} height='100' />\n                                    </>}\n                                </div>\n                            </>}\n                            {/* <div class='d-flex justify-content-center'>\n                                <h5 class='mt-1 mb-5'><Text id='forgotten.forgotten'>Glemt passord</Text></h5>\n                            </div> */}\n\n                            <Error message={error} icon={errorIcon} remove={this.resetLoginLinkMessages} />\n                            <Error message={loginError} icon={loginErrorIcon} remove={this.resetLoginMessages} />\n                            <Message message={message} icon={messageIcon} remove={this.resetLoginLinkMessages}  />\n                            <Message message={loginMessage} icon={loginMessageIcon} remove={this.resetLoginMessages}  />\n\n                            <div class='form-group'>\n                                {/* <label for='codeInput'><i class='fas fa-unlock-alt' /> <Text id='forgotten.one-time-code'>Engangskode for</Text> {email}</label> */}\n                                <Localizer>\n                                    <input type='text'\n                                        class={`form-control form-control-lg ${code ? (isValidCode ? 'is-valid' : 'is-invalid') : ''}`}\n                                        style='font-size: 40px; letter-spacing: 5px'\n                                        id='codeInput'\n                                        onInput={linkState(this, 'code')}\n                                        value={code}\n                                        placeholder={<Text id='forgotten.one-time-code'>Engangskode</Text>}\n                                    />\n                                </Localizer>\n                                {code && !isValidCode && <div class=\"invalid-feedback text-white\" style={'display: block;'}>\n                                    <Text id='forgotten.otp-not-valid'>Hmm, koden ser ikke helt riktig ut. Kan det være en skrivefeil?</Text>\n                                </div>}\n                                {code && isValidCode && !emailIsAvailable && <div class=\"invalid-feedback text-white\" style={'display: block;'}>\n                                    <Text id='forgotten.otp-valid'>Koden ser bra ut.</Text>\n                                </div>}\n                            </div>\n\n                            <button class={`btn btn-block btn-lg ${isValidCode ? 'btn-primary' : 'btn-primary'}`} type='button'\n                                onClick={this.validateCode}\n                                disabled={!isValidCode}\n                            >\n                                <i class='far fa-paper-plane mr-2' />\n                                <Text id='forgotten.login-with-otp'>Logg meg inn med koden</Text>\n                            </button>\n\n\n                            <small class='form-text text-muted mt-5 text-center'>\n                                <button class='btn btn-small btn-link text-white'\n                                    onClick={this.login}\n                                >\n                                    <Text id='forgotten.goto-login'>Jeg husker passordet. Gå til logg inn.</Text>\n                                </button>\n                            </small>\n\n                            <small class='form-text text-muted mt-2 text-center'>\n                                <button class='btn btn-small btn-link text-white'\n                                    onClick={this.resetEmailSent}\n                                >\n                                    <Text id='forgotten.send-new-otp'>Jeg trenger en ny kode.</Text>\n                                </button>\n                            </small>\n\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div class='container-fluid'>\n                <div class='row'>\n                    <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 pt-5'>\n                        {showLogo && <>\n                            <div class='d-flex justify-content-center mb-5 mt-5'>\n                                {darkmode ? <>\n                                    <img src={`https://themusher.app/assets/logo-qpaws-dark.png`} height='100' />\n                                </> : <>\n                                    <img src={`https://themusher.app/assets/logo-qpaws-light.png`} height='100' />\n                                </>}\n                            </div>\n                        </>}\n                        {/* <div class='d-flex justify-content-center'>\n                            <h5 class='mt-1 mb-5'><Text id='forgotten.forgotten'>Glemt passord</Text></h5>\n                        </div> */}\n\n                        <Error message={error} icon={errorIcon} remove={this.resetLoginLinkMessages} />\n                        <Message message={message} icon={messageIcon} remove={this.resetLoginLinkMessages}  />\n\n                        <div class='form-group'>\n                            {/* <label for='emailInput'><i class='far fa-envelope' /> <Text id='forgotten.email'>E-post</Text></label> */}\n                            <Localizer>\n                                <input type='email'\n                                    class={`form-control form-control-lg ${email ? (isValidEmail && !emailIsAvailable ? 'is-valid' : 'is-invalid') : ''}`}\n                                    id='emailInput'\n                                    onInput={this.handleEmailInput}\n                                    value={email}\n                                    onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                                    placeholder={<Text id='forgotten.email'>E-post</Text>}\n                                />\n                            </Localizer>\n                            {email && isValidEmail && emailIsAvailable && <div class='invalid-feedback text-white' style={`display: block;`}>\n                                <Text id='forgotten.email-not-found'>E-posten finnes ikke.</Text> <a href={`/register/${email}`}><Text id='forgotten.register'>registrere deg</Text></a> 😃\n                            </div>}\n                            {email && !isValidEmail && <div class=\"invalid-feedback text-white\" style={'display: block;'}>\n                                <Text id='forgotten.email-not-valid'>Hmm, e-posten ser ikke helt riktig ut. Kan det være en skrivefeil?</Text>\n                            </div>}\n                            {email && isValidEmail && !emailIsAvailable && <div class=\"invalid-feedback text-white\" style={'display: block;'}>\n                                <Text id='forgotten.email-looks-good'>E-post ser bra ut.</Text>\n                            </div>}\n                        </div>\n\n\n                        {isCapsLock && <div class='alert alert-danger' role='alert'>\n                            <Text id='forgotten.caps-lock-is-on'>CAPS LOCK er på!</Text>\n                        </div>}\n\n                        <button class={`btn btn-block btn-lg ${isOkToSendLink ? 'btn-primary' : 'btn-primary'}`} type='button'\n                            onClick={this.sendLoginLink}\n                            disabled={!isOkToSendLink}\n                        >\n                            <i class='far fa-paper-plane mr-2' />\n                            <Text id='forgotten.send-reset-link'>Send meg en reset link</Text>\n                        </button>\n\n                        <small class='form-text text-muted mt-5 text-center'>\n                            <button class='btn btn-small btn-link text-white'\n                                onClick={this.login}\n                            >\n                                <Text id='forgotten.goto-login'>Jeg husker passordet. Gå til logg inn.</Text>\n                            </button>\n                        </small>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","/** Object.assign ponyfill (note: used by Rollup)\n *\t@private\n */\nexport function assign(obj) {\n\tfor (let i=1; i<arguments.length; i++) {\n\t\t// eslint-disable-next-line guard-for-in, prefer-rest-params\n\t\tfor (let p in arguments[i]) obj[p] = arguments[i][p];\n\t}\n\treturn obj;\n}\n\n\nexport function getWindow() {\n\ttry {\n\t\tif (window) return window;\n\t}\n\tcatch (e) {\n\t\treturn;\n\t}\n}\n\n","import { h, Component } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { assign, getWindow } from './util'; // eslint-disable-line no-unused-vars\n\n/**\n * Returns true if the application is running as an installed PWA.\n *\n * @example\n * let isStandalone = isStandAlone();\n *\n */\nexport function isStandalone() {\n\tlet window = getWindow();\n\tif (!window) return false;\n\n\treturn window.matchMedia && window.matchMedia('(display-mode: standalone)').matches && true ||\n            window.navigator && window.navigator.standalone === true || false;\n}\n\nconst CACHE = {\n\tprompt: null,\n\tinstallPromptListener: null,\n\tappInstalledListener: null,\n\tonPrompts: []\n};\n\n/**\n * Any window listeners and cached prompts that have been captured by awaitInstallPrompt() are removed.\n */\nexport function reset() {\n\tlet window = getWindow();\n\tif (CACHE.installPromptListener) {\n\t\twindow && window.removeEventListener && window.removeEventListener('beforeinstallprompt', CACHE.installPromptListener);\n\t\tCACHE.installPromptListener = null;\n\t}\n\tif (CACHE.appInstalledListener) {\n\t\twindow && window.removeEventListener && window.removeEventListener('appinstalled', CACHE.appInstalledListener);\n\t\tCACHE.appInstalledListener = null;\n\t}\n\tCACHE.prompt = null;\n\tCACHE.onPrompts = [];\n}\n\nfunction removeOnPrompt(func) {\n\tCACHE.onPrompts = CACHE.onPrompts.filter(onPrompt => onPrompt !== func);\n}\n\nfunction dispatchToOnPrompt() {\n\tCACHE.onPrompts.forEach(onPrompt => onPrompt(CACHE.prompt));\n}\n\n/**\n * This function allows you to listen to the browser for the install prompt\n * that allows you to install the application standalone.\n *\n * Different browsers have different criteria for when this prompt is made available.\n * Currently Chrome requires that  the user \"interact\" with the content on your domain\n * for at least 30 seconds.\n *\n * More info can be found here:\n * https://developers.google.com/web/fundamentals/app-install-banners/\n *\n * awaitInstallPrompt offers the following capabilities:\n * * Listen to the browser for an install prompt.\n * * Stop listening at any time.\n * * Trigger the prompt to request app installation.\n *\n * @param {Function} onPrompt (prompt, cancel) => {} A function that will be called when\n * the browser delivers a prompt that we can present. The first argument prompt is a function\n * you can call at any time the triggers the install process. cancel is another function\n * that allows you to stop listening for prompts.\n *\n * @returns {Function} An function that when called, will stop listening for incoming prompts from the browser.\n *\n * @example\n * let cancel = awaitInstallPrompt((prompt) => {\n *      prompt().then(\n *          success => console.log(\n *              success && 'Successfully installed app as PWA.'\n *                      || 'User abandoned install.'\n *          )\n *      )\n * })\n */\nexport function awaitInstallPrompt(onPrompt) {\n\tif (!CACHE.installPromptListener) {\n\t\tlet window = getWindow();\n\t\tif (!window || isStandalone()) return null;\n\t\tCACHE.installPromptListener = e => {\n\t\t\te.preventDefault();\n\t\t\tlet installPrompt = e;\n\t\t\tCACHE.prompt = () =>  new Promise(resolve => {\n\t\t\t\tCACHE.appInstalledListener = () => {\n\t\t\t\t\tresolve(true);\n\t\t\t\t};\n\t\t\t\twindow.addEventListener('appinstalled', CACHE.appInstalledListener);\n\t\t\t\tinstallPrompt.prompt();\n\t\t\t\tinstallPrompt.userChoice.then(choiceResult => {\n\t\t\t\t\tchoiceResult.outcome !== 'accepted' && resolve(false);\n\t\t\t\t});\n\t\t\t}).then(success => {\n\t\t\t\tinstallPrompt = null;\n\t\t\t\tCACHE.appInstalledListener && window.removeEventListener('appinstalled', CACHE.appInstalledListener);\n\t\t\t\tif (success) {\n\t\t\t\t\tCACHE.prompt = null;\n\t\t\t\t\tdispatchToOnPrompt();\n\t\t\t\t}\n\t\t\t\treturn success;\n\t\t\t});\n\t\t\tdispatchToOnPrompt();\n\t\t};\n\t\twindow.addEventListener('beforeinstallprompt', CACHE.installPromptListener);\n\t}\n\tif (onPrompt) {\n\t\tCACHE.onPrompts.push(onPrompt);\n\t\tCACHE.prompt && onPrompt(CACHE.prompt);\n\t\treturn () => removeOnPrompt(onPrompt);\n\t}\n\treturn () => reset();\n}\n\n/**\n * A Higher Order Component that implements the awaitInstallPrompt() lifecycle and provides\n * the wrapped component with only the meaning full artifacts as props:\n *\n * Props:\n * * isStandalone - true if the app is running in standalone mode.\n * * installPrompt - the prompt function that you call at any time.\n *\n * @example\n * export installer()(\n *      function({isStandalone, installPrompt}){\n *          return (\n *              isStandalone && <p>Running as Standalone</p> ||\n *              installPrompt && <a href=\"#\" onclick={installPrompt}>Install App</a>\n *          );\n *      }\n * );\n */\nexport function installer() {\n\treturn Child => {\n\t\tclass Installer extends Component {\n\n\t\t\tstatic getDerivedStateFromProps(props, state) {\n\t\t\t\treturn state.isStandalone === undefined && { isStandalone: isStandalone() };\n\t\t\t}\n\n\t\t\tcancel() {\n\t\t\t\tthis.setState({ prompt: null });\n\t\t\t\tthis.canceltoken && this.canceltoken();\n\t\t\t}\n        \n\t\t\tcomponentDidMount() {\n\t\t\t\tif (this.state.isStandalone === false) {\n\t\t\t\t\tthis.canceltoken = awaitInstallPrompt(prompt => {\n\t\t\t\t\t\tthis.setState({ prompt });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tcomponentWillUnmount() {\n\t\t\t\tthis.cancel();\n\t\t\t}\n        \n\t\t\trender(props, { isStandalone, prompt }) {\n\t\t\t\treturn h(Child, { ...props, isStandalone, installPrompt: prompt } );\n\t\t\t}\n\t\t}\n\t\treturn Installer;\n\t};\n}\n\n/**\n * A Hook that implements the awaitInstallPrompt() lifecycle and returns\n * an object that contains the isStandalone and installPrompt props:\n *\n * @returns {Object}\n * * isStandalone - true if the app is running in standalone mode.\n * * installPrompt - the prompt function that you call at any time.\n */\nexport function useInstaller() {\n\tconst [standalone] = useState(isStandalone());\n\tconst [installPrompt, setInstallPrompt] = useState(null);\n\tuseEffect(() => awaitInstallPrompt((prompt, cancel) => {\n\t\tsetInstallPrompt({ prompt: () =>\n\t\t\tprompt().then(installed => {\n\t\t\t\tinstalled && cancel();\n\t\t\t\treturn installed;\n\t\t\t})\n\t\t});\n\t}));\n\treturn ({ isStandalone: standalone, installPrompt: installPrompt && installPrompt.prompt });\n}\n\nexport default useInstaller;\n","import { h } from 'preact';\nimport { useInstaller } from 'preact-pwa-install';\nimport { Text } from 'preact-i18n';\n\nexport default function InstallButton() {\n\tconst { installPrompt, isStandalone } = useInstaller();\n\treturn installPrompt && (\n        <div class='text-center'>\n            <a class='btn btn-success' href=\"#\" onclick={installPrompt}>\n                <Text id='install.install-app'>Install The Musher</Text>\n            </a>\n        </div>\n    ) || isStandalone && '';\n}\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { route } from 'preact-router';\nimport linkState from 'linkstate';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport Error from '../error';\nimport Message from '../message';\n\n@observer\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCapsLock: false,\n            email: this.props.email,\n            passwordType: 'password',\n            emailIsAvailable: false,\n        };\n    }\n\n    handleEmailInput = async (e) => {\n        const { userStore } = this.props.stores;\n        const email = e.target.value;\n        this.setState({ email });\n        clearTimeout(this.checkEmailTimer);\n        this.checkEmailTimer = setTimeout(() => userStore.checkEmail(email), 1000);\n    }\n\n    register = async () => {\n        const { email, password } = this.state;\n        const { userStore, appState } = this.props.stores;\n        const { language = 'en' } = appState;\n        const { skipPubSub } = this.props;\n        const { fingerprint, jwtToken } = appState;\n        await userStore.registerUser({ email, password, fingerprint, jwtToken, skipPubSub, language });\n        await userStore.getInfo();\n    };\n\n    removeError = () => {\n        this.setState({ error: '', errorIcon: '' });\n    }\n\n    removeMessage = () => {\n        this.setState({ message: '', messageIcon: '' });\n    }\n\n    togglePassword = () => {\n        let { passwordType } = this.state;\n        if (passwordType === 'password') {\n            passwordType = 'text';\n        } else {\n            passwordType = 'password';\n        }\n        this.setState({ passwordType });\n    }\n\n    updateCapsLockStatus = (isCapsLock) => {\n        this.setState({\n            isCapsLock,\n        });\n    }\n\n    login = () => {\n        const { email = '' } = this.state;\n        const { routeLogin = `/${email}` } = this.props;\n\n        route(routeLogin);\n    }\n\n    forgotten = () => {\n        const { email = '' } = this.state;\n        const { routeLoginForgot = `/forgotten/${email}` } = this.props;\n        route(routeLoginForgot);\n    }\n\n    changeLanguage = (e) => {\n        const lang = e.target.value;\n\t\tconst { appState } = this.props.stores;\n        appState.setLanguage(lang);\n    }\n\n    componentDidMount() {\n        const { userStore } = this.props.stores;\n        if (this.props.email) {\n            clearTimeout(this.checkEmailTimer);\n            this.checkEmailTimer = setTimeout(() => userStore.checkEmail(this.props.email), 1000);\n        }\n    }\n\n    render() {\n        const { isCapsLock, email, password, passwordType } = this.state;\n        const { appState, userStore } = this.props.stores;\n        const { showLogo = true } = this.props;\n        const { language = 'en' } = appState;\n        const { emailIsAvailable, emailMessage, login } = userStore;\n        const { message, messageIcon, error, errorIcon } = login;\n\n        const isValidEmail = util.validateEmail(email);\n        const passwordScore = util.scorePassword(password);\n        const passwordScoreNormalized = util.normalizeBetween(passwordScore, 0, 80, 0, 100, 100);\n        const passwordStrength = util.checkPassStrength(password, ['bg-danger', 'bg-warning', 'bg-success', 'bg-success']);\n        const isValidPassword = passwordScoreNormalized > 30;\n        const isOkToRegister = isValidEmail && emailIsAvailable && isValidPassword;\n\n        const darkmode = true;\n\n        return (\n            <div class='container-fluid'>\n                <div class='row'>\n                    <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 pt-5'>\n                        {showLogo && <>\n                            <div class='d-flex justify-content-center mb-5 mt-5'>\n                                {darkmode ? <>\n                                    <img src={`https://themusher.app/assets/logo-qpaws-dark.png`} height='100' />\n                                </> : <>\n                                    <img src={`https://themusher.app/assets/logo-qpaws-light.png`} height='100' />\n                                </>}\n                            </div>\n                        </>}\n                        {/* <div class='d-flex justify-content-center'>\n                            <h5 class='mt-1 mb-5'><Text id='register.new-user'>Ny bruker</Text></h5>                        \n                        </div> */}\n\n                        <Error message={error} icon={errorIcon} remove={this.removeError} />\n                        <Message message={message} icon={messageIcon} remove={this.removeMessage}  />\n\n                        <div class='form-group'>\n                            {/* <label for='emailInput'><i class='far fa-envelope' /> <Text id='register.email'>E-post</Text></label> */}\n                            <Localizer>\n                                <input type='email'\n                                    class={`form-control form-control-lg ${email ? (isValidEmail && emailIsAvailable ? 'is-valid' : 'is-invalid') : ''}`}\n                                    id='emailInput'\n                                    onInput={this.handleEmailInput}\n                                    value={email}\n                                    onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                                    placeholder={<Text id='register.email'>E-post</Text>}\n                                />\n                            </Localizer>\n                            {email && isValidEmail && emailIsAvailable && <div class='valid-feedback' style={`display: block;`}>\n                                {emailMessage}\n                            </div>}\n                            {email && !isValidEmail && <div class=\"invalid-feedback\" style={'display: block;'}>\n                                <Text id='register.email-not-valid'>Hmm, e-posten ser ikke helt riktig ut.</Text>\n                            </div>}\n                            {email && isValidEmail && !emailIsAvailable && <div class=\"invalid-feedback\" style={'display: block;'}>\n                                {emailMessage}\n                            </div>}\n                        </div>\n\n                        <div class='form-group'>\n                            {/* <label for='passwordInput'><i class='fas fa-key' /> <Text id='register.password'>Passord</Text></label> */}\n                            <div class='input-group'>\n                                <Localizer>\n                                    <input type={passwordType}\n                                        class={`form-control form-control-lg ${password ? (isValidPassword ? 'is-valid' : 'is-invalid') : ''}`}\n                                        id='passwordInput'\n                                        onInput={linkState(this, 'password')}\n                                        value={password}\n                                        onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                                        placeholder={<Text id='register.password'>Passord</Text>}\n                                    />\n                                </Localizer>\n                                <div class='input-group-append'>\n                                    <button class='btn btn-primary' type='button'\n                                        onClick={this.togglePassword}\n                                    >\n                                        <i class={`fas fa-eye${passwordType === 'text' ? '-slash' : ''}`} />\n                                    </button>\n                                </div>\n                            </div>\n\n                            <div class='progress' style='height: 2px;'>\n                                <div class={`progress-bar ${passwordStrength}`} role='progressbar' style={`width: ${passwordScoreNormalized}%;`} />\n                            </div>\n                            <div class='invalid-feedback' style={`${passwordScoreNormalized > 0 && passwordScoreNormalized < 30 ? 'display: block' : ''}`}>\n                                <Text id='register.password-too-weak'>Passordet ditt er for svakt. Forsøk et annet passord eller legg til flere bokstaver.</Text>\n                            </div>\n                            <div class='valid-feedback text-warning' style={`${passwordScoreNormalized >= 30 && passwordScoreNormalized < 70 ? 'display: block' : ''}`}>\n                                <Text id='register.password-weak'>Passordet ditt er svakt, men vis skal gjøre vårt beste for å passe på deg.</Text>\n                            </div>\n                            <div class='valid-feedback' style={`${passwordScoreNormalized >= 70 ? 'display: block' : ''}`}>\n                                <Text id='register.password-ok'>Passordet ditt ser bra ut.</Text>\n                            </div>\n                        </div>\n\n                        {isCapsLock && <div class='alert alert-danger' role='alert'>\n                            <Text id='register.caps-lock-on'>CAPS LOCK er på!</Text>\n                        </div>}\n\n                        <button class={`btn btn-lg btn-block ${isOkToRegister ? 'btn-primary' : 'btn-primary'}`} type='button'\n                            onClick={this.register}\n                            disabled={!isOkToRegister}\n                        >\n                            <i class='far fa-save mr-2' />\n                            <Text id='register.register'>Registrer meg</Text>\n                        </button>\n\n                        <small class='form-text text-muted mt-5 text-center'>\n                            <button class='btn btn-small btn-link text-white'\n                                onClick={this.login}\n                            >\n                               <Text id='register.i-have-an-account'>Jeg har visst konto likevel. Gå til login siden.</Text>\n                            </button>\n                        </small>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\n\nconst ERROR_DISPLAY_MS = 10000;\n\n@observer\nclass Error extends Component {\n    componentDidUpdate() {\n        const { remove = () => {} } = this.props;\n        clearTimeout(this.removeTimer);\n        this.removeTimer = setTimeout(() => remove(), ERROR_DISPLAY_MS);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.removeTimer);\n    }\n\n    render() {\n        const { message, icon, remove = () => {} } = this.props;\n\n        if (!message) {\n            return '';\n        }\n        return (\n            <div class='container'>\n                <div class='alert alert-danger row'>\n                    <div class={`col-12`}>\n                        <a href='#' onclick={remove} class='float-right'>\n                            <i className='fas fa-times' />\n                        </a>\n                        {icon && <h1 class='float-left mr-3'><i class={icon} /></h1>}\n                        {message && <span>{message}</span>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Error;\n"],"sourceRoot":""}