{"version":3,"sources":["webpack:///./routes/embed/style.css","webpack:///./routes/embed/agreement.js","webpack:///./components/dog/scroller.js"],"names":["module","exports","byBib","a","b","aHas","musher","bib","MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","initialState","isLoading","contentIsNotLoaded","reloadInSec","reloadLastEpoch","reloadIsActive","observer","Component","constructor","props","super","initComponent","Math","floor","Date","getTime","this","setState","tickReloadTimeer","state","updateTimer","now","clearTimeout","tick","setTimeout","componentDidMount","componentWillUnmount","render","reloadPercent","util","normalizeBetween","class","style","role","aria-valuenow","aria-valuemin","aria-valuemax","toggleAdminInfo","e","stopPropagation","showAdminInfo","toggleInfo","showInfo","classid","email","onTeamClick","onDogClick","raceStore","userStore","stores","isAdmin","getMusherByBibId","getMusherByBibEmail","team","getTeamById","user","members","find","m","raceClass","getClassById","totals","getTotalsByTeamId","image","getImage","priority","shortname","displayNameShort","dotColor","getRankingColor","title","flag","firstname","lastname","sportsClub","public","onClick","id","href","uuidv4","name","markdown","replaceImages","description","images","markdownOpts","getMarkdownOptions","dogs","map","d","allDogs","distanceKm","length","format","elevation","secToHms","duration","rest","JSON","stringify","TvTop10","loadLiveRaceResults","async","teamIds","focusOnMushers","race","getRaceTrackerData","raceTrackerRace","getRaceTrackerActiveTeams","loadRaceResults","raceid","loadWorkoutSummary","getWorkoutSummaryActiveTeams","loadRace","appState","load","selectedClassIds","selectedClassId","toggleSelectedClassId","allTeamIds","classes","filter","currentClass","contestants","flat","loadTeams","join","liveRace","getAllClassesSortedBy","raceTrackerResults","getRacetrackerResults","reload","RELOAD_INTERVAL_IN_SEC","toggleFocusOnMusher","musherId","target","parentElement","dataset","musherid","handleMusherClick","closest","showModal","modalBib","toggleModal","inputRef","componentWillReceiveProps","nextProps","modalEmail","position","limit","teams","language","lastAllowedChangeDate","endDate","setHours","getHours","data","line","lineData","raceTrackerMapLine","parseInt","Bib","contestant","sort","slice","distance","idx","type","data-id","colspan","currentTeam","currentResults","cellphone","address","postalcode","postalplace","country","declaration","isoDate","declarationDate","DogScroller","scrollImages","scrollLeft","clientWidth","imageIdx","nearestInt","round","diff","abs","Number","isInteger","sortByName","dogA","dogB","size","onScroll","dogId","dog","onTouchstart","onTouchend","onTouchmove","indexOf","className","showName","showPosition"],"mappings":"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","file":"86.chunk.6eac7.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__4nHll\",\"hoverElement\":\"hoverElement__rkj2s\",\"hoverelementhide\":\"hoverelementhide__10QkM\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport Markdown from 'preact-markdown';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport DogScroller from '../../components/dog/scroller';\nimport Overlay from '../../components/overlay/';\nimport TeamsPublicDetail from '../../routes/teams/publicDetail';\nimport DogPublicDetail from '../../routes/dogs/publicDetail';\n\nimport style from './style.css';\n\nconst initialState = {\n\tisLoading: false,\n\tcontentIsNotLoaded: true,\n\n\treloadInSec: null,\n\treloadLastEpoch: null,\n\treloadIsActive: false,\n};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\n\n\nfunction byBib(a, b) {\n    const aHas = typeof a.musher !== 'undefined';\n    const bHas = typeof b.musher !== 'undefined';\n    return (bHas - aHas) || (aHas === true && a.musher.bib - b.musher.bib) || 0;\n}\n\nfunction raceStatus(musher) {\n\tswitch (musher.raceStatus) {\n\t\tcase 'OK':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute rounded-lg' style='top: 10px; left: 0px;'><i class='fas fa-check text-success' /></span>\n\t\t\t</>);\n\t\tcase 'DNS':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNF':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DC':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-warning text-white text-center px-2 rounded-lg border' style='top: 5px; left: -150px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n\n\n@observer\nclass ReloadTimer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n\t\tthis.updateTimer = {};\n    }\n\n\tinitComponent = () => {\n\t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({\n\t\t\treloadIsActive: true,\n\t\t\treloadLastEpoch,\n\t\t}, () => this.tickReloadTimeer());\n\t}\n\n\ttickReloadTimeer() {\n\t\tconst { reloadIsActive, reloadLastEpoch } = this.state;\n        if (reloadIsActive) {\n\t\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\t\tconst reloadInSec = RELOAD_INTERVAL_IN_SEC - (now - reloadLastEpoch);\n\t\t\tthis.setState({ reloadInSec });\n\t\t\tclearTimeout(this.updateTimer.tick);\n\t\t\tthis.updateTimer.tick = setTimeout(() => this.tickReloadTimeer(), 1000);\n        }\n\t\treturn false;\n    }\n\n\tcomponentDidMount() {\n\t\tthis.initComponent();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\trender() {\n\t\tconst { reloadInSec } = this.state;\n\t\tconst reloadPercent = Math.floor(util.normalizeBetween(reloadInSec, 0, RELOAD_INTERVAL_IN_SEC, 0, 100))\n\n\t\treturn (<>\n\t\t\t<div class='progress fixed-top' style='height: 2px; z-index: 999999;'>\n\t\t\t\t<div class='progress-bar' role='progressbar' style={`width: ${reloadPercent}%;`} aria-valuenow={reloadPercent} aria-valuemin='0' aria-valuemax='100' />\n\t\t\t</div>\n\t\t</>);\n\t}\n}\n\n@observer\nclass MusherInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    toggleAdminInfo = (e) => {\n        e.stopPropagation();\n        const { showAdminInfo } = this.state;\n        this.setState({\n            showAdminInfo: !showAdminInfo,\n        });\n    }\n\n    toggleInfo = (e) => {\n        e.stopPropagation();\n        const { showInfo } = this.state;\n        this.setState({\n            showInfo: !showInfo,\n        });\n    }\n\n    render() {\n        const { showAdminInfo, showInfo } = this.state;\n        const { classid, bib, email, onTeamClick, onUserClick, onDogClick } = this.props;\n\n        const { raceStore, userStore } = this.props.stores;\n        const { isAdmin } = userStore;\n        const musher = bib ? raceStore.getMusherByBibId(bib) : raceStore.getMusherByBibEmail(email);\n        const team = raceStore.getTeamById(musher.team);\n        const user = team.members ? team.members.find(m => m.email === musher.email) : {};\n        const raceClass = raceStore.getClassById(classid);\n        const totals = raceStore.getTotalsByTeamId(musher.team);\n        const image = mu.getImage({ user, team, priority: 'user' });\n        const shortname = mu.displayNameShort(user) || mu.displayNameShort(musher);\n\n        const dotColor = mu.getRankingColor(musher.bib);\n\n        return (<>\n            <div class='d-flex position-relative'>\n                <div\n                    class={`position-relative text-center border rounded-circle imageRounded imageRoundedMedium`}\n                    style={image ? `background-image: url(\"${image}\"); background-size: cover;` : ''}\n                >\n                    {!image && <div class='text-muted' style='font-size: 25px; padding-top: 5px;'>{shortname}</div>}\n                    <div\n                        class={`rounded-pill-both px-2 text-center position-absolute ${dotColor ? '' : 'bg-secondary'} font-weight-bold`}\n                        style={`bottom: -20px; right: 0; ${dotColor ? `background-color: ${dotColor};` : ''}`}\n                    >\n                        {musher.bib && musher.bib !== 'n/a' && <>{musher.bib}</>}\n                    </div>\n                </div>\n                <div class='flex-grow-1 pl-3 text-overflow mb-3' style='line-height: 1.2em;'>\n                    <h6 class='font-weight-light mb-0'>{raceClass.title}</h6>\n                    <h3 class='mb-0'>\n                        {musher.flag} {musher.firstname} {musher.lastname}\n                    </h3>\n                    <h6 class='mb-0'>{musher.sportsClub}</h6>\n                </div>\n            </div>\n\n\n            {team.public > 0 && <>\n                {showInfo ? <>\n                    <button class='btn btn-link float-right' onClick={this.toggleInfo}>\n                        <i class='fas fa-angle-up' /> <Text id='races.hide-info'>Hide info</Text>\n                    </button>\n                </> : <>\n                    <button class='btn btn-link float-right' onClick={this.toggleInfo}>\n                        <i class='fas fa-angle-down' /> <Text id='races.show-info'>Show info</Text>\n                    </button>\n                </>}\n\n                <h3>\n                    {team.public ? <>\n                        <a href={`/teams/public/${team.uuidv4}`} onClick={(e) => onTeamClick(e, team.uuidv4)}>\n                            {team.name}\n                        </a>\n                    </> : <>\n                        {team.name}\n                    </>}\n                </h3>\n                {showInfo && <>\n                    <Markdown markdown={mu.replaceImages(team.description, team.images)} markdownOpts={mu.getMarkdownOptions()} />\n                </>}\n                {team.dogs && <div class='w-100 container-fluid'>\n                    <div class='row pt-2'>\n                        <DogScroller stores={this.props.stores} dogs={team.dogs.map(d => d.id)} allDogs={team.dogs} onDogClick={onDogClick} />\n                    </div>\n                </div>}\n            </>}\n\n            {totals && totals.distanceKm && <>\n                <div class='table-responsive-lg'>\n                    <table class='table table-borderless'>\n                        <tbody>\n                            <tr>\n                                <td style='width: 5%;'><i class='fas fa-dog' /></td>\n                                <td style='width: 60%'><Text id='races.dogs'>Dogs</Text></td>\n                                <td style='width: 5%;'>&nbsp;</td>\n                                <td class='text-right' style='width: 30%;'>{team.dogs.length}</td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-road' /></td>\n                                <td><Text id='races.distance'>Distance</Text></td>\n                                <td>&nbsp;</td>\n                                <td class='text-right'><nobr>{totals.distanceKm ? `${util.format(totals.distanceKm, 1)} km` : 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-mountain' /></td>\n                                <td><Text id='races.ascend'>Ascending</Text></td>\n                                <td>&nbsp;</td>\n                                <td class='text-right'><nobr>{totals.elevation ? `${util.format(totals.elevation, 0)} m` : 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-stopwatch' /></td>\n                                <td><Text id='races.race-time'>Racetime</Text></td>\n                                <td><i class='fas fa-clock' /></td>\n                                <td class='text-right'><nobr>{util.secToHms(totals.duration) || 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-bed' /></td>\n                                <td><Text id='races.rest-time'>Rest</Text></td>\n                                <td><i class='fas fa-clock' /></td>\n                                <td class='text-right'><nobr>{util.secToHms(totals.rest) || 'n/a'}</nobr></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </>}\n\n\n            {isAdmin && <div style='max-height: 200px; max-width: 70vw; overflow: auto;'>\n                <button class='btn btn-link btn-block' onClick={this.toggleAdminInfo}>\n                    Toggle admin info\n                </button>\n                {showAdminInfo && <>\n                    <small>\n                        <xmp>\n                            {JSON.stringify(musher, null, 4)}\n                            {JSON.stringify(user, null, 4)}\n                            {JSON.stringify(team, null, 4)}\n                            {JSON.stringify(totals, null, 4)}\n\n                            {/* {\n                                \"firstDate\": \"2021-03-19 11:59\",\n                                \"lastDate\": \"2021-03-20 17:13\",\n                                \"firstEpoch\": 1616151540000,\n                                \"lastEpoch\": 1616256780000,\n                                \"now\": {\n                                    \"$numberDecimal\": \"1642675856939\"\n                                },\n                                \"totalTimeUsedSec\": 26524316,\n                                \"totalWorkoutTimeUsedSec\": 130895,\n                                \"lastDuration\": 25655,\n                                \"team\": 84,\n                                \"count\": 4,\n                                \"distanceKm\": 301.5906237951766,\n                                \"elevation\": 3610.019075719202,\n                                \"duration\": 77343,\n                                \"rest\": 1332,\n                                \"speedAvg\": 8.294634979660305,\n                                \"totalRest\": 54884,\n                                \"loadIndex\": 1080.75,\n                                \"totalKcalRelated\": 544.535560976128,\n                                \"weightedTotalKcal\": 12303.171406247127,\n                                \"flatTotalKcal\": 9424.70699359927,\n                                \"firstGpxStartEpoch\": null,\n                                \"lastGpxStartEpoch\": null\n                            } */}\n\n                        </xmp>\n                    </small>\n                </>}\n            </div>}\n        </>);\n    }\n}\n\n@observer\nclass TvTop10 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.inputRef = {};\n        this.updateTimer = {};\n    }\n\n    // async loadRace(props = this.props) {\n\t// \tthis.setState({ isLoading: true });\n\t// \tconst { raceStore } = props.stores;\n\t// \tconst { raceid } = props;\n    //     await raceStore.load(raceid);\n    //     const { race } = raceStore;\n\t// \tconst allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n    //         return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n\t// \t}).flat();\n\t// \tif (allTeamIds.length > 0 && raceid) {\n\t// \t\tawait raceStore.loadTeams(allTeamIds.join(','));\n\t// \t\tawait raceStore.loadWorkoutSummary(allTeamIds.join(','), raceid);\n\t// \t\traceStore.getWorkoutSummaryActiveTeams();\n\t// \t}\n\t// \traceStore.getAllClassesSortedBy();\n\n\t// \t// Set reload timer\n\t// \tclearTimeout(this.updateTimer.reload);\n\t// \tthis.updateTimer.reload = setTimeout(async () => {\n\t// \t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t// \t\tthis.setState({ reloadLastEpoch });\n\t// \t\tthis.loadRace();\n\t// \t}, RELOAD_INTERVAL_IN_SEC * 1000);\n\n\t// \tthis.setState({\n\t// \t\tisLoading: false,\n\t// \t\tcontentIsNotLoaded: false,\n\t// \t});\n\t// }\n\n    loadLiveRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { race } = raceStore;\n        await raceStore.getRaceTrackerData(race.raceTrackerRace);\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        this.setState({ isLoading: true });\n        const { raceStore, appState } = props.stores;\n        const { raceid, classid } = props;\n        await raceStore.load(raceid);\n        const { race } = raceStore;\n        const { focusOnMushers } = appState;\n\n        const { selectedClassIds = [] } = appState;\n        const selectedClassId = classid || selectedClassIds[0];\n\n        if (classid) {\n            appState.toggleSelectedClassId(classid, true);\n        }\n\n        const allTeamIds = race.classes\n            .filter(currentClass => currentClass.id === selectedClassId)\n            .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n            .map((currentClass) => {\n                return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n            })\n            .flat();\n        if (allTeamIds.length > 0) {\n            await raceStore.loadTeams(allTeamIds.join(','));\n        }\n        if (race.liveRace > 0) {\n            await this.loadLiveRaceResults(this.props, allTeamIds, focusOnMushers);\n\n        } else {\n            await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n        }\n\n        // const allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n        //     return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n        // }).flat();\n\n        // if (allTeamIds.length > 0) {\n        //     await raceStore.loadTeams(allTeamIds.join(','));\n        //     if (race.liveRace > 0) {\n        //         await this.loadLiveRaceResults(props, allTeamIds, focusOnMushers);\n\n        //     } else {\n        //         await this.loadRaceResults(props, allTeamIds, focusOnMushers);\n        //     }\n        // }\n        raceStore.getAllClassesSortedBy();\n\n        const currentClass = raceStore.getClassById(selectedClassId);\n        if (currentClass && currentClass.raceTrackerResults) {\n            raceStore.getRacetrackerResults(currentClass.raceTrackerResults);\n        }\n\n        // Set reload timer\n        clearTimeout(this.updateTimer.reload);\n        this.updateTimer.reload = setTimeout(async () => {\n            const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n            this.setState({ reloadLastEpoch });\n            this.loadRace(props);\n        }, RELOAD_INTERVAL_IN_SEC * 1000);\n\n        this.setState({ isLoading: false });\n    }\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n    handleMusherClick = (e) => {\n        const { bib } = e.target.closest('tr').dataset;\n        const { showModal } = this.state;\n        this.setState({\n            showModal: !showModal,\n            modalBib: bib,\n        });\n    }\n\n    toggleModal = () => {\n        const { showModal } = this.state;\n        this.setState({\n            showModal: !showModal,\n        });\n    }\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n    render() {\n\t\tconst { contentIsNotLoaded, lockMessage,\n            showTeam, showDog,\n            showModal, modalTitle, modalBib, modalEmail,\n        } = this.state;\n\t\tconst { userStore, raceStore, appState } = this.props.stores;\n        const { classid, position = 'right', limit = 100 } = this.props;\n\t\tconst { user = {}, teams = [], isAdmin } = userStore;\n        const { language = 'en' } = user;\n\n        const { darkmode, displayDetails, editUserDetails, selectedClassIds = [], focusOnMushers = [] } = appState;\n\n\t\tconst { race = {}, teamList, classes = [] } = raceStore;\n\t\tconst { activeTeams, waypoints, zoomToMarkers, raceTrackerResults } = raceStore;\n\n\t\tconst lastAllowedChangeDate = new Date(race.endDate);\n\t\tlastAllowedChangeDate.setHours(lastAllowedChangeDate.getHours() + 2);\n\n        const currentClass = race.classes ? race.classes.find(e => e.id === classid) || {} : {};\n\n        const musher = modalBib ? raceStore.getMusherByBibId(modalBib) : raceStore.getMusherByBibEmail(modalEmail);\n        const team = raceStore.getTeamById(musher.team);\n\n        let contestants = [];\n        if (raceTrackerResults && raceTrackerResults.data) {\n            contestants = raceTrackerResults.data.map((line) => {\n                const lineData = raceStore.raceTrackerMapLine(line);\n                const bib = parseInt(lineData.Bib, 10);\n                let contestant = {};\n                if (classes && classes[currentClass.id].contestants) {\n                    contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n                }\n                return contestant;\n            });\n        } else if (classes[currentClass.id] && classes[currentClass.id].contestants) {\n            contestants = classes[currentClass.id].contestants.sort(byBib).slice(0, limit).map(contestant => contestant);\n        }\n\n        return (<>\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; height: calc(100% - ${MARGIN_BOTTOM} - ${MARGIN_TOP});`}>\n                <div class='row'>\n                    <div class='col-12 px-0 position-relative'\n                        style='font-size: 1.5em; line-height: 1.0em;'\n                    >\n                        <div class='w-100 overflow-hidden'>\n                            <div\n                                class='d-flex flex-row flex-nowrap pb-2 px-1'\n                                style='overflow: auto; scroll-snap-type: x mandatory;'\n                            >\n                                {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                                    <div class='col px-0 pt-2'>\n                                        <a\n                                            type='button'\n                                            class={`btn btn-block ${idx === 0 && 'rounded-pill-left'} ${idx === race.classes.length - 1 && 'rounded-pill-right'} rounded-none ${currentClass.id === classid ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n                                            style='text-overflow: ellipsis; overflow: hidden;'\n                                            data-id={currentClass.id}\n                                            href={`/embed/agreement/${race.id}/${currentClass.id}`}\n                                        >\n                                            {currentClass.title}\n                                        </a>\n                                    </div>\n                                </>)}\n                            </div>\n                        </div>\n\n\n                        <table class='table table-striped table-bordered'>\n                            <thead>\n                                <tr>\n                                    <td\n                                        colspan='2'\n                                        class='px-4 py-4 overflow-hidden'\n                                        style='border-radius: 10px 0 0 0; font-size: 1.4em;'\n                                    >\n                                        <nobr>{currentClass.title}</nobr>\n                                    </td>\n                                    <td\n                                        class='px-3 text-center py-4 overflow-hidden'\n                                        style='border-radius: 0 10px 0 0 ; font-size: 1.1em;'\n                                    >\n                                        Agreement\n                                    </td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {contestants && contestants.map((contestant, idx) => {\n                                    const { musher = {}, currentTeam = {}, currentStages, currentResults = {}, completed, duration,\n                                        normalizedDuration, weightedNormalizedDuration, totalKcalRelated, weightedTotalKcal,\n                                        flatTotalKcal, percentHarder, loadIndex, raceDistance, isDone, normalizedKcal, normalizedFlatKcal,\n                                        finishedDate, totalWorkoutTimeUsedSec,\n                                    } = contestant;\n\n                                    const totals = raceStore.getTotalsByTeamId(currentTeam.id);\n\n                                    return (<>\n                                        <tr style='border-bottom: 1px solid #7B312F;'>\n                                            <td\n                                                class='text-center align-middle ml-0 pl-0'\n                                                style='width: 50px; color: #ffffff; font-size: 1.2em; line-height: 1.2em;'\n                                            >\n                                                <div class='d-flex justify-content-start'>\n                                                    <div class='pl-3 pr-2 w-100 clearfix rounded-pill-right' style={`background-color: ${mu.getRankingColor(idx + 1)}`}>\n                                                        {musher.bib || idx + 1}\n                                                    </div>\n                                                </div>\n                                            </td>\n                                            <td\n                                                class='px-3 py-3'\n                                                style='font-size: 1.2em;'\n                                            >\n                                                <nobr>\n                                                    {musher.flag} {musher.firstname} {musher.lastname}<br />\n                                                    {/* <small class='text-muted'>{musher.sportsClub}</small><br /> */}\n                                                </nobr>\n                                                <small>\n                                                    {musher.cellphone}<br />\n                                                    {musher.address}<br />\n                                                    {musher.postalcode}<br />\n                                                    {musher.postalplace}<br />\n                                                    {musher.country}<br />\n                                                </small>\n                                            </td>\n                                            <td\n                                                class='text-center align-middle'\n                                                style='width: 150px; font-size: 1.2em;'\n                                            >\n                                                {musher.declaration && <>\n                                                    <nobr>\n                                                        <i class='fas fa-check text-success' /> {util.isoDate(musher.declarationDate)}\n                                                    </nobr>\n                                                </>}\n                                            </td>\n                                        </tr>\n                                    </>);\n                                })}\n                                {/* <tr>\n                                    <td\n                                        colspan='3'\n                                        class='text-center'\n                                    >\n                                        <img src='https://themusher.app/assets/logo-qpaws-dark.png' height='70' />\n                                    </td>\n                                </tr> */}\n                            </tbody>\n                        </table>\n\n                    </div>                        \n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default TvTop10;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport DogSimplePublic from './simplePublic';\n\n@observer\nclass DogScroller extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageIdx: 0,\n        };\n    }\n\n    scrollImages = (e) => {\n        const { dogs } = this.props;\n\n        const { scrollLeft, scrollWidth, clientWidth } = e.target;\n        const imageStep = clientWidth;\n        const imageIdx = scrollLeft / imageStep;\n        // console.log({ e, imageStep, imageIdx, scrollLeft, scrollWidth, clientWidth });\n\n        const nearestInt = Math.round(imageIdx);\n        const diff = Math.abs(nearestInt - imageIdx);\n        // console.log({ nearestInt, diff });\n        if (Number.isInteger(imageIdx) || diff < 0.1) {\n            this.setState({\n                imageIdx: nearestInt,\n            });\n        }\n    }\n\n    sortByName = (a, b) => {\n        const { allDogs = [] } = this.props;\n        const dogA = allDogs.find(e => e.id === a);\n        const dogB = allDogs.find(e => e.id === b);\n        if (dogA && dogB) {\n            if (dogA.name > dogB.name) {\n                return 1;\n            }\n        }\n        return -1;\n    }\n\n    render() {\n        const { imageIdx } = this.state;\n        const { dogs, allDogs = [], size = 'medium', onDogClick = () => {} } = this.props;\n\n        return (\n            <div class='w-100'>\n                <div\n                    class='d-flex flex-row flex-nowrap no-scrollbar'\n                    style='overflow: auto; scroll-snap-type: x mandatory;'\n                    onScroll={this.scrollImages}\n                >\n                    {dogs && dogs.sort(this.sortByName).map((dogId, idx) => {\n                        const dog = allDogs.find(e => e.id === dogId);\n                        if (!dog) {\n                            return '';\n                        }\n                        return (\n                            <div class='col clearfix position-relative p-0 mx-2'>\n                                <div\n                                    class={`w-100 h-100 text-center rounded-lg imageContainer d-flex justify-content-center align-items-center`}\n                                    style={`\n                                        flex-wrap: wrap;\n                                        overflow-y: hidden;\n                                    `}\n                                    onTouchstart={(e) => { e.stopPropagation(); }}\n                                    onTouchend={(e) => { e.stopPropagation(); }}\n                                    onTouchmove={(e) => { e.stopPropagation(); }}\n                                >\n                                    <DogSimplePublic\n                                        stores={this.props.stores}\n                                        dog={dog}\n                                        dogs={allDogs.filter(d => dogs.indexOf(d.id) > -1).sort((a, b) => a.name > b.name ? 1 : -1)}\n                                        className='mx-auto'\n                                        showName={true}\n                                        showPosition={false}\n                                        size={size}\n                                        onDogClick={onDogClick} \n                                    />\n                                    {/* <xmp>{JSON.stringify(img, null, 4)}</xmp> */}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DogScroller;\n"],"sourceRoot":""}