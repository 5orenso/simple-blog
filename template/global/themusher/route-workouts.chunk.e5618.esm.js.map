{"version":3,"sources":["webpack:///./routes/workouts/index.js","webpack:///./components/workout/table.js","webpack:///./components/gauge/style.css","webpack:///./components/gauge/index.js"],"names":["MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","SUB_MENU_MARGIN_TOP","subMenuMarginTop","initialState","isLoading","submenu","Workouts","observer","Component","constructor","props","super","loadWorkouts","async","setState","workoutStore","userStore","stores","currentTeam","currentMonth","Date","getMonth","currentYear","util","getYear","month","year","Promise","all","load","query","team","loadWorkoutSummary","loadWorkoutPlans","getNotifications","loadStravaActivities","loadGarminActivities","seasonStart","parseInt","workoutPlanStore","updateItem","resetGraphPlanWeekDistanceCurrent","seasonYear","seasonMonth","workoutPlans","workoutPlanCurrent","id","prepareWeekGraphs","chooseSubmenu","e","this","target","parentElement","dataset","menu","state","stravaActivityStore","hideImported","garminActivityDetailsStore","getWorkoutSummary","getWorkoutSummaryDay","daysBack","componentDidMount","componentWillReceiveProps","nextProps","render","appState","workoutPlan","user","language","MONTHS","getMonths","darkmode","workouts","workoutSummaryWeek","planMonth","sumWorkoutPlanMonth","summaryMonth","findWorkoutSummaryMonth","percentComplete","Math","floor","totalCountMonth","totalDistanceKmMonth","totalDurationMonth","stravaActivities","garminActivityDetails","class","style","href","callback","key","length","hideTable","hideSummary","radius","percent","prefix","total","completed","format","secToHms","basehref","showNavigation","showHeader","data-menu","onClick","strava","map","act","activity","garmin","fields","workout","WorkoutTable","withText","week","distance","ascend","plan","seasonMonths","monthRange","prevSeasonMonths","xTicksAll","weekRange","wo","partSize","xTicks","i","l","push","m","scope","module","exports","mouseData","Gauge","svgRef","color","strokeWidth","innerRadius","strokeWidthGauge","circumference","PI","arc","dashArray","transform","offset","min","max","textSize","textSizeSmall","xmlns","svg","width","height","preserveAspectRatio","ref","c","gaugeBackground","cx","cy","r","strokeDasharray","strokeLinecap","gauge","stroke","strokeDashoffset","transition","gaugeText","x","y","dominant-baseline","text-anchor","font-size","secondary"],"mappings":"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","file":"route-workouts.chunk.e5618.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\nconst SUB_MENU_MARGIN_TOP = mu.subMenuMarginTop();\n\nimport Workout from '../../components/workout';\nimport WorkoutSummary from '../../components/workout/summary';\nimport WorkoutGraph from '../../components/workout/graph';\nimport WorkoutTable from '../../components/workout/table';\nimport WorkoutCalendar from '../../components/workout/calendar';\nimport Teams from '../../components/team/teams';\nimport Gauge from '../../components/gauge';\nimport CalendarPlan from '../../components/workout/calendarPlan';\nimport Strava from '../../components/strava';\nimport Garmin from '../../components/garmin';\n\nconst initialState = {\n\tisLoading: false,\n\tsubmenu: 'totals',\n};\n\n@observer\nclass Workouts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tloadWorkouts = async (props = this.props) => {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { workoutStore, userStore } = props.stores;\n\t\tconst { currentTeam } = workoutStore;\n\n\t\t// const currentMonth = new Date().getMonth() + 1;\n        // const { month = currentMonth, year = util.getYear(), team = currentTeam, dog = {} } = props;\n\n\t\t// const { year } = props;\n\t\tconst currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\t\tconst { month = currentMonth, year = currentYear } = props;\n\n\t\tawait Promise.all([\n\t\t\tworkoutStore.load({ query: { team: currentTeam, year, month } }),\n\t\t\tthis.loadWorkoutSummary(props),\n\t\t\tthis.loadWorkoutPlans(props),\n\t\t\tuserStore.getNotifications(),\n\t\t\tthis.loadStravaActivities(),\n\t\t\tthis.loadGarminActivities(),\n\t\t]);\n\t\tthis.setState({ isLoading: false });\n\t}\n\n\tasync loadStravaActivities() {\n\t\tconst { stravaActivityStore } = this.props.stores;\n\t\tstravaActivityStore.load({ query: { hideImported: 1 }});\n\t}\n\n\tasync loadGarminActivities() {\n\t\tconst { garminActivityDetailsStore } = this.props.stores;\n\t\tgarminActivityDetailsStore.load({ query: { hideImported: 1 }});\n\t}\n\n\tloadWorkoutPlans = async (props = this.props) => {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { year } = props;\n\n\t\tconst currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\t\tconst seasonStart = parseInt(year || (currentMonth < 6 ? currentYear - 1 : currentYear), 10);\n\t\tconst { workoutPlanStore, workoutStore } = props.stores;\n\t\tconst { currentTeam } = workoutStore;\n\n\t\tworkoutPlanStore.updateItem('workoutPlans', []);\n\t\tworkoutPlanStore.updateItem('workoutPlan', {});\n\t\tworkoutPlanStore.resetGraphPlanWeekDistanceCurrent();\n\n\t\tif (currentTeam) {\n\t\t\tawait workoutPlanStore.load({ query: {\n\t\t\t\tteam: currentTeam,\n\t\t\t\tseasonYear: seasonStart,\n\t\t\t\tseasonMonth: 6,\n\t\t\t} });\n\t\t\tconst { workoutPlans } = workoutPlanStore;\n\t\t\tconst workoutPlanCurrent = workoutPlans[0] || {};\n\t\t\tif (workoutPlanCurrent.id) {\n\t\t\t\tawait workoutPlanStore.load(workoutPlanCurrent.id);\n\t\t\t\tworkoutPlanStore.prepareWeekGraphs({ year });\n\t\t\t}\n\t\t}\n\t\tthis.setState({ isLoading: false });\n\t}\n\n\t// loadDogs = async () => {\n\t// \tconst { dogStore } = this.props.stores;\n\t// \tconst { currentTeam } = dogStore;\n\t// \tawait dogStore.load({ query: { team: currentTeam }, addData: ['workoutSummary'] });\n\t// }\n\n\t// async loadTracks() {\n\t// \tconst { trackStore } = this.props.stores;\n\t// \tawait trackStore.load();\n\t// }\n\n\tasync loadWorkoutSummary(props = this.props) {\n\t\tconst { userStore, workoutStore } = props.stores;\n\n\t\tconst currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\t\tconst { month = currentMonth, year = currentYear } = props;\n\n\t\tconst { currentTeam } = workoutStore;\n        await userStore.getWorkoutSummary({ team: currentTeam, year });\n\t\t// await userStore.getWorkoutSummaryDay({ month, year, team: currentTeam });\n\t\t// await userStore.getWorkoutSummaryDay({ month, year: year - 1, team: currentTeam });\n\t\tawait userStore.getWorkoutSummaryDay({ daysBack: 500, team: currentTeam });\n    }\n\n\tchooseSubmenu = (e) => {\n\t\tconst submenu = e.target.parentElement.dataset.menu || e.target.dataset.menu;\n\t\tthis.setState({ submenu });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadWorkouts();\n\t\t// this.loadDogs();\n\t\t// this.loadTracks();\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n        // console.log('componentWillReceiveProps', nextProps);\n        if (nextProps.month !== this.props.month\n            || nextProps.year !== this.props.year\n            || nextProps.team !== this.props.team) {\n            this.loadWorkouts(nextProps);\n        }\n    }\n\n\trender() {\n\t\tconst { isLoading, submenu } = this.state;\n\t\tconst { userStore, appState, workoutStore, workoutPlanStore,\n\t\t\tstravaActivityStore, garminActivityDetailsStore } = this.props.stores;\n\t\tconst { workoutPlan, workoutPlans } = workoutPlanStore;\n\n\t\tconst { user } = userStore;\n        const { language = 'no' } = user;\n        const MONTHS = mu.getMonths(language);\n\n\t\tconst currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\n\t\tconst { month = currentMonth, year = currentYear } = this.props;\n\t\tconst { currentTeam } = workoutStore;\n\n\t\tconst { darkmode } = appState;\n\t\tconst { workouts } = workoutStore;\n\t\tconst { workoutSummaryWeek = [] } = userStore;\n\n\t\tconst planMonth = workoutPlanStore.sumWorkoutPlanMonth(parseInt(year, 10), parseInt(month, 10)) || 0;\n\t\tconst summaryMonth = userStore.findWorkoutSummaryMonth(parseInt(year, 10), parseInt(month, 10)) || 0;\n\t\tlet percentComplete;\n\t\tif (planMonth) {\n\t\t\tpercentComplete = Math.floor(summaryMonth / planMonth * 100);\n\t\t}\n\t\tconst totalCountMonth = userStore.findWorkoutSummaryMonth(parseInt(year, 10), parseInt(month, 10), 'count', true) || 0;\n\t\tconst totalDistanceKmMonth = userStore.findWorkoutSummaryMonth(parseInt(year, 10), parseInt(month, 10), 'distanceKm', true) || 0;\n\t\tconst totalDurationMonth = userStore.findWorkoutSummaryMonth(parseInt(year, 10), parseInt(month, 10), 'duration', true) || 0;\n\n\t\tconst seasonStart = parseInt(year || (currentMonth < 6 ? currentYear - 1 : currentYear), 10);\n\n\t\tconst { stravaActivities } = stravaActivityStore;\n\t\tconst { garminActivityDetails } = garminActivityDetailsStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n\t\t\t\t<div class='row mb-4 fixed-top' style={`margin-top: ${SUB_MENU_MARGIN_TOP}; background-color: ${darkmode ? '#191d21' : '#f8f9fa'};`}>\n\t\t\t\t\t<div class='col text-center border-bottom border-primary subtopmenu'>\n\t\t\t\t\t\t<a href='/workouts/' class='text-primary stretched-link'><nobr><i class='fas fa-chart-line' /> <Text id='workout.index.dashboard'>Oversikt</Text></nobr></a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col text-center subtopmenu'>\n\t\t\t\t\t\t<a href='/workouts/list' class='text-secondary stretched-link'><nobr><i class='fas fa-list' /> <Text id='workout.index.list'>Liste</Text></nobr></a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col text-center subtopmenu'>\n\t\t\t\t\t\t<a href='/workouts/plan' class='text-secondary stretched-link'><nobr><i class='fas fa-calendar-alt' /> <Text id='workout.index.plan'>Plan</Text></nobr></a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 border-bottom'>\n\t\t\t\t\t\t<Teams stores={this.props.stores} callback={this.loadWorkouts} key={`teams-${currentTeam}`} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-2 mb-2'>\n\t\t\t\t\t\t<a class='btn btn-primary btn-sm float-right'\n\t\t\t\t\t\t\thref='/workouts/edit/new'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i class='fas fa-plus' /> <Text id='workout.index.add-workout'>Legg til treningstur</Text>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<WorkoutCalendar stores={this.props.stores} isLoading={isLoading}\n\t\t\t\t\t\tyear={year}\n\t\t\t\t\t\tmonth={month}\n\t\t\t\t\t\tkey={`calendar-header-${workoutPlan.id}-${workoutPlans.length}`}\n\t\t\t\t\t\thideTable={1}\n\t\t\t\t\t\thideSummary={1}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{submenu === 'totals' && <>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-2 mb-2'>\n\t\t\t\t\t\t\t<div class='row'>\n\t\t\t\t\t\t\t\t<div class='col-5 text-center'>\n\t\t\t\t\t\t\t\t\t{planMonth >= 0 && <Gauge key={`gauge-${percentComplete}`} radius={60} percent={percentComplete} prefix='%' total={`${planMonth} km`} completed={`${summaryMonth} km`} />}<br />\n\t\t\t\t\t\t\t\t\t<small class='text-muted'><Text id='workout.index.plan'>Treningsplan</Text></small>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class='col-7 text-right'>\n\t\t\t\t\t\t\t\t\t<h5><span class='text-muted font-weight-lighter'><Text id='workout.calendar.totalWorkouts'>Antall økter</Text></span>: {totalCountMonth}</h5>\n\t\t\t\t\t\t\t\t\t<h5><span class='text-muted font-weight-lighter'><Text id='workout.calendar.distance'>Distanse</Text></span>: {util.format(totalDistanceKmMonth, 1)} km</h5>\n\t\t\t\t\t\t\t\t\t<h5><span class='text-muted font-weight-lighter'><Text id='workout.calendar.duration'>Varighet</Text></span>: {util.secToHms(totalDurationMonth)}</h5>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>}\n\n\t\t\t\t\t{submenu === 'analysis' && <>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3'>\n\t\t\t\t\t\t\t<WorkoutGraph stores={this.props.stores} isLoading={isLoading} year={year} key={`graph-${workoutPlan.id}-${workoutPlans.length}`} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>}\n\n\t\t\t\t\t{submenu === 'table' && <>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3'>\n\t\t\t\t\t\t\t<WorkoutTable stores={this.props.stores} isLoading={isLoading} year={year} key={`table-${workoutPlan.id}-${workoutPlans.length}`} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>}\n\n\t\t\t\t\t{submenu === 'workoutplan' && <>\n\t\t\t\t\t\t<CalendarPlan stores={this.props.stores}\n\t\t\t\t\t\t\tbasehref='/workouts/'\n\t\t\t\t\t\t\tmonth={month}\n\t\t\t\t\t\t\tyear={year}\n\t\t\t\t\t\t\tkey={`${workoutPlan.id || seasonStart}-${currentTeam}-${month}-${year}`}\n\t\t\t\t\t\t\tshowNavigation={false}\n\t\t\t\t\t\t\tshowHeader={false}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>}\n\n\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 my-3'>\n\t\t\t\t\t\t<div class='row'>\n\t\t\t\t\t\t\t<div class='col px-1 pt-2'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-block ${submenu === 'totals' ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n\t\t\t\t\t\t\t\t\tstyle='text-overflow: ellipsis; overflow: hidden;'\n\t\t\t\t\t\t\t\t\tdata-menu='totals'\n\t\t\t\t\t\t\t\t\tonClick={this.chooseSubmenu}\n\t\t\t\t\t\t\t\t><i class='fas fa-tachometer-alt' /> <Text id='workouts.totals'>Totaler</Text></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class='col px-1 pt-2'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-block ${submenu === 'analysis' ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n\t\t\t\t\t\t\t\t\tstyle='text-overflow: ellipsis; overflow: hidden;'\n\t\t\t\t\t\t\t\t\tdata-menu='analysis'\n\t\t\t\t\t\t\t\t\tonClick={this.chooseSubmenu}\n\t\t\t\t\t\t\t\t><i class='fas fa-chart-area' /> <Text id='workouts.analysis'>Analyser</Text></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class='col px-1 pt-2'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-block ${submenu === 'table' ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n\t\t\t\t\t\t\t\t\tstyle='text-overflow: ellipsis; overflow: hidden;'\n\t\t\t\t\t\t\t\t\tdata-menu='table'\n\t\t\t\t\t\t\t\t\tonClick={this.chooseSubmenu}\n\t\t\t\t\t\t\t\t><i class='fas fa-table' /> <Text id='workouts.table'>Tabell</Text></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class='col px-1 pt-2'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclass={`btn btn-block ${submenu === 'workoutplan' ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n\t\t\t\t\t\t\t\t\tstyle='text-overflow: ellipsis; overflow: hidden;'\n\t\t\t\t\t\t\t\t\tdata-menu='workoutplan'\n\t\t\t\t\t\t\t\t\tonClick={this.chooseSubmenu}\n\t\t\t\t\t\t\t\t><i class='fas fa-calendar-alt' /> <Text id='workouts.workoutplan'>Treningsplan</Text></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t</div>\n\n\t\t\t\t<div class='row'>\n\t\t\t\t\t{user && user.strava && stravaActivities && stravaActivities.length > 0 && (\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 border-top border-bottom pt-3 pb-3 my-2'>\n\t\t\t\t\t\t\t<h5><Text id='workout.index.strava-workouts'>Strava workouts / not imported</Text></h5>\n\t\t\t\t\t\t\t{stravaActivities && stravaActivities.map(act =>\n\t\t\t\t\t\t\t\t<Strava stores={this.props.stores} activity={act} key={`strava-${currentTeam}-${act.id}`} />)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{user && user.garmin && garminActivityDetails && garminActivityDetails.length > 0 && (\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 border-top border-bottom pt-3 pb-3 my-2'>\n\t\t\t\t\t\t\t<h5><Text id='workout.index.garmin-workouts'>Garmin workouts / not imported</Text></h5>\n\t\t\t\t\t\t\t{garminActivityDetails && garminActivityDetails.map(act =>\n\t\t\t\t\t\t\t\t<Garmin stores={this.props.stores} activity={act} key={`garmin-${currentTeam}-${act.id}`} />)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div class='row'>\n\t\t\t\t\t{workouts && workouts.length > 0 && <div class='col-12 mb-4'>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 px-0 mt-4'>\t\t\n\t\t\t\t\t\t\t<h5><Text id='workout.index.last-workouts' fields={{ total: workouts.length, month: MONTHS[month - 1], year }}>Treningsturer {MONTHS[month - 1]} {year} - {workouts.length} stk</Text></h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{workouts && workouts.map(workout => (\n\t\t\t\t\t\t\t<Workout stores={this.props.stores} workout={workout} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>}\n\n\t\t\t\t\t{!workouts || workouts.length === 0 && <div class='col-12 mb-4 text-center pt-5 pb-5'>\n\t\t\t\t\t\t<h1 class='text-muted'><i class='fas fa-running' /></h1>\n\t\t\t\t\t\t<h5 class='text-muted font-weight-lighter'>\n\t\t\t\t\t\t\t<Text id='workouts.no-workouts' fields={{ month: MONTHS[month - 1], year }}>Ingen treningsturer registrert...</Text>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</div>}\n\t\t\t\t</div>\n\n\n\n\t\t\t\t{1 === 2 && <div class='row'>\n\t\t\t\t\t{workoutSummaryWeek && workoutSummaryWeek.length > 0 && <div class='col-12 mb-4'>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 px-0'>\n\t\t\t\t\t\t\t<h5 class='mt-4'><Text id='workout.index.workout-overview'>Treningsoversikt</Text></h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* {JSON.stringify(workoutSummaryWeek)} */}\n\t\t\t\t\t\t{workoutSummaryWeek && workoutSummaryWeek.reverse().map(summary => (\n\t\t\t\t\t\t\t<WorkoutSummary stores={this.props.stores} summary={summary} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>}\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Workouts;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\n@withText((props) => ({\n    week: <Text id='workout.graph.week' />,\n    distance: <Text id='workout.graph.distance' />,\n    ascend: <Text id='workout.graph.ascend' />,\n    plan: <Text id='workout.graph.plan' />,\n}))\n@observer\nclass WorkoutTable extends Component {\n    render() {\n        const { userStore } = this.props.stores;\n        const { isLoading, year } = this.props;\n        const {\n            user,\n\t\t} = userStore;\n        const { language = 'no' } = user;\n\t\tconst MONTHS = mu.getMonths(language);\n\n        const currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\t\tconst seasonStart = parseInt(year || (currentMonth < 6 ? currentYear - 1 : currentYear), 10);\n\n        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(year, monthNum) || {};\n        const seasonMonths = util.monthRange(`${seasonStart}-06-01`, `${seasonStart + 1}-05-31`);\n        const prevSeasonMonths = util.monthRange(`${seasonStart - 1}-06-01`, `${seasonStart}-05-31`);\n        const seasonWeeks = util.weekRange(`${seasonStart}-06-01`, `${seasonStart + 1}-05-31`);\n\n        const xTicksAll = seasonWeeks.map(wo => wo.week);\n        const parts = xTicksAll.length % 6;\n        const partSize = Math.floor(xTicksAll.length / parts);\n        const xTicks = [];\n        for (let i = 0, l = xTicksAll.length; i < l; i += partSize) {\n            xTicks.push(xTicksAll[i]);\n        }\n\n        return (\n            <>\n                <h5><Text id='workout.graph.title'>Treningsstatistikk</Text> {seasonStart} - {seasonStart + 1}</h5>\n                <div class='w-100 mt-3 mb-4'>\n                    {/* <xmp>graphWorkoutSummaryWeekDistanceCurrent: {JSON.stringify(graphWorkoutSummaryWeekDistanceCurrent, null, 4)}</xmp>\n                    <xmp>graphWorkoutSummaryWeekDistancePrev: {JSON.stringify(graphWorkoutSummaryWeekDistancePrev, null, 4)}</xmp> */}\n                    <small class='mb-4'><small>\n                        <table class='table table-sm font-weigth-lighter border-bottom'>\n                            <thead>\n                                <tr>\n                                    <th style='padding: .15rem;'><Text id='workout.graph.season'>Sesong</Text></th>\n                                    {seasonMonths.map(m => (\n                                        <th class='text-right' style='padding: .15rem;'><a href={`/workouts/month/${m.month}/${m.year}`}>{MONTHS[m.month - 1]}</a></th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th scope='row' style='padding: .15rem;'>{seasonStart - 1} - {seasonStart}</th>\n                                    {prevSeasonMonths.map(m => {\n                                        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(m.year, m.month) || {};\n                                        return (\n                                            <>\n                                                <td class='text-right' style='padding: .15rem;'>\n                                                    {/* <nobr>{summaryMonth.distance}</nobr><br /> */}\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month)}</nobr><br />\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month, 'elevation')}</nobr><br />\n                                                </td>\n                                            </>\n                                        );\n                                    })}\n                                    <td class='text-muted' style='padding: .15rem;'>\n                                        <nobr><i class='fas fa-road' /> km</nobr><br />\n                                        <nobr><i class='fas fa-mountain' /> m</nobr><br />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <th scope='row' style='padding: .15rem;'>{seasonStart} - {seasonStart + 1}</th>\n                                    {seasonMonths.map(m => {\n                                        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(m.year, m.month) || {};\n                                        return (\n                                            <>\n                                                <td class='text-right' style='padding: .15rem;'>\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month)}</nobr><br />\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month, 'elevation')}</nobr><br />\n                                                </td>\n                                            </>\n                                        );\n                                    })}\n                                    <td class='text-muted' style='padding: .15rem;'>\n                                        <nobr><i class='fas fa-road' /> km</nobr><br />\n                                        <nobr><i class='fas fa-mountain' /> m</nobr><br />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </small></small>\n\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WorkoutTable;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gaugeBackground\":\"gaugeBackground__1UGxt\",\"gauge\":\"gauge__2ZDxd\",\"success\":\"success__3UQxg\",\"primary\":\"primary__3pPV6\",\"secondary\":\"secondary__-Vrk_\",\"info\":\"info__3t5zs\",\"warning\":\"warning__1jHlR\",\"danger\":\"danger__BLVC9\",\"gaugeText\":\"gaugeText__1on-w\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nimport style from './style.css';\n\nconst initialState = {\n    mouseData: {},\n};\n\n@observer\nclass Gauge extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.svgRef = null;\n    }\n\n    render() {\n        const { radius = 50, percent = 0, color = 'success', total = '', completed = '', prefix = '' } = this.props;\n        const strokeWidth = radius * 0.3;\n        const innerRadius = radius - strokeWidth / 2;\n\n        const strokeWidthGauge = radius * 0.3;\n\n        const circumference = innerRadius * 2 * Math.PI;\n        const arc = circumference * (270 / 360);\n        const dashArray = `${arc} ${circumference}`;\n        const transform = `rotate(135, ${radius}, ${radius})`;\n\n        const percentNormalized = Math.min(Math.max(percent, 0), 100);\n        const offset = arc - (percentNormalized / 100) * arc;\n\n        const textSize = radius / 2.5;\n        const textSizeSmall = radius / 5;\n\n        return (\n            <>\n                <svg xmlns='http://www.w3.org/2000/svg' class={style.svg}\n                    // viewBox={`0 0 ${radius * 2} ${radius * 2}`}\n                    width={radius * 2}\n                    height={radius * 2}\n                    preserveAspectRatio='none'\n                    ref={c => this.svgRef = c}\n                >\n\n                    <circle\n                        class={`${style.gaugeBackground}`}\n                        cx={radius}\n                        cy={radius}\n                        r={innerRadius}\n                        strokeWidth={strokeWidth}\n                        strokeDasharray={dashArray}\n                        strokeLinecap='round'\n                        transform={transform}\n                    />\n                    \n                    <circle\n                        class={`${style[color]} ${style.gauge}`}\n                        cx={radius}\n                        cy={radius}\n                        r={innerRadius}\n                        stroke='url(#grad)'\n                        strokeDasharray={dashArray}\n                        strokeDashoffset={offset}\n                        strokeLinecap='round'\n                        strokeWidth={strokeWidthGauge}\n                        style={{\n                            transition: 'stroke-dashoffset 0.3s',\n                        }}\n                        transform={transform}\n                    />\n                     \n                    <text\n                        class={`${style.gaugeText} ${style[color]}`}\n                        x='50%'\n                        y='50%'\n                        dominant-baseline='middle'\n                        text-anchor='middle'\n                        font-size={textSize}\n                    >{percent} {prefix}</text>\n\n                    <text\n                        class={`${style.gaugeText} ${style[color]}`}\n                        x='50%'\n                        y='65%'\n                        dominant-baseline='middle'\n                        text-anchor='middle'\n                        font-size={textSizeSmall}\n                    >{completed}</text>\n\n                    <text\n                        class={`${style.gaugeText} ${style.secondary}`}\n                        x='50%'\n                        y='90%'\n                        dominant-baseline='middle'\n                        text-anchor='middle'\n                        font-size={textSizeSmall}\n                    >{total}</text>\n\n                </svg>\n            </>\n        );\n    }\n}\n\nexport default Gauge;\n"],"sourceRoot":""}