{"version":3,"sources":["webpack:///./routes/embed/top10.js","webpack:///./routes/embed/style.css","webpack:///./components/dog/scroller.js"],"names":["byBib","a","b","aHas","musher","bib","MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","initialState","isLoading","contentIsNotLoaded","reloadInSec","reloadLastEpoch","reloadIsActive","observer","Component","constructor","props","super","initComponent","Math","floor","Date","getTime","this","setState","tickReloadTimeer","state","updateTimer","now","clearTimeout","tick","setTimeout","componentDidMount","componentWillUnmount","render","reloadPercent","util","normalizeBetween","class","style","role","aria-valuenow","aria-valuemin","aria-valuemax","MusherInfo","toggleAdminInfo","e","stopPropagation","showAdminInfo","toggleInfo","showInfo","classid","email","onTeamClick","onDogClick","raceStore","userStore","stores","isAdmin","getMusherByBibId","getMusherByBibEmail","team","getTeamById","user","members","find","m","raceClass","getClassById","totals","getTotalsByTeamId","image","getImage","priority","shortname","displayNameShort","dotColor","getRankingColor","title","flag","firstname","lastname","sportsClub","public","onClick","id","href","uuidv4","name","markdown","replaceImages","description","images","markdownOpts","getMarkdownOptions","dogs","map","d","allDogs","distanceKm","length","format","elevation","secToHms","duration","rest","JSON","stringify","TvTop10","loadLiveRaceResults","async","teamIds","focusOnMushers","race","getRaceTrackerData","raceTrackerRace","getRaceTrackerActiveTeams","loadRaceResults","raceid","loadWorkoutSummary","getWorkoutSummaryActiveTeams","loadRace","appState","load","selectedClassIds","selectedClassId","toggleSelectedClassId","allTeamIds","classes","filter","currentClass","contestants","flat","loadTeams","join","liveRace","getAllClassesSortedBy","raceTrackerResults","getRacetrackerResults","reload","RELOAD_INTERVAL_IN_SEC","toggleFocusOnMusher","musherId","target","parentElement","dataset","musherid","handleMusherClick","closest","showModal","modalBib","toggleModal","inputRef","componentWillReceiveProps","nextProps","showTeam","showDog","modalEmail","position","limit","teams","language","lastAllowedChangeDate","endDate","setHours","getHours","data","line","lineData","raceTrackerMapLine","parseInt","Bib","contestant","sort","slice","teamid","back","hideTeam","dogid","hideDog","distance","idx","type","data-id","colspan","currentTeam","currentResults","normalizedDuration","isDone","totalWorkoutTimeUsedSec","data-bib","data-musherid","indexOf","nonstop","src","height","onUserClick","module","exports","DogScroller","scrollImages","scrollLeft","clientWidth","imageIdx","nearestInt","round","diff","abs","Number","isInteger","sortByName","dogA","dogB","size","onScroll","dogId","dog","onTouchstart","onTouchend","onTouchmove","className","showName","showPosition"],"mappings":"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","file":"89.chunk.e4e57.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport Markdown from 'preact-markdown';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport DogScroller from '../../components/dog/scroller';\nimport Overlay from '../../components/overlay/';\nimport TeamsPublicDetail from '../../routes/teams/publicDetail';\nimport DogPublicDetail from '../../routes/dogs/publicDetail';\n\nimport style from './style.css';\n\nconst initialState = {\n\tisLoading: false,\n\tcontentIsNotLoaded: true,\n\n\treloadInSec: null,\n\treloadLastEpoch: null,\n\treloadIsActive: false,\n};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\n\n\nfunction byBib(a, b) {\n    const aHas = typeof a.musher !== 'undefined';\n    const bHas = typeof b.musher !== 'undefined';\n    return (bHas - aHas) || (aHas === true && a.musher.bib - b.musher.bib) || 0;\n}\n\nfunction raceStatus(musher) {\n\tswitch (musher.raceStatus) {\n\t\tcase 'OK':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute rounded-lg' style='top: 10px; left: 0px;'><i class='fas fa-check text-success' /></span>\n\t\t\t</>);\n\t\tcase 'DNS':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNF':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DC':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-warning text-white text-center px-2 rounded-lg border' style='top: 5px; left: -150px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n\n\n@observer\nclass ReloadTimer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n\t\tthis.updateTimer = {};\n    }\n\n\tinitComponent = () => {\n\t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({\n\t\t\treloadIsActive: true,\n\t\t\treloadLastEpoch,\n\t\t}, () => this.tickReloadTimeer());\n\t}\n\n\ttickReloadTimeer() {\n\t\tconst { reloadIsActive, reloadLastEpoch } = this.state;\n        if (reloadIsActive) {\n\t\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\t\tconst reloadInSec = RELOAD_INTERVAL_IN_SEC - (now - reloadLastEpoch);\n\t\t\tthis.setState({ reloadInSec });\n\t\t\tclearTimeout(this.updateTimer.tick);\n\t\t\tthis.updateTimer.tick = setTimeout(() => this.tickReloadTimeer(), 1000);\n        }\n\t\treturn false;\n    }\n\n\tcomponentDidMount() {\n\t\tthis.initComponent();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\trender() {\n\t\tconst { reloadInSec } = this.state;\n\t\tconst reloadPercent = Math.floor(util.normalizeBetween(reloadInSec, 0, RELOAD_INTERVAL_IN_SEC, 0, 100))\n\n\t\treturn (<>\n\t\t\t<div class='progress fixed-top' style='height: 2px; z-index: 999999;'>\n\t\t\t\t<div class='progress-bar' role='progressbar' style={`width: ${reloadPercent}%;`} aria-valuenow={reloadPercent} aria-valuemin='0' aria-valuemax='100' />\n\t\t\t</div>\n\t\t</>);\n\t}\n}\n\n@observer\nclass MusherInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    toggleAdminInfo = (e) => {\n        e.stopPropagation();\n        const { showAdminInfo } = this.state;\n        this.setState({\n            showAdminInfo: !showAdminInfo,\n        });\n    }\n\n    toggleInfo = (e) => {\n        e.stopPropagation();\n        const { showInfo } = this.state;\n        this.setState({\n            showInfo: !showInfo,\n        });\n    }\n\n    render() {\n        const { showAdminInfo, showInfo } = this.state;\n        const { classid, bib, email, onTeamClick, onUserClick, onDogClick } = this.props;\n\n        const { raceStore, userStore } = this.props.stores;\n        const { isAdmin } = userStore;\n        const musher = bib ? raceStore.getMusherByBibId(bib) : raceStore.getMusherByBibEmail(email);\n        const team = raceStore.getTeamById(musher.team);\n        const user = team.members ? team.members.find(m => m.email === musher.email) : {};\n        const raceClass = raceStore.getClassById(classid);\n        const totals = raceStore.getTotalsByTeamId(musher.team);\n        const image = mu.getImage({ user, team, priority: 'user' });\n        const shortname = mu.displayNameShort(user) || mu.displayNameShort(musher);\n\n        const dotColor = mu.getRankingColor(musher.bib);\n\n        return (<>\n            <div class='d-flex position-relative'>\n                <div\n                    class={`position-relative text-center border rounded-circle imageRounded imageRoundedMedium`}\n                    style={image ? `background-image: url(\"${image}\"); background-size: cover;` : ''}\n                >\n                    {!image && <div class='text-muted' style='font-size: 25px; padding-top: 5px;'>{shortname}</div>}\n                    <div\n                        class={`rounded-pill-both px-2 text-center position-absolute ${dotColor ? '' : 'bg-secondary'} font-weight-bold`}\n                        style={`bottom: -20px; right: 0; ${dotColor ? `background-color: ${dotColor};` : ''}`}\n                    >\n                        {musher.bib && musher.bib !== 'n/a' && <>{musher.bib}</>}\n                    </div>\n                </div>\n                <div class='flex-grow-1 pl-3 text-overflow mb-3' style='line-height: 1.2em;'>\n                    <h6 class='font-weight-light mb-0'>{raceClass.title}</h6>\n                    <h3 class='mb-0'>\n                        {musher.flag} {musher.firstname} {musher.lastname}\n                    </h3>\n                    <h6 class='mb-0'>{musher.sportsClub}</h6>\n                </div>\n            </div>\n\n\n            {team.public > 0 && <>\n                {showInfo ? <>\n                    <button class='btn btn-link float-right' onClick={this.toggleInfo}>\n                        <i class='fas fa-angle-up' /> <Text id='races.hide-info'>Hide info</Text>\n                    </button>\n                </> : <>\n                    <button class='btn btn-link float-right' onClick={this.toggleInfo}>\n                        <i class='fas fa-angle-down' /> <Text id='races.show-info'>Show info</Text>\n                    </button>\n                </>}\n\n                <h3>\n                    {team.public ? <>\n                        <a href={`/teams/public/${team.uuidv4}`} onClick={(e) => onTeamClick(e, team.uuidv4)}>\n                            {team.name}\n                        </a>\n                    </> : <>\n                        {team.name}\n                    </>}\n                </h3>\n                {showInfo && <>\n                    <Markdown markdown={mu.replaceImages(team.description, team.images)} markdownOpts={mu.getMarkdownOptions()} />\n                </>}\n                {team.dogs && <div class='w-100 container-fluid'>\n                    <div class='row pt-2'>\n                        <DogScroller stores={this.props.stores} dogs={team.dogs.map(d => d.id)} allDogs={team.dogs} onDogClick={onDogClick} />\n                    </div>\n                </div>}\n            </>}\n\n            {totals && totals.distanceKm && <>\n                <div class='table-responsive-lg'>\n                    <table class='table table-borderless'>\n                        <tbody>\n                            <tr>\n                                <td style='width: 5%;'><i class='fas fa-dog' /></td>\n                                <td style='width: 60%'><Text id='races.dogs'>Dogs</Text></td>\n                                <td style='width: 5%;'>&nbsp;</td>\n                                <td class='text-right' style='width: 30%;'>{team.dogs.length}</td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-road' /></td>\n                                <td><Text id='races.distance'>Distance</Text></td>\n                                <td>&nbsp;</td>\n                                <td class='text-right'><nobr>{totals.distanceKm ? `${util.format(totals.distanceKm, 1)} km` : 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-mountain' /></td>\n                                <td><Text id='races.ascend'>Ascending</Text></td>\n                                <td>&nbsp;</td>\n                                <td class='text-right'><nobr>{totals.elevation ? `${util.format(totals.elevation, 0)} m` : 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-stopwatch' /></td>\n                                <td><Text id='races.race-time'>Racetime</Text></td>\n                                <td><i class='fas fa-clock' /></td>\n                                <td class='text-right'><nobr>{util.secToHms(totals.duration) || 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-bed' /></td>\n                                <td><Text id='races.rest-time'>Rest</Text></td>\n                                <td><i class='fas fa-clock' /></td>\n                                <td class='text-right'><nobr>{util.secToHms(totals.rest) || 'n/a'}</nobr></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </>}\n\n\n            {isAdmin && <div style='max-height: 200px; max-width: 70vw; overflow: auto;'>\n                <button class='btn btn-link btn-block' onClick={this.toggleAdminInfo}>\n                    Toggle admin info\n                </button>\n                {showAdminInfo && <>\n                    <small>\n                        <xmp>\n                            {JSON.stringify(musher, null, 4)}\n                            {JSON.stringify(user, null, 4)}\n                            {JSON.stringify(team, null, 4)}\n                            {JSON.stringify(totals, null, 4)}\n\n                            {/* {\n                                \"firstDate\": \"2021-03-19 11:59\",\n                                \"lastDate\": \"2021-03-20 17:13\",\n                                \"firstEpoch\": 1616151540000,\n                                \"lastEpoch\": 1616256780000,\n                                \"now\": {\n                                    \"$numberDecimal\": \"1642675856939\"\n                                },\n                                \"totalTimeUsedSec\": 26524316,\n                                \"totalWorkoutTimeUsedSec\": 130895,\n                                \"lastDuration\": 25655,\n                                \"team\": 84,\n                                \"count\": 4,\n                                \"distanceKm\": 301.5906237951766,\n                                \"elevation\": 3610.019075719202,\n                                \"duration\": 77343,\n                                \"rest\": 1332,\n                                \"speedAvg\": 8.294634979660305,\n                                \"totalRest\": 54884,\n                                \"loadIndex\": 1080.75,\n                                \"totalKcalRelated\": 544.535560976128,\n                                \"weightedTotalKcal\": 12303.171406247127,\n                                \"flatTotalKcal\": 9424.70699359927,\n                                \"firstGpxStartEpoch\": null,\n                                \"lastGpxStartEpoch\": null\n                            } */}\n\n                        </xmp>\n                    </small>\n                </>}\n            </div>}\n        </>);\n    }\n}\n\n@observer\nclass TvTop10 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.inputRef = {};\n        this.updateTimer = {};\n    }\n\n    // async loadRace(props = this.props) {\n\t// \tthis.setState({ isLoading: true });\n\t// \tconst { raceStore } = props.stores;\n\t// \tconst { raceid } = props;\n    //     await raceStore.load(raceid);\n    //     const { race } = raceStore;\n\t// \tconst allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n    //         return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n\t// \t}).flat();\n\t// \tif (allTeamIds.length > 0 && raceid) {\n\t// \t\tawait raceStore.loadTeams(allTeamIds.join(','));\n\t// \t\tawait raceStore.loadWorkoutSummary(allTeamIds.join(','), raceid);\n\t// \t\traceStore.getWorkoutSummaryActiveTeams();\n\t// \t}\n\t// \traceStore.getAllClassesSortedBy();\n\n\t// \t// Set reload timer\n\t// \tclearTimeout(this.updateTimer.reload);\n\t// \tthis.updateTimer.reload = setTimeout(async () => {\n\t// \t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t// \t\tthis.setState({ reloadLastEpoch });\n\t// \t\tthis.loadRace();\n\t// \t}, RELOAD_INTERVAL_IN_SEC * 1000);\n\n\t// \tthis.setState({\n\t// \t\tisLoading: false,\n\t// \t\tcontentIsNotLoaded: false,\n\t// \t});\n\t// }\n\n    loadLiveRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { race } = raceStore;\n        await raceStore.getRaceTrackerData(race.raceTrackerRace);\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        this.setState({ isLoading: true });\n        const { raceStore, appState } = props.stores;\n        const { raceid, classid } = props;\n        await raceStore.load(raceid);\n        const { race } = raceStore;\n        const { focusOnMushers } = appState;\n\n        const { selectedClassIds = [] } = appState;\n        const selectedClassId = classid || selectedClassIds[0];\n\n        if (classid) {\n            appState.toggleSelectedClassId(classid, true);\n        }\n\n        const allTeamIds = race.classes\n            .filter(currentClass => currentClass.id === selectedClassId)\n            .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n            .map((currentClass) => {\n                return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n            })\n            .flat();\n        if (allTeamIds.length > 0) {\n            await raceStore.loadTeams(allTeamIds.join(','));\n        }\n        if (race.liveRace > 0) {\n            await this.loadLiveRaceResults(this.props, allTeamIds, focusOnMushers);\n\n        } else {\n            await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n        }\n\n        // const allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n        //     return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n        // }).flat();\n\n        // if (allTeamIds.length > 0) {\n        //     await raceStore.loadTeams(allTeamIds.join(','));\n        //     if (race.liveRace > 0) {\n        //         await this.loadLiveRaceResults(props, allTeamIds, focusOnMushers);\n\n        //     } else {\n        //         await this.loadRaceResults(props, allTeamIds, focusOnMushers);\n        //     }\n        // }\n        raceStore.getAllClassesSortedBy();\n\n        const currentClass = raceStore.getClassById(selectedClassId);\n        if (currentClass && currentClass.raceTrackerResults) {\n            raceStore.getRacetrackerResults(currentClass.raceTrackerResults);\n        }\n\n        // Set reload timer\n        clearTimeout(this.updateTimer.reload);\n        this.updateTimer.reload = setTimeout(async () => {\n            const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n            this.setState({ reloadLastEpoch });\n            this.loadRace(props);\n        }, RELOAD_INTERVAL_IN_SEC * 1000);\n\n        this.setState({ isLoading: false });\n    }\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n    handleMusherClick = (e) => {\n        const { bib } = e.target.closest('tr').dataset;\n        const { showModal } = this.state;\n        this.setState({\n            showModal: !showModal,\n            modalBib: bib,\n        });\n    }\n\n    toggleModal = () => {\n        const { showModal } = this.state;\n        this.setState({\n            showModal: !showModal,\n        });\n    }\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n    render() {\n\t\tconst { contentIsNotLoaded, lockMessage,\n            showTeam, showDog,\n            showModal, modalTitle, modalBib, modalEmail,\n        } = this.state;\n\t\tconst { userStore, raceStore, appState } = this.props.stores;\n        const { classid, position = 'right', limit = 100 } = this.props;\n\t\tconst { user = {}, teams = [], isAdmin } = userStore;\n        const { language = 'en' } = user;\n\n        const { darkmode, displayDetails, editUserDetails, selectedClassIds = [], focusOnMushers = [] } = appState;\n\n\t\tconst { race = {}, teamList, classes = [] } = raceStore;\n\t\tconst { activeTeams, waypoints, zoomToMarkers, raceTrackerResults } = raceStore;\n\n\t\tconst lastAllowedChangeDate = new Date(race.endDate);\n\t\tlastAllowedChangeDate.setHours(lastAllowedChangeDate.getHours() + 2);\n\n        const currentClass = race.classes ? race.classes.find(e => e.id === classid) || {} : {};\n\n        const musher = modalBib ? raceStore.getMusherByBibId(modalBib) : raceStore.getMusherByBibEmail(modalEmail);\n        const team = raceStore.getTeamById(musher.team);\n\n        let contestants = [];\n        if (raceTrackerResults && raceTrackerResults.data) {\n            contestants = raceTrackerResults.data.map((line) => {\n                const lineData = raceStore.raceTrackerMapLine(line);\n                const bib = parseInt(lineData.Bib, 10);\n                let contestant = {};\n                if (classes && classes[currentClass.id].contestants) {\n                    contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n                }\n                return contestant;\n            });\n        } else if (classes[currentClass.id] && classes[currentClass.id].contestants) {\n            contestants = classes[currentClass.id].contestants.sort(byBib).slice(0, limit).map(contestant => contestant);\n        }\n\n        return (<>\n            {showTeam && <Overlay>\n                <TeamsPublicDetail stores={this.props.stores} teamid={showTeam} marginTop={'0px;'} marginBottom={'0px;'} back={this.hideTeam} hideTeam={this.hideTeam} />\n            </Overlay>}\n            {showDog && <Overlay>\n                <DogPublicDetail stores={this.props.stores} dogid={showDog} marginTop={'0px;'} marginBottom={'0px;'} back={this.hideDog} dogs={team.dogs} />\n            </Overlay>}\n\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; height: calc(100% - ${MARGIN_BOTTOM} - ${MARGIN_TOP});`}>\n                <div class='row'>\n                    <div class='col-12 px-0 position-relative'\n                        style='font-size: 1.5em; line-height: 1.0em;'\n                    >\n                        {/* <div\n                            class='bg-light rounded-lg mr-5 p-4'\n                            style='font-size: 2.0em; line-height: 1.0em;'\n                        > */}\n\n                            {/* <div\n                                class=' text-center py-3 mb-3'\n                                style='background: linear-gradient(#b0b0b0, #e0e0e0, #808080); color: #000000;'\n                            >\n                                <strong>{race.title}</strong>\n                            </div> */}\n\n                            <div class='w-100 overflow-hidden'>\n                                <div\n                                    class='d-flex flex-row flex-nowrap pb-2 px-1'\n                                    style='overflow: auto; scroll-snap-type: x mandatory;'\n                                >\n                                    {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                                        <div class='col px-0 pt-2'>\n                                            <a\n                                                type='button'\n                                                class={`btn btn-block ${idx === 0 && 'rounded-pill-left'} ${idx === race.classes.length - 1 && 'rounded-pill-right'} rounded-none ${currentClass.id === classid ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n                                                style='text-overflow: ellipsis; overflow: hidden;'\n                                                data-id={currentClass.id}\n                                                href={`/embed/top10/${race.id}/${currentClass.id}`}\n                                            >\n                                                {currentClass.title}\n                                            </a>\n                                        </div>\n                                    </>)}\n                                </div>\n                            </div>\n\n                            {/* {JSON.stringify(raceTrackerResults.data)} */}\n                            {/* {JSON.stringify(contestants)} */}\n\n                            <table class='table table-sm table-borderless rounded-lg mb-0'>\n                                <thead>\n                                    <tr>\n                                        <td\n                                            colspan='2'\n                                            class='px-4 py-4 overflow-hidden'\n                                            style='background-color: #FB4114; color: #ffffff; border-radius: 10px 0 0 0; font-size: 1.4em;'\n                                        >\n                                            <nobr>{currentClass.title}</nobr>\n                                        </td>\n                                        <td\n                                            class='px-3 text-center py-4 overflow-hidden'\n                                            style='background-color: #FB4114; color: #ffffff; border-radius: 0 10px 0 0 ; font-size: 1.1em;'\n                                        >\n                                            Time\n                                        </td>\n                                    </tr>\n                                </thead>\n                                <tbody\n                                    style='\n                                        background-color: #1C1F4C;\n                                        background-image: url(\"https://themusher.app/assets/tv-single-background.jpg\");\n                                        background-size: cover !important;\n                                        background-position: 0 0;\n                                    '>\n                                    {contestants && contestants.map((contestant, idx) => {\n                                    // {raceTrackerResults && raceTrackerResults.data && raceTrackerResults.data.map((line, idx) => {\n                                    //     const lineData = raceStore.raceTrackerMapLine(line);\n                                    //     const bib = parseInt(lineData.Bib, 10);\n                                    //     let contestant = {};\n                                    //     if (classes && classes[currentClass.id].contestants) {\n                                    //         contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n                                    //     }\n                                    // {classes[currentClass.id] && classes[currentClass.id].contestants && classes[currentClass.id].contestants.slice(0, limit).map((contestant, idx) => {\n\n                                        const { musher = {}, currentTeam = {}, currentStages, currentResults = {}, completed, duration,\n                                            normalizedDuration, weightedNormalizedDuration, totalKcalRelated, weightedTotalKcal,\n                                            flatTotalKcal, percentHarder, loadIndex, raceDistance, isDone, normalizedKcal, normalizedFlatKcal,\n                                            finishedDate, totalWorkoutTimeUsedSec,\n                                        } = contestant;\n\n                                        const totals = raceStore.getTotalsByTeamId(currentTeam.id);\n\n                                        return (<>\n                                            <tr style='border-bottom: 1px solid #7B312F;'\n                                                data-bib={musher.bib}\n                                                onClick={this.handleMusherClick}\n                                            >\n                                                <td\n                                                    class='text-center align-middle ml-0 pl-0'\n                                                    style='width: 50px; color: #ffffff; font-size: 1.2em; line-height: 1.2em;'\n                                                >\n                                                    <div class='d-flex justify-content-start'>\n                                                        <div class='pl-3 pr-2 w-100 clearfix rounded-pill-right' style={`background-color: ${mu.getRankingColor(idx + 1)}`}>\n                                                            {musher.bib || idx + 1}\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                                <td\n                                                    class='px-3 py-3'\n                                                    style='color: #ffffff; font-size: 1.2em;'\n                                                >\n                                                    <div class='text-overflow' style='line-height: 1.1em;'>\n                                                        <span class='float-right' onClick={this.toggleFocusOnMusher} data-musherid={musher.id}>{focusOnMushers.indexOf(musher.id) > -1 ? <i class='fas fa-star text-warning' /> : <i class='far fa-star' />}</span>\n                                                        <nobr>\n                                                            {musher.flag} {musher.firstname} {musher.lastname}<br />\n                                                            {/* <small class='text-muted'>{musher.sportsClub}</small><br /> */}\n                                                        </nobr>\n                                                    </div>\n                                                </td>\n                                                <td\n                                                    class='text-center align-middle'\n                                                    style='width: 150px; color: #ffffff; font-size: 1.2em;'\n                                                >\n\n                                                    {race.nonstop ? <>\n                                                        <nobr>{util.secToHms(totalWorkoutTimeUsedSec) || 'n/a'}</nobr>\n                                                        {/* <nobr><i style='width: 20px;' class='fas fa-moon text-muted' /> {util.secToHms(totals.totalRest) || 'n/a'}</nobr> */}\n                                                    </> : <>\n                                                        {isDone === 1 ? <>\n                                                            <nobr>{util.secToHms(normalizedDuration) || 'n/a'}</nobr>\n                                                        </> : <>\n                                                            <nobr>{util.secToHms(currentResults.duration - currentResults.rest) || 'n/a'}</nobr>\n                                                        </>}\n\n                                                        {/* <nobr><i style='width: 20px;' class='fas fa-clock text-muted' /> {util.secToHms(currentResults.duration) || 'n/a'}</nobr> */}\n                                                        {/* <nobr><i style='width: 20px;' class='fas fa-moon text-muted' /> {util.secToHms(currentResults.rest) || 'n/a'}</nobr> */}\n                                                        {/* <nobr><i style='width: 20px;' class='fas fa-running text-muted' /> {util.secToHms(currentResults.duration - currentResults.rest) || 'n/a'}</nobr><br /> */}\n                                                        {/* {isDone === 1 && <><nobr class='font-weight-bold'><span class='font-weight-lighter text-muted'>Normalized to race distance:</span> <i style='width: 20px;' class='fas fa-clock text-muted' /> {util.secToHms(normalizedDuration) || 'n/a'}</nobr><br /></>} */}\n                                                        {/* {isDone === 1 && <><nobr class='font-weight-bold'><span class='font-weight-lighter text-muted'>Normalized:</span> <i style='width: 20px;' class='fas fa-clock text-muted' /> {util.secToHms(weightedNormalizedDuration) || 'n/a'}</nobr><br /></>} */}\n                                                    </>}\n                                                    {/* {raceStatus(musher)} */}\n                                                </td>\n                                            </tr>\n                                        </>);\n                                    })}\n                                    {/* <tr>\n                                        <td\n                                            colspan='3'\n                                            class='text-center'\n                                        >\n                                            <img src='https://themusher.app/assets/logo-qpaws-dark.png' height='70' />\n                                        </td>\n                                    </tr> */}\n                                </tbody>\n                                <tfoot>\n                                    <tr>\n                                        <td\n                                            colspan='3'\n                                            class='px-5 py-4 text-center overflow-hidden'\n                                            style='background-color: #FB4114; color: #ffffff; border-radius: 0 0 10px 10px; font-size: 1.1em;'\n                                        >\n                                            <nobr class='mr-4'>QPaws app</nobr>\n\n                                            <img src='https://themusher.app/assets/appstore-download.png' height='40' class='ml-5 mr-1' />\n                                            <img src='https://themusher.app/assets/playstore-download.png' height='40' class='mx-1' />\n\n                                        </td>\n                                    </tr>\n                                </tfoot>\n                            </table>\n\n                        {/* </div> */}\n\n\n                    </div>\n                        {showModal && <>\n                            <div\n                                class='position-absolute'\n                                style='\n                                    top: 0px;\n                                    left: 0px;\n                                    z-index: 9999;\n                                    width: 100%;\n                                    height: 100%;\n                                    background-color: rgba(0,0,0,0.6);\n                                '\n                                onClick={this.toggleModal}\n                            >\n                                <div\n                                    class='position-absolute rounded rounded-lg pt-3 pb-3 px-2 text-white'\n                                    style='\n                                        top: 50%;\n                                        left: 50%;\n                                        transform: translate(-50%, -50%);\n                                        width: 90%;\n                                        max-width: 800px;\n                                        max-height: 600px;\n                                        overflow: auto;\n                                        background-color: #1C1F4C;\n                                        background-image: url(\"https://themusher.app/assets/tv-single-background.jpg\");\n                                        background-size: cover !important;\n                                        background-position: 0 0;\n                                        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n                                    '\n                                >\n                                    <button class='btn btn-primary btn-sm float-right position-absolute' style='top: 5px; right: 5px;'>\n                                        <i class='fas fa-times' />\n                                    </button>\n\n                                    <MusherInfo\n                                        stores={this.props.stores}\n                                        bib={modalBib}\n                                        classid={classid}\n                                        onTeamClick={this.onTeamClick}\n                                        onUserClick={this.onUserClick}\n                                        onDogClick={this.onDogClick}\n                                    />\n                                </div>\n                            </div>\n                        </>}\n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default TvTop10;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__4nHll\",\"hoverElement\":\"hoverElement__rkj2s\",\"hoverelementhide\":\"hoverelementhide__10QkM\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport DogSimplePublic from './simplePublic';\n\n@observer\nclass DogScroller extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageIdx: 0,\n        };\n    }\n\n    scrollImages = (e) => {\n        const { dogs } = this.props;\n\n        const { scrollLeft, scrollWidth, clientWidth } = e.target;\n        const imageStep = clientWidth;\n        const imageIdx = scrollLeft / imageStep;\n        // console.log({ e, imageStep, imageIdx, scrollLeft, scrollWidth, clientWidth });\n\n        const nearestInt = Math.round(imageIdx);\n        const diff = Math.abs(nearestInt - imageIdx);\n        // console.log({ nearestInt, diff });\n        if (Number.isInteger(imageIdx) || diff < 0.1) {\n            this.setState({\n                imageIdx: nearestInt,\n            });\n        }\n    }\n\n    sortByName = (a, b) => {\n        const { allDogs = [] } = this.props;\n        const dogA = allDogs.find(e => e.id === a);\n        const dogB = allDogs.find(e => e.id === b);\n        if (dogA && dogB) {\n            if (dogA.name > dogB.name) {\n                return 1;\n            }\n        }\n        return -1;\n    }\n\n    render() {\n        const { imageIdx } = this.state;\n        const { dogs, allDogs = [], size = 'medium', onDogClick = () => {} } = this.props;\n\n        return (\n            <div class='w-100'>\n                <div\n                    class='d-flex flex-row flex-nowrap no-scrollbar'\n                    style='overflow: auto; scroll-snap-type: x mandatory;'\n                    onScroll={this.scrollImages}\n                >\n                    {dogs && dogs.sort(this.sortByName).map((dogId, idx) => {\n                        const dog = allDogs.find(e => e.id === dogId);\n                        if (!dog) {\n                            return '';\n                        }\n                        return (\n                            <div class='col clearfix position-relative p-0 mx-2'>\n                                <div\n                                    class={`w-100 h-100 text-center rounded-lg imageContainer d-flex justify-content-center align-items-center`}\n                                    style={`\n                                        flex-wrap: wrap;\n                                        overflow-y: hidden;\n                                    `}\n                                    onTouchstart={(e) => { e.stopPropagation(); }}\n                                    onTouchend={(e) => { e.stopPropagation(); }}\n                                    onTouchmove={(e) => { e.stopPropagation(); }}\n                                >\n                                    <DogSimplePublic\n                                        stores={this.props.stores}\n                                        dog={dog}\n                                        dogs={allDogs.filter(d => dogs.indexOf(d.id) > -1).sort((a, b) => a.name > b.name ? 1 : -1)}\n                                        className='mx-auto'\n                                        showName={true}\n                                        showPosition={false}\n                                        size={size}\n                                        onDogClick={onDogClick} \n                                    />\n                                    {/* <xmp>{JSON.stringify(img, null, 4)}</xmp> */}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DogScroller;\n"],"sourceRoot":""}