{"version":3,"sources":["webpack:///./routes/embed/style.css","webpack:///./routes/embed/agreement.js"],"names":["module","exports","byBib","a","b","aHas","musher","bib","MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","initialState","isLoading","contentIsNotLoaded","reloadInSec","reloadLastEpoch","reloadIsActive","TvTop10","observer","props","initComponent","Math","floor","Date","getTime","setState","tickReloadTimeer","state","updateTimer","this","now","clearTimeout","tick","setTimeout","componentDidMount","componentWillUnmount","render","reloadPercent","util","normalizeBetween","class","style","role","aria-valuenow","aria-valuemin","aria-valuemax","Component","toggleAdminInfo","e","stopPropagation","showAdminInfo","toggleInfo","showInfo","classid","email","onTeamClick","onDogClick","stores","raceStore","isAdmin","userStore","getMusherByBibId","getMusherByBibEmail","team","getTeamById","user","members","find","m","raceClass","getClassById","totals","getTotalsByTeamId","image","getImage","priority","shortname","displayNameShort","dotColor","getRankingColor","title","flag","firstname","lastname","sportsClub","public","onClick","id","href","uuidv4","name","markdown","replaceImages","description","images","markdownOpts","getMarkdownOptions","dogs","map","d","allDogs","distanceKm","length","format","elevation","secToHms","duration","rest","JSON","stringify","loadLiveRaceResults","teamIds","focusOnMushers","getRaceTrackerData","race","raceTrackerRace","getRaceTrackerActiveTeams","loadRaceResults","loadWorkoutSummary","raceid","getWorkoutSummaryActiveTeams","loadRace","selectedClassId","allTeamIds","currentClass","appState","load","selectedClassIds","toggleSelectedClassId","classes","filter","contestants","flat","loadTeams","join","getAllClassesSortedBy","raceTrackerResults","getRacetrackerResults","reload","RELOAD_INTERVAL_IN_SEC","liveRace","toggleFocusOnMusher","target","parentElement","dataset","musherid","handleMusherClick","closest","showModal","modalBib","toggleModal","inputRef","componentWillReceiveProps","nextProps","modalEmail","limit","lastAllowedChangeDate","endDate","setHours","getHours","data","line","lineData","raceTrackerMapLine","parseInt","Bib","contestant","sort","slice","distance","idx","type","data-id","colspan","currentTeam","cellphone","address","postalcode","postalplace","country","declaration","isoDate","declarationDate"],"mappings":"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","file":"88.chunk.c506e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__4nHll\",\"hoverElement\":\"hoverElement__rkj2s\",\"hoverelementhide\":\"hoverelementhide__10QkM\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport Markdown from 'preact-markdown';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport DogScroller from '../../components/dog/scroller';\nimport Overlay from '../../components/overlay/';\nimport TeamsPublicDetail from '../../routes/teams/publicDetail';\nimport DogPublicDetail from '../../routes/dogs/publicDetail';\n\nimport style from './style.css';\n\nconst initialState = {\n\tisLoading: false,\n\tcontentIsNotLoaded: true,\n\n\treloadInSec: null,\n\treloadLastEpoch: null,\n\treloadIsActive: false,\n};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\n\n\nfunction byBib(a, b) {\n    const aHas = typeof a.musher !== 'undefined';\n    const bHas = typeof b.musher !== 'undefined';\n    return (bHas - aHas) || (aHas === true && a.musher.bib - b.musher.bib) || 0;\n}\n\nfunction raceStatus(musher) {\n\tswitch (musher.raceStatus) {\n\t\tcase 'OK':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute rounded-lg' style='top: 10px; left: 0px;'><i class='fas fa-check text-success' /></span>\n\t\t\t</>);\n\t\tcase 'DNS':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNF':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DC':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-warning text-white text-center px-2 rounded-lg border' style='top: 5px; left: -150px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n\n\n@observer\nclass ReloadTimer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n\t\tthis.updateTimer = {};\n    }\n\n\tinitComponent = () => {\n\t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({\n\t\t\treloadIsActive: true,\n\t\t\treloadLastEpoch,\n\t\t}, () => this.tickReloadTimeer());\n\t}\n\n\ttickReloadTimeer() {\n\t\tconst { reloadIsActive, reloadLastEpoch } = this.state;\n        if (reloadIsActive) {\n\t\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\t\tconst reloadInSec = RELOAD_INTERVAL_IN_SEC - (now - reloadLastEpoch);\n\t\t\tthis.setState({ reloadInSec });\n\t\t\tclearTimeout(this.updateTimer.tick);\n\t\t\tthis.updateTimer.tick = setTimeout(() => this.tickReloadTimeer(), 1000);\n        }\n\t\treturn false;\n    }\n\n\tcomponentDidMount() {\n\t\tthis.initComponent();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\trender() {\n\t\tconst { reloadInSec } = this.state;\n\t\tconst reloadPercent = Math.floor(util.normalizeBetween(reloadInSec, 0, RELOAD_INTERVAL_IN_SEC, 0, 100))\n\n\t\treturn (<>\n\t\t\t<div class='progress fixed-top' style='height: 2px; z-index: 999999;'>\n\t\t\t\t<div class='progress-bar' role='progressbar' style={`width: ${reloadPercent}%;`} aria-valuenow={reloadPercent} aria-valuemin='0' aria-valuemax='100' />\n\t\t\t</div>\n\t\t</>);\n\t}\n}\n\n@observer\nclass MusherInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    toggleAdminInfo = (e) => {\n        e.stopPropagation();\n        const { showAdminInfo } = this.state;\n        this.setState({\n            showAdminInfo: !showAdminInfo,\n        });\n    }\n\n    toggleInfo = (e) => {\n        e.stopPropagation();\n        const { showInfo } = this.state;\n        this.setState({\n            showInfo: !showInfo,\n        });\n    }\n\n    render() {\n        const { showAdminInfo, showInfo } = this.state;\n        const { classid, bib, email, onTeamClick, onUserClick, onDogClick } = this.props;\n\n        const { raceStore, userStore } = this.props.stores;\n        const { isAdmin } = userStore;\n        const musher = bib ? raceStore.getMusherByBibId(bib) : raceStore.getMusherByBibEmail(email);\n        const team = raceStore.getTeamById(musher.team);\n        const user = team.members ? team.members.find(m => m.email === musher.email) : {};\n        const raceClass = raceStore.getClassById(classid);\n        const totals = raceStore.getTotalsByTeamId(musher.team);\n        const image = mu.getImage({ user, team, priority: 'user' });\n        const shortname = mu.displayNameShort(user) || mu.displayNameShort(musher);\n\n        const dotColor = mu.getRankingColor(musher.bib);\n\n        return (<>\n            <div class='d-flex position-relative'>\n                <div\n                    class={`position-relative text-center border rounded-circle imageRounded imageRoundedMedium`}\n                    style={image ? `background-image: url(\"${image}\"); background-size: cover;` : ''}\n                >\n                    {!image && <div class='text-muted' style='font-size: 25px; padding-top: 5px;'>{shortname}</div>}\n                    <div\n                        class={`rounded-pill-both px-2 text-center position-absolute ${dotColor ? '' : 'bg-secondary'} font-weight-bold`}\n                        style={`bottom: -20px; right: 0; ${dotColor ? `background-color: ${dotColor};` : ''}`}\n                    >\n                        {musher.bib && musher.bib !== 'n/a' && <>{musher.bib}</>}\n                    </div>\n                </div>\n                <div class='flex-grow-1 pl-3 text-overflow mb-3' style='line-height: 1.2em;'>\n                    <h6 class='font-weight-light mb-0'>{raceClass.title}</h6>\n                    <h3 class='mb-0'>\n                        {musher.flag} {musher.firstname} {musher.lastname}\n                    </h3>\n                    <h6 class='mb-0'>{musher.sportsClub}</h6>\n                </div>\n            </div>\n\n\n            {team.public > 0 && <>\n                {showInfo ? <>\n                    <button class='btn btn-link float-right' onClick={this.toggleInfo}>\n                        <i class='fas fa-angle-up' /> <Text id='races.hide-info'>Hide info</Text>\n                    </button>\n                </> : <>\n                    <button class='btn btn-link float-right' onClick={this.toggleInfo}>\n                        <i class='fas fa-angle-down' /> <Text id='races.show-info'>Show info</Text>\n                    </button>\n                </>}\n\n                <h3>\n                    {team.public ? <>\n                        <a href={`/teams/public/${team.uuidv4}`} onClick={(e) => onTeamClick(e, team.uuidv4)}>\n                            {team.name}\n                        </a>\n                    </> : <>\n                        {team.name}\n                    </>}\n                </h3>\n                {showInfo && <>\n                    <Markdown markdown={mu.replaceImages(team.description, team.images)} markdownOpts={mu.getMarkdownOptions()} />\n                </>}\n                {team.dogs && <div class='w-100 container-fluid'>\n                    <div class='row pt-2'>\n                        <DogScroller stores={this.props.stores} dogs={team.dogs.map(d => d.id)} allDogs={team.dogs} onDogClick={onDogClick} />\n                    </div>\n                </div>}\n            </>}\n\n            {totals && totals.distanceKm && <>\n                <div class='table-responsive-lg'>\n                    <table class='table table-borderless'>\n                        <tbody>\n                            <tr>\n                                <td style='width: 5%;'><i class='fas fa-dog' /></td>\n                                <td style='width: 60%'><Text id='races.dogs'>Dogs</Text></td>\n                                <td style='width: 5%;'>&nbsp;</td>\n                                <td class='text-right' style='width: 30%;'>{team.dogs.length}</td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-road' /></td>\n                                <td><Text id='races.distance'>Distance</Text></td>\n                                <td>&nbsp;</td>\n                                <td class='text-right'><nobr>{totals.distanceKm ? `${util.format(totals.distanceKm, 1)} km` : 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-mountain' /></td>\n                                <td><Text id='races.ascend'>Ascending</Text></td>\n                                <td>&nbsp;</td>\n                                <td class='text-right'><nobr>{totals.elevation ? `${util.format(totals.elevation, 0)} m` : 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-stopwatch' /></td>\n                                <td><Text id='races.race-time'>Racetime</Text></td>\n                                <td><i class='fas fa-clock' /></td>\n                                <td class='text-right'><nobr>{util.secToHms(totals.duration) || 'n/a'}</nobr></td>\n                            </tr>\n                            <tr>\n                                <td><i class='fas fa-bed' /></td>\n                                <td><Text id='races.rest-time'>Rest</Text></td>\n                                <td><i class='fas fa-clock' /></td>\n                                <td class='text-right'><nobr>{util.secToHms(totals.rest) || 'n/a'}</nobr></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </>}\n\n\n            {isAdmin && <div style='max-height: 200px; max-width: 70vw; overflow: auto;'>\n                <button class='btn btn-link btn-block' onClick={this.toggleAdminInfo}>\n                    Toggle admin info\n                </button>\n                {showAdminInfo && <>\n                    <small>\n                        <xmp>\n                            {JSON.stringify(musher, null, 4)}\n                            {JSON.stringify(user, null, 4)}\n                            {JSON.stringify(team, null, 4)}\n                            {JSON.stringify(totals, null, 4)}\n\n                            {/* {\n                                \"firstDate\": \"2021-03-19 11:59\",\n                                \"lastDate\": \"2021-03-20 17:13\",\n                                \"firstEpoch\": 1616151540000,\n                                \"lastEpoch\": 1616256780000,\n                                \"now\": {\n                                    \"$numberDecimal\": \"1642675856939\"\n                                },\n                                \"totalTimeUsedSec\": 26524316,\n                                \"totalWorkoutTimeUsedSec\": 130895,\n                                \"lastDuration\": 25655,\n                                \"team\": 84,\n                                \"count\": 4,\n                                \"distanceKm\": 301.5906237951766,\n                                \"elevation\": 3610.019075719202,\n                                \"duration\": 77343,\n                                \"rest\": 1332,\n                                \"speedAvg\": 8.294634979660305,\n                                \"totalRest\": 54884,\n                                \"loadIndex\": 1080.75,\n                                \"totalKcalRelated\": 544.535560976128,\n                                \"weightedTotalKcal\": 12303.171406247127,\n                                \"flatTotalKcal\": 9424.70699359927,\n                                \"firstGpxStartEpoch\": null,\n                                \"lastGpxStartEpoch\": null\n                            } */}\n\n                        </xmp>\n                    </small>\n                </>}\n            </div>}\n        </>);\n    }\n}\n\n@observer\nclass TvTop10 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.inputRef = {};\n        this.updateTimer = {};\n    }\n\n    // async loadRace(props = this.props) {\n\t// \tthis.setState({ isLoading: true });\n\t// \tconst { raceStore } = props.stores;\n\t// \tconst { raceid } = props;\n    //     await raceStore.load(raceid);\n    //     const { race } = raceStore;\n\t// \tconst allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n    //         return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n\t// \t}).flat();\n\t// \tif (allTeamIds.length > 0 && raceid) {\n\t// \t\tawait raceStore.loadTeams(allTeamIds.join(','));\n\t// \t\tawait raceStore.loadWorkoutSummary(allTeamIds.join(','), raceid);\n\t// \t\traceStore.getWorkoutSummaryActiveTeams();\n\t// \t}\n\t// \traceStore.getAllClassesSortedBy();\n\n\t// \t// Set reload timer\n\t// \tclearTimeout(this.updateTimer.reload);\n\t// \tthis.updateTimer.reload = setTimeout(async () => {\n\t// \t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t// \t\tthis.setState({ reloadLastEpoch });\n\t// \t\tthis.loadRace();\n\t// \t}, RELOAD_INTERVAL_IN_SEC * 1000);\n\n\t// \tthis.setState({\n\t// \t\tisLoading: false,\n\t// \t\tcontentIsNotLoaded: false,\n\t// \t});\n\t// }\n\n    loadLiveRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { race } = raceStore;\n        await raceStore.getRaceTrackerData(race.raceTrackerRace);\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        this.setState({ isLoading: true });\n        const { raceStore, appState } = props.stores;\n        const { raceid, classid } = props;\n        await raceStore.load(raceid);\n        const { race } = raceStore;\n        const { focusOnMushers } = appState;\n\n        const { selectedClassIds = [] } = appState;\n        const selectedClassId = classid || selectedClassIds[0];\n\n        if (classid) {\n            appState.toggleSelectedClassId(classid, true);\n        }\n\n        const allTeamIds = race.classes\n            .filter(currentClass => currentClass.id === selectedClassId)\n            .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n            .map((currentClass) => {\n                return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n            })\n            .flat();\n        if (allTeamIds.length > 0) {\n            await raceStore.loadTeams(allTeamIds.join(','));\n        }\n        if (race.liveRace > 0) {\n            await this.loadLiveRaceResults(this.props, allTeamIds, focusOnMushers);\n\n        } else {\n            await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n        }\n\n        // const allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n        //     return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n        // }).flat();\n\n        // if (allTeamIds.length > 0) {\n        //     await raceStore.loadTeams(allTeamIds.join(','));\n        //     if (race.liveRace > 0) {\n        //         await this.loadLiveRaceResults(props, allTeamIds, focusOnMushers);\n\n        //     } else {\n        //         await this.loadRaceResults(props, allTeamIds, focusOnMushers);\n        //     }\n        // }\n        raceStore.getAllClassesSortedBy();\n\n        const currentClass = raceStore.getClassById(selectedClassId);\n        if (currentClass && currentClass.raceTrackerResults) {\n            raceStore.getRacetrackerResults(currentClass.raceTrackerResults);\n        }\n\n        // Set reload timer\n        clearTimeout(this.updateTimer.reload);\n        this.updateTimer.reload = setTimeout(async () => {\n            const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n            this.setState({ reloadLastEpoch });\n            this.loadRace(props);\n        }, RELOAD_INTERVAL_IN_SEC * 1000);\n\n        this.setState({ isLoading: false });\n    }\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n    handleMusherClick = (e) => {\n        const { bib } = e.target.closest('tr').dataset;\n        const { showModal } = this.state;\n        this.setState({\n            showModal: !showModal,\n            modalBib: bib,\n        });\n    }\n\n    toggleModal = () => {\n        const { showModal } = this.state;\n        this.setState({\n            showModal: !showModal,\n        });\n    }\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n    render() {\n\t\tconst { contentIsNotLoaded, lockMessage,\n            showTeam, showDog,\n            showModal, modalTitle, modalBib, modalEmail,\n        } = this.state;\n\t\tconst { userStore, raceStore, appState } = this.props.stores;\n        const { classid, position = 'right', limit = 100 } = this.props;\n\t\tconst { user = {}, teams = [], isAdmin } = userStore;\n        const { language = 'en' } = user;\n\n        const { darkmode, displayDetails, editUserDetails, selectedClassIds = [], focusOnMushers = [] } = appState;\n\n\t\tconst { race = {}, teamList, classes = [] } = raceStore;\n\t\tconst { activeTeams, waypoints, zoomToMarkers, raceTrackerResults } = raceStore;\n\n\t\tconst lastAllowedChangeDate = new Date(race.endDate);\n\t\tlastAllowedChangeDate.setHours(lastAllowedChangeDate.getHours() + 2);\n\n        const currentClass = race.classes ? race.classes.find(e => e.id === classid) || {} : {};\n\n        const musher = modalBib ? raceStore.getMusherByBibId(modalBib) : raceStore.getMusherByBibEmail(modalEmail);\n        const team = raceStore.getTeamById(musher.team);\n\n        let contestants = [];\n        if (raceTrackerResults && raceTrackerResults.data) {\n            contestants = raceTrackerResults.data.map((line) => {\n                const lineData = raceStore.raceTrackerMapLine(line);\n                const bib = parseInt(lineData.Bib, 10);\n                let contestant = {};\n                if (classes && classes[currentClass.id].contestants) {\n                    contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n                }\n                return contestant;\n            });\n        } else if (classes[currentClass.id] && classes[currentClass.id].contestants) {\n            contestants = classes[currentClass.id].contestants.sort(byBib).slice(0, limit).map(contestant => contestant);\n        }\n\n        return (<>\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; height: calc(100% - ${MARGIN_BOTTOM} - ${MARGIN_TOP});`}>\n                <div class='row'>\n                    <div class='col-12 px-0 position-relative'\n                        style='font-size: 1.5em; line-height: 1.0em;'\n                    >\n                        <div class='w-100 overflow-hidden'>\n                            <div\n                                class='d-flex flex-row flex-nowrap pb-2 px-1'\n                                style='overflow: auto; scroll-snap-type: x mandatory;'\n                            >\n                                {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                                    <div class='col px-0 pt-2'>\n                                        <a\n                                            type='button'\n                                            class={`btn btn-block ${idx === 0 && 'rounded-pill-left'} ${idx === race.classes.length - 1 && 'rounded-pill-right'} rounded-none ${currentClass.id === classid ? 'btn-primary' : 'btn-outline-primary'} text-nowrap`}\n                                            style='text-overflow: ellipsis; overflow: hidden;'\n                                            data-id={currentClass.id}\n                                            href={`/embed/agreement/${race.id}/${currentClass.id}`}\n                                        >\n                                            {currentClass.title}\n                                        </a>\n                                    </div>\n                                </>)}\n                            </div>\n                        </div>\n\n\n                        <table class='table table-striped table-bordered'>\n                            <thead>\n                                <tr>\n                                    <td\n                                        colspan='2'\n                                        class='px-4 py-4 overflow-hidden'\n                                        style='border-radius: 10px 0 0 0; font-size: 1.4em;'\n                                    >\n                                        <nobr>{currentClass.title}</nobr>\n                                    </td>\n                                    <td\n                                        class='px-3 text-center py-4 overflow-hidden'\n                                        style='border-radius: 0 10px 0 0 ; font-size: 1.1em;'\n                                    >\n                                        Agreement\n                                    </td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {contestants && contestants.map((contestant, idx) => {\n                                    const { musher = {}, currentTeam = {}, currentStages, currentResults = {}, completed, duration,\n                                        normalizedDuration, weightedNormalizedDuration, totalKcalRelated, weightedTotalKcal,\n                                        flatTotalKcal, percentHarder, loadIndex, raceDistance, isDone, normalizedKcal, normalizedFlatKcal,\n                                        finishedDate, totalWorkoutTimeUsedSec,\n                                    } = contestant;\n\n                                    const totals = raceStore.getTotalsByTeamId(currentTeam.id);\n\n                                    return (<>\n                                        <tr style='border-bottom: 1px solid #7B312F;'>\n                                            <td\n                                                class='text-center align-middle ml-0 pl-0'\n                                                style='width: 50px; color: #ffffff; font-size: 1.2em; line-height: 1.2em;'\n                                            >\n                                                <div class='d-flex justify-content-start'>\n                                                    <div class='pl-3 pr-2 w-100 clearfix rounded-pill-right' style={`background-color: ${mu.getRankingColor(idx + 1)}`}>\n                                                        {musher.bib || idx + 1}\n                                                    </div>\n                                                </div>\n                                            </td>\n                                            <td\n                                                class='px-3 py-3'\n                                                style='font-size: 1.2em;'\n                                            >\n                                                <nobr>\n                                                    {musher.flag} {musher.firstname} {musher.lastname}<br />\n                                                    {/* <small class='text-muted'>{musher.sportsClub}</small><br /> */}\n                                                </nobr>\n                                                <small>\n                                                    {musher.cellphone}<br />\n                                                    {musher.address}<br />\n                                                    {musher.postalcode}<br />\n                                                    {musher.postalplace}<br />\n                                                    {musher.country}<br />\n                                                </small>\n                                            </td>\n                                            <td\n                                                class='text-center align-middle'\n                                                style='width: 150px; font-size: 1.2em;'\n                                            >\n                                                {musher.declaration && <>\n                                                    <nobr>\n                                                        <i class='fas fa-check text-success' /> {util.isoDate(musher.declarationDate)}\n                                                    </nobr>\n                                                </>}\n                                            </td>\n                                        </tr>\n                                    </>);\n                                })}\n                                {/* <tr>\n                                    <td\n                                        colspan='3'\n                                        class='text-center'\n                                    >\n                                        <img src='https://themusher.app/assets/logo-qpaws-dark.png' height='70' />\n                                    </td>\n                                </tr> */}\n                            </tbody>\n                        </table>\n\n                    </div>                        \n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default TvTop10;\n"],"sourceRoot":""}