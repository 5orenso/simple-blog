{"version":3,"sources":["webpack:///./components/register/index.js","webpack:///./components/error/index.js"],"names":["Login","observer","Component","constructor","props","super","handleEmailInput","async","e","userStore","stores","email","target","value","setState","clearTimeout","checkEmailTimer","setTimeout","checkEmail","register","password","state","appState","language","skipPubSub","fingerprint","jwtToken","registerUser","getInfo","removeError","this","error","errorIcon","removeMessage","message","messageIcon","togglePassword","passwordType","updateCapsLockStatus","isCapsLock","login","routeLogin","route","forgotten","routeLoginForgot","changeLanguage","lang","setLanguage","emailIsAvailable","componentDidMount","render","showLogo","emailMessage","isValidEmail","util","validateEmail","passwordScore","scorePassword","passwordScoreNormalized","normalizeBetween","passwordStrength","checkPassStrength","isValidPassword","isOkToRegister","class","src","height","icon","remove","type","id","onInput","onKeypress","placeholder","style","linkState","onClick","role","disabled","Error","componentDidUpdate","removeTimer","componentWillUnmount","href","onclick","className"],"mappings":"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","file":"41.chunk.b6bfc.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { route } from 'preact-router';\nimport linkState from 'linkstate';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport Error from '../error';\nimport Message from '../message';\n\n@observer\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCapsLock: false,\n            email: this.props.email,\n            passwordType: 'password',\n            emailIsAvailable: false,\n        };\n    }\n\n    handleEmailInput = async (e) => {\n        const { userStore } = this.props.stores;\n        const email = e.target.value;\n        this.setState({ email });\n        clearTimeout(this.checkEmailTimer);\n        this.checkEmailTimer = setTimeout(() => userStore.checkEmail(email), 1000);\n    }\n\n    register = async () => {\n        const { email, password } = this.state;\n        const { userStore, appState } = this.props.stores;\n        const { language = 'en' } = appState;\n        const { skipPubSub } = this.props;\n        const { fingerprint, jwtToken } = appState;\n        await userStore.registerUser({ email, password, fingerprint, jwtToken, skipPubSub, language });\n        await userStore.getInfo();\n    };\n\n    removeError = () => {\n        this.setState({ error: '', errorIcon: '' });\n    }\n\n    removeMessage = () => {\n        this.setState({ message: '', messageIcon: '' });\n    }\n\n    togglePassword = () => {\n        let { passwordType } = this.state;\n        if (passwordType === 'password') {\n            passwordType = 'text';\n        } else {\n            passwordType = 'password';\n        }\n        this.setState({ passwordType });\n    }\n\n    updateCapsLockStatus = (isCapsLock) => {\n        this.setState({\n            isCapsLock,\n        });\n    }\n\n    login = () => {\n        const { email = '' } = this.state;\n        const { routeLogin = `/${email}` } = this.props;\n\n        route(routeLogin);\n    }\n\n    forgotten = () => {\n        const { email = '' } = this.state;\n        const { routeLoginForgot = `/forgotten/${email}` } = this.props;\n        route(routeLoginForgot);\n    }\n\n    changeLanguage = (e) => {\n        const lang = e.target.value;\n\t\tconst { appState } = this.props.stores;\n        appState.setLanguage(lang);\n    }\n\n    componentDidMount() {\n        const { userStore } = this.props.stores;\n        if (this.props.email) {\n            clearTimeout(this.checkEmailTimer);\n            this.checkEmailTimer = setTimeout(() => userStore.checkEmail(this.props.email), 1000);\n        }\n    }\n\n    render() {\n        const { isCapsLock, email, password, passwordType } = this.state;\n        const { appState, userStore } = this.props.stores;\n        const { showLogo = true } = this.props;\n        const { language = 'en' } = appState;\n        const { emailIsAvailable, emailMessage, login } = userStore;\n        const { message, messageIcon, error, errorIcon } = login;\n\n        const isValidEmail = util.validateEmail(email);\n        const passwordScore = util.scorePassword(password);\n        const passwordScoreNormalized = util.normalizeBetween(passwordScore, 0, 80, 0, 100, 100);\n        const passwordStrength = util.checkPassStrength(password, ['bg-danger', 'bg-warning', 'bg-success', 'bg-success']);\n        const isValidPassword = passwordScoreNormalized > 30;\n        const isOkToRegister = isValidEmail && emailIsAvailable && isValidPassword;\n\n        const darkmode = true;\n\n        return (\n            <div class='container-fluid'>\n                <div class='row'>\n                    <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 pt-5'>\n                        {showLogo && <>\n                            <div class='d-flex justify-content-center mb-5 mt-5'>\n                                {darkmode ? <>\n                                    <img src={`https://themusher.app/assets/logo-qpaws-dark.png`} height='100' />\n                                </> : <>\n                                    <img src={`https://themusher.app/assets/logo-qpaws-light.png`} height='100' />\n                                </>}\n                            </div>\n                        </>}\n                        {/* <div class='d-flex justify-content-center'>\n                            <h5 class='mt-1 mb-5'><Text id='register.new-user'>Ny bruker</Text></h5>                        \n                        </div> */}\n\n                        <Error message={error} icon={errorIcon} remove={this.removeError} />\n                        <Message message={message} icon={messageIcon} remove={this.removeMessage}  />\n\n                        <div class='form-group'>\n                            {/* <label for='emailInput'><i class='far fa-envelope' /> <Text id='register.email'>E-post</Text></label> */}\n                            <Localizer>\n                                <input type='email'\n                                    class={`form-control form-control-lg ${email ? (isValidEmail && emailIsAvailable ? 'is-valid' : 'is-invalid') : ''}`}\n                                    id='emailInput'\n                                    onInput={this.handleEmailInput}\n                                    value={email}\n                                    onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                                    placeholder={<Text id='register.email'>E-post</Text>}\n                                />\n                            </Localizer>\n                            {email && isValidEmail && emailIsAvailable && <div class='valid-feedback' style={`display: block;`}>\n                                {emailMessage}\n                            </div>}\n                            {email && !isValidEmail && <div class=\"invalid-feedback\" style={'display: block;'}>\n                                <Text id='register.email-not-valid'>Hmm, e-posten ser ikke helt riktig ut.</Text>\n                            </div>}\n                            {email && isValidEmail && !emailIsAvailable && <div class=\"invalid-feedback\" style={'display: block;'}>\n                                {emailMessage}\n                            </div>}\n                        </div>\n\n                        <div class='form-group'>\n                            {/* <label for='passwordInput'><i class='fas fa-key' /> <Text id='register.password'>Passord</Text></label> */}\n                            <div class='input-group'>\n                                <Localizer>\n                                    <input type={passwordType}\n                                        class={`form-control form-control-lg ${password ? (isValidPassword ? 'is-valid' : 'is-invalid') : ''}`}\n                                        id='passwordInput'\n                                        onInput={linkState(this, 'password')}\n                                        value={password}\n                                        onKeypress={(e) => { util.isCapsLock(e, this.updateCapsLockStatus); }}\n                                        placeholder={<Text id='register.password'>Passord</Text>}\n                                    />\n                                </Localizer>\n                                <div class='input-group-append'>\n                                    <button class='btn btn-primary' type='button'\n                                        onClick={this.togglePassword}\n                                    >\n                                        <i class={`fas fa-eye${passwordType === 'text' ? '-slash' : ''}`} />\n                                    </button>\n                                </div>\n                            </div>\n\n                            <div class='progress' style='height: 2px;'>\n                                <div class={`progress-bar ${passwordStrength}`} role='progressbar' style={`width: ${passwordScoreNormalized}%;`} />\n                            </div>\n                            <div class='invalid-feedback' style={`${passwordScoreNormalized > 0 && passwordScoreNormalized < 30 ? 'display: block' : ''}`}>\n                                <Text id='register.password-too-weak'>Passordet ditt er for svakt. Forsøk et annet passord eller legg til flere bokstaver.</Text>\n                            </div>\n                            <div class='valid-feedback text-warning' style={`${passwordScoreNormalized >= 30 && passwordScoreNormalized < 70 ? 'display: block' : ''}`}>\n                                <Text id='register.password-weak'>Passordet ditt er svakt, men vis skal gjøre vårt beste for å passe på deg.</Text>\n                            </div>\n                            <div class='valid-feedback' style={`${passwordScoreNormalized >= 70 ? 'display: block' : ''}`}>\n                                <Text id='register.password-ok'>Passordet ditt ser bra ut.</Text>\n                            </div>\n                        </div>\n\n                        {isCapsLock && <div class='alert alert-danger' role='alert'>\n                            <Text id='register.caps-lock-on'>CAPS LOCK er på!</Text>\n                        </div>}\n\n                        <button class={`btn btn-lg btn-block ${isOkToRegister ? 'btn-primary' : 'btn-primary'}`} type='button'\n                            onClick={this.register}\n                            disabled={!isOkToRegister}\n                        >\n                            <i class='far fa-save mr-2' />\n                            <Text id='register.register'>Registrer meg</Text>\n                        </button>\n\n                        <small class='form-text text-muted mt-5 text-center'>\n                            <button class='btn btn-small btn-link text-white'\n                                onClick={this.login}\n                            >\n                               <Text id='register.i-have-an-account'>Jeg har visst konto likevel. Gå til login siden.</Text>\n                            </button>\n                        </small>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\n\nconst ERROR_DISPLAY_MS = 10000;\n\n@observer\nclass Error extends Component {\n    componentDidUpdate() {\n        const { remove = () => {} } = this.props;\n        clearTimeout(this.removeTimer);\n        this.removeTimer = setTimeout(() => remove(), ERROR_DISPLAY_MS);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.removeTimer);\n    }\n\n    render() {\n        const { message, icon, remove = () => {} } = this.props;\n\n        if (!message) {\n            return '';\n        }\n        return (\n            <div class='container'>\n                <div class='alert alert-danger row'>\n                    <div class={`col-12`}>\n                        <a href='#' onclick={remove} class='float-right'>\n                            <i className='fas fa-times' />\n                        </a>\n                        {icon && <h1 class='float-left mr-3'><i class={icon} /></h1>}\n                        {message && <span>{message}</span>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Error;\n"],"sourceRoot":""}