{"version":3,"sources":["webpack:///./routes/tv/top10.js","webpack:///./routes/tv/style.css"],"names":["MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","initialState","isLoading","contentIsNotLoaded","reloadInSec","reloadLastEpoch","reloadIsActive","observer","Component","constructor","props","super","initComponent","Math","floor","Date","getTime","this","setState","tickReloadTimeer","state","updateTimer","now","clearTimeout","tick","setTimeout","componentDidMount","componentWillUnmount","render","reloadPercent","util","normalizeBetween","class","style","role","aria-valuenow","aria-valuemin","aria-valuemax","TvTop10","loadLiveRaceResults","async","teamIds","focusOnMushers","bibs","classid","raceStore","userStore","stores","race","historyPointIndex","replayHistory","timerRunning","showDrawerReplay","classInfo","getClassById","isAdmin","getRaceTrackerData","raceTrackerRace","history","startDate","endDate","getRaceTrackerActiveTeams","reload","console","log","RELOAD_INTERVAL_IN_SEC","loadRaceResults","raceid","loadWorkoutSummary","getWorkoutSummaryActiveTeams","loadRace","appState","load","selectedClassIds","selectedClassId","toggleSelectedClassId","allTeamIds","classes","filter","currentClass","id","contestants","length","map","musher","team","flat","bib","loadTeams","join","liveRace","getAllClassesSortedBy","err","toggleFocusOnMusher","e","musherId","target","parentElement","dataset","musherid","inputRef","componentWillReceiveProps","nextProps","position","limit","user","teams","language","waypoints","lastAllowedChangeDate","setHours","getHours","find","hoverElement","hoverelementonly","sort","a","b","distance","data-id","href","title","colspan","slice","idx","flag","getRankingColor","finishTime","diffToFirstFinishTime","secToHms","formatDate","parseInputDate","locale","day","month","hour12","hour","minute","windDirection","bearing","format","speed","distanceToFinish","distanceToFirst","distanceToForward","distanceToBehind","src","height","module","exports"],"mappings":"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","file":"15.chunk.82f57.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport style from './style.css';\n\nconst initialState = {\n\tisLoading: false,\n\tcontentIsNotLoaded: true,\n\n\treloadInSec: null,\n\treloadLastEpoch: null,\n\treloadIsActive: false,\n};\n\nconst RELOAD_INTERVAL_IN_SEC = 60;\n\nfunction byBib(a, b) {\n    const aHas = typeof a.musher !== 'undefined';\n    const bHas = typeof b.musher !== 'undefined';\n    return (bHas - aHas) || (aHas === true && a.musher.bib - b.musher.bib) || 0;\n}\n\nfunction raceStatus(musher) {\n\tswitch (musher.raceStatus) {\n\t\tcase 'OK':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute rounded-lg' style='top: 10px; left: 0px;'><i class='fas fa-check text-success' /></span>\n\t\t\t</>);\n\t\tcase 'DNS':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNF':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DNQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DQ':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-danger text-white text-center px-2 rounded-lg border' style='top: 5px; left: -100px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tcase 'DC':\n\t\t\treturn (<>\n\t\t\t\t<span class='position-absolute bg-warning text-white text-center px-2 rounded-lg border' style='top: 5px; left: -150px; width: 80px'><i class='fas fa-info-circle' /> {musher.raceStatus}</span>\n\t\t\t</>);\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n\n\n@observer\nclass ReloadTimer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n\t\tthis.updateTimer = {};\n    }\n\n\tinitComponent = () => {\n\t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t\tthis.setState({\n\t\t\treloadIsActive: true,\n\t\t\treloadLastEpoch,\n\t\t}, () => this.tickReloadTimeer());\n\t}\n\n\ttickReloadTimeer() {\n\t\tconst { reloadIsActive, reloadLastEpoch } = this.state;\n        if (reloadIsActive) {\n\t\t\tconst now = Math.floor(new Date().getTime() / 1000);\n\t\t\tconst reloadInSec = RELOAD_INTERVAL_IN_SEC - (now - reloadLastEpoch);\n\t\t\tthis.setState({ reloadInSec });\n\t\t\tclearTimeout(this.updateTimer.tick);\n\t\t\tthis.updateTimer.tick = setTimeout(() => this.tickReloadTimeer(), 1000);\n        }\n\t\treturn false;\n    }\n\n\tcomponentDidMount() {\n\t\tthis.initComponent();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\trender() {\n\t\tconst { reloadInSec } = this.state;\n\t\tconst reloadPercent = Math.floor(util.normalizeBetween(reloadInSec, 0, RELOAD_INTERVAL_IN_SEC, 0, 100))\n\n\t\treturn (<>\n\t\t\t<div class='progress fixed-top' style='height: 2px; z-index: 999999;'>\n\t\t\t\t<div class='progress-bar' role='progressbar' style={`width: ${reloadPercent}%;`} aria-valuenow={reloadPercent} aria-valuemin='0' aria-valuemax='100' />\n\t\t\t</div>\n\t\t</>);\n\t}\n}\n\n@observer\nclass TvTop10 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.inputRef = {};\n        this.updateTimer = {};\n    }\n\n    // async loadRace(props = this.props) {\n\t// \tthis.setState({ isLoading: true });\n\t// \tconst { raceStore } = props.stores;\n\t// \tconst { raceid } = props;\n    //     await raceStore.load(raceid);\n    //     const { race } = raceStore;\n\t// \tconst allTeamIds = race.classes.filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0).map((currentClass) => {\n    //         return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n\t// \t}).flat();\n\t// \tif (allTeamIds.length > 0 && raceid) {\n\t// \t\tawait raceStore.loadTeams(allTeamIds.join(','));\n\t// \t\tawait raceStore.loadWorkoutSummary(allTeamIds.join(','), raceid);\n\t// \t\traceStore.getWorkoutSummaryActiveTeams();\n\t// \t}\n\t// \traceStore.getAllClassesSortedBy();\n\n\t// \t// Set reload timer\n\t// \tclearTimeout(this.updateTimer.reload);\n\t// \tthis.updateTimer.reload = setTimeout(async () => {\n\t// \t\tconst reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n\t// \t\tthis.setState({ reloadLastEpoch });\n\t// \t\tthis.loadRace();\n\t// \t}, RELOAD_INTERVAL_IN_SEC * 1000);\n\n\t// \tthis.setState({\n\t// \t\tisLoading: false,\n\t// \t\tcontentIsNotLoaded: false,\n\t// \t});\n\t// }\n\n    // loadLiveRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n    //     const { raceStore } = props.stores;\n    //     const { race } = raceStore;\n    //     await raceStore.getRaceTrackerData(race.raceTrackerRace);\n    //     raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers);\n    // }\n\n    loadLiveRaceResults = async (props = this.props, { teamIds, focusOnMushers, bibs, classid }) => {\n        const { raceStore, userStore } = props.stores;\n        const { race } = raceStore;\n        const { historyPointIndex, replayHistory, timerRunning } = this.state;\n        const { showDrawerReplay } = this.props;\n        const classInfo = raceStore.getClassById(classid) || {};\n        const { isAdmin } = userStore;\n\n        await raceStore.getRaceTrackerData(race.raceTrackerRace, {\n            history: (replayHistory || showDrawerReplay),\n            bibs,\n            classid,\n            startDate: classInfo.startDate,\n            endDate: classInfo.endDate,\n            isAdmin,\n        });\n        raceStore.getRaceTrackerActiveTeams(teamIds, focusOnMushers, bibs, historyPointIndex);\n\n        // Set reload timer\n        if (timerRunning) {\n            clearTimeout(this.updateTimer.reload);\n            this.updateTimer.reload = setTimeout(() => {\n                console.log('loadLiveRaceResults.reloading...');\n                const reloadLastEpoch = Math.floor(new Date().getTime() / 1000);\n                this.setState({ reloadLastEpoch });\n                // this.loadRace(props);\n                this.loadLiveRaceResults(this.props, { teamIds, focusOnMushers, bibs, classid });\n            }, RELOAD_INTERVAL_IN_SEC * 1000);\n        }\n    }\n\n\n    loadRaceResults = async (props = this.props, teamIds, focusOnMushers) => {\n        const { raceStore } = props.stores;\n        const { raceid } = props;\n\n        await raceStore.loadWorkoutSummary(teamIds, raceid);\n        raceStore.getWorkoutSummaryActiveTeams(teamIds, focusOnMushers);\n    }\n\n    loadRace = async (props = this.props) => {\n        try {\n            this.setState({ isLoading: true });\n            const { raceStore, appState } = props.stores;\n            const { raceid, classid } = props;\n            await raceStore.load(raceid);\n            const { race } = raceStore;\n            const { focusOnMushers } = appState;\n\n            const { selectedClassIds = [] } = appState;\n            const selectedClassId = classid || selectedClassIds[0];\n\n            if (classid) {\n                appState.toggleSelectedClassId(classid, true);\n            }\n            const allTeamIds = race.classes\n                .filter(currentClass => currentClass.id === selectedClassId)\n                .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n                .map((currentClass) => {\n                    return currentClass.contestants.filter(musher => musher.team > 0).map(musher => musher.team);\n                })\n                .flat();\n\n            const bibs = race.classes\n                .filter(currentClass => currentClass.id === selectedClassId)\n                .filter(currentClass => currentClass.contestants && currentClass.contestants.length > 0)\n                .map((currentClass) => {\n                    return currentClass.contestants.filter(musher => musher.bib > 0).map(musher => musher.bib);\n                })\n                .flat();\n\n            if (allTeamIds.length > 0) {\n                await raceStore.loadTeams(allTeamIds.join(','));\n            }\n            if (race.liveRace > 0) {\n                await this.loadLiveRaceResults(this.props, { teamIds: allTeamIds, focusOnMushers, bibs, classid: selectedClassId });\n            } else {\n                await this.loadRaceResults(this.props, allTeamIds, focusOnMushers);\n            }\n            raceStore.getAllClassesSortedBy();\n\n            this.setState({ isLoading: false });\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n    }\n\n    toggleFocusOnMusher = (e) => {\n\t\tconst musherId = e.target.parentElement.dataset.musherid || e.target.dataset.musherid;\n\t\tconst { appState, raceStore } = this.props.stores;\n\t\tappState.toggleFocusOnMusher(musherId);\n\n\t\tconst { focusOnMushers } = appState;\n\n        const { race } = raceStore;\n        if (race.liveRace > 0) {\n            raceStore.getRaceTrackerActiveTeams(null, focusOnMushers);\n        } else {\n            raceStore.getWorkoutSummaryActiveTeams(null, focusOnMushers);\n        }\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.updateTimer.reload);\n\t\tclearTimeout(this.updateTimer.tick);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadRace();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.classid !== nextProps.classid) {\n            this.loadRace(nextProps);\n        }\n\t}\n\n// componentWillReceiveProps(nextProps) {\n//         if (this.props.currentClass.id !== nextProps.currentClass.id || this.props.reloadLastEpoch !== nextProps.reloadLastEpoch) {\n//             const { currentClass } = this.props;\n//             const { raceStore } = this.props.stores;\n//             const { checkpoints = [], contestants = [], results = [] } = currentClass;\n//             raceStore.sortContestantsByResult({ contestants, results, checkpoints });\n//         }\n// \t}\n\n\n    render() {\n\t\tconst { contentIsNotLoaded, lockMessage } = this.state;\n\t\tconst { userStore, raceStore, appState } = this.props.stores;\n        const { classid, position = 'right', limit = 10 } = this.props;\n\t\tconst { user = {}, teams = [], isAdmin } = userStore;\n        const { language = 'en' } = user;\n\n        const { darkmode, displayDetails, editUserDetails, selectedClassIds = [], focusOnMushers = [] } = appState;\n\n\t\tconst { race = {}, teamList, classes = [] } = raceStore;\n\t\tconst { activeTeams, waypoints, zoomToMarkers, raceTrackerResults } = raceStore;\n\n\t\tconst lastAllowedChangeDate = new Date(race.endDate);\n\t\tlastAllowedChangeDate.setHours(lastAllowedChangeDate.getHours() + 2);\n\n        const currentClass = race.classes ? race.classes.find(e => e.id === classid) || {} : {};\n\n        // let contestants = [];\n        // if (raceTrackerResults && raceTrackerResults.data) {\n        //     contestants = raceTrackerResults.data.map((line) => {\n        //         const lineData = raceStore.raceTrackerMapLine(line);\n        //         const bib = parseInt(lineData.Bib, 10);\n        //         let contestant = {};\n        //         if (classes && classes[currentClass.id].contestants) {\n        //             contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n        //         }\n        //         return contestant;\n        //     });\n        // } else if (classes[currentClass.id] && classes[currentClass.id].contestants) {\n        //     contestants = classes[currentClass.id].contestants.sort(byBib).slice(0, limit).map(contestant => contestant);\n        // }\n\n        // const { sortedContestants = [] } = raceStore;\n\n        return (<>\n            <div class={`fixed-top ${style.hoverElement}`} style='height: 100px;'>\n                <div class={`${style.hoverelementonly}`}>\n                    <div class={`row`}>\n                        {race.classes && race.classes.sort((a, b) => a.distance - b.distance).map((currentClass, idx) => <>\n                            <div class='col'>\n                                <a\n                                    class={`btn btn-block ${currentClass.id === classid ? 'btn-success' : 'btn-outline-success'} text-nowrap`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10/${race.id}/${currentClass.id}/${position}`}\n                                >\n                                    Left: {currentClass.title}\n                                </a>\n                                <a\n                                    class={`btn btn-link text-nowrap ${position === 'left' ? 'float-right' : 'float-left'}`}\n                                    style='text-overflow: ellipsis; overflow: hidden;'\n                                    data-id={currentClass.id}\n                                    href={`/tv/top10/${race.id}/${currentClass.id}/${position === 'left' ? 'right' : 'left'}`}\n                                >\n                                    {position === 'left' ? <>\n                                        right <i class='fas fa-angle-right' />\n                                    </> : <>\n                                        <i class='fas fa-angle-left' /> left\n                                    </>}\n                                </a>\n                            </div>\n                        </>)}\n                    </div>\n                </div>\n            </div>\n\t\t\t<div class='container-fluid pt-5' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP}; height: calc(100% - ${MARGIN_BOTTOM} - ${MARGIN_TOP});`}>\n                <div class='row'>\n                    <div class={position === 'left' ? 'col-4 ml-5' : 'col-4 offset-8 mr-5'}\n                        style='font-size: 1.5em; line-height: 1.0em;'\n                    >\n                        {/* <div\n                            class='bg-light rounded-lg mr-5 p-4'\n                            style='font-size: 2.0em; line-height: 1.0em;'\n                        > */}\n\n                            {/* <div\n                                class=' text-center py-3 mb-3'\n                                style='background: linear-gradient(#b0b0b0, #e0e0e0, #808080); color: #000000;'\n                            >\n                                <strong>{race.title}</strong>\n                            </div> */}\n\n                            <table class='table table-sm table-borderless rounded-lg'>\n                                <thead>\n                                    <tr>\n                                        <td\n                                            colspan='3'\n                                            class='px-4 py-4 overflow-hidden'\n                                            style='background-color: #FB4114; color: #ffffff; border-radius: 10px 0 0 0; font-size: 1.4em;'\n                                        >\n                                            <nobr>{currentClass.title} / GPS Ranking</nobr>\n                                        </td>\n                                        <td\n                                            class='px-3 text-center py-4 overflow-hidden'\n                                            style='background-color: #FB4114; color: #ffffff; border-radius: 0 10px 0 0 ; font-size: 1.1em;'\n                                        >\n                                            Time\n                                        </td>\n                                    </tr>\n                                </thead>\n                                <tbody\n                                    style='\n                                        background-color: #1C1F4C;\n                                        background-image: url(\"https://themusher.app/assets/tv-single-background.jpg\");\n                                        background-size: cover !important;\n                                        background-position: 0 0;\n                                    '>\n                                    {waypoints && waypoints.slice(0, limit).map((musher, idx) => {\n                                    // {raceTrackerResults && raceTrackerResults.data && raceTrackerResults.data.slice(0, limit).map((line, idx) => {\n                                    //     const lineData = raceStore.raceTrackerMapLine(line);\n                                    //     const bib = parseInt(lineData.Bib, 10);\n                                    //     let contestant = {};\n                                    //     if (classes && classes[currentClass.id].contestants) {\n                                    //         contestant = classes[currentClass.id].contestants.find(e => e.musher.bib === bib) || {};\n                                    //     }\n                                    // {classes[currentClass.id] && classes[currentClass.id].contestants && classes[currentClass.id].contestants.slice(0, limit).map((contestant, idx) => {\n\n                                        // const { musher = {}, currentTeam = {}, currentStages, currentResults = {}, completed, duration,\n                                        //     normalizedDuration, weightedNormalizedDuration, totalKcalRelated, weightedTotalKcal,\n                                        //     flatTotalKcal, percentHarder, loadIndex, raceDistance, isDone, normalizedKcal, normalizedFlatKcal,\n                                        //     finishedDate, totalWorkoutTimeUsedSec,\n                                        // } = contestant;\n                                        // const { musher = {}, currentTeam = {}, currentStages, currentResults = {}, completed, duration,\n                                        //     normalizedDuration, weightedNormalizedDuration, totalKcalRelated, weightedTotalKcal,\n                                        //     flatTotalKcal, percentHarder, loadIndex, raceDistance, isDone, normalizedKcal, normalizedFlatKcal,\n                                        //     finishedDate, totalWorkoutTimeUsedSec,\n                                        // } = contestant;\n\n                                        const {\n                                            bearing, bib, body, color, diffToFirstFinishTime, distanceToBehind, distanceToFinish,\n                                            distanceToFirst, distanceToForward, email, finishTime, flag, icon, image, lat, lng, rank,\n                                            speed, title, totalDistanceOnTrack,\n                                        } = musher;\n                                        return (<>\n                                            <tr style='border-bottom: 1px solid #7B312F;'>\n                                                <td\n                                                    class='pl-3 pr-1 py-3 text-center'\n                                                    style='color: #ffffff; font-size: 1.2em;'\n                                                >\n                                                    <div class='text-overflow' style='max-width: 100px; line-height: 1.1em;'>\n                                                        {idx + 1}\n                                                    </div>\n                                                </td>\n                                                <td\n                                                    class='text-center align-middle ml-0 pl-0'\n                                                    style='width: 50px; color: #ffffff; font-size: 1.2em; line-height: 1.2em;'\n                                                >\n                                                    <div class='d-flex justify-content-start'>\n                                                        <div class='pl-3 pr-2 w-100 clearfix rounded-pill-right' style={`background-color: ${mu.getRankingColor(idx + 1)}`}>\n                                                            {bib || idx + 1}\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                                <td\n                                                    class='px-3 py-3'\n                                                    style='color: #ffffff; font-size: 1.2em;'\n                                                >\n                                                    <div class='text-overflow' style='max-width: 348px; line-height: 1.1em;'>\n                                                        <nobr>\n                                                            {flag} {title}<br />\n                                                            {/* <small class='text-muted'>{musher.sportsClub}</small><br /> */}\n                                                            {/* {JSON.stringify(contestant, null, 4)} */}\n                                                        </nobr>\n                                                    </div>\n                                                </td>\n                                                <td\n                                                    class='text-center align-middle'\n                                                    style='width: 150px; color: #ffffff; font-size: 1.2em;'\n                                                >\n                                                    <nobr>\n                                                        {musher.finishTime < 9999999999 ? <>\n                                                            {musher.diffToFirstFinishTime > 0 ? <>\n                                                                {util.secToHms(musher.diffToFirstFinishTime)}\n                                                            </> : <>\n                                                                {mu.formatDate(util.parseInputDate(musher.finishTime), { locale: language, day: 'numeric', month: 'numeric', hour12: false, hour: '2-digit', minute: '2-digit' })}\n                                                            </>}\n                                                        </> : <>\n                                                            <span class='text-muted'><i class='fas fa-compass' /></span> {mu.windDirection(musher.bearing)}\n                                                            <span class='text-muted font-weight-light ml-3'><i class='fas fa-tachometer-alt' /></span> {util.format(musher.speed || 0, 1)} km/h<br />\n                                                            {/* {util.format(musher.totalDistanceOnTrack, 1)} km */}\n                                                            <span class='text-muted font-weight-light'><i class='fas fa-flag-checkered' /></span> {util.format(musher.distanceToFinish, 1)} km\n                                                            {musher.distanceToFinish !== musher.distanceToFirst && musher.distanceToFirst > 0 && <>\n                                                                <span class='text-muted font-weight-light ml-3'>1st:</span> {util.format(musher.distanceToFirst, 1)} km\n                                                            </>}\n                                                            {musher.distanceToFinish !== musher.distanceToForward && musher.distanceToForward > 0 && <>\n                                                                <span class='text-muted font-weight-light ml-3'><i class='fas fa-arrow-up' /></span> {util.format(musher.distanceToForward, 1)} km\n                                                            </>}\n                                                            {musher.distanceToBehind > 0 && <>\n                                                                <span class='text-muted font-weight-light ml-3'><i class='fas fa-arrow-down' /></span> {util.format(musher.distanceToBehind, 1)} km\n                                                            </>}\n                                                        </>}\n                                                    </nobr>\n                                                </td>\n                                            </tr>\n                                        </>);\n                                    })}\n                                    {/* <tr>\n                                        <td\n                                            colspan='3'\n                                            class='text-center'\n                                        >\n                                            <img src='https://themusher.app/assets/logo-qpaws-dark.png' height='70' />\n                                        </td>\n                                    </tr> */}\n                                </tbody>\n                                <tfoot>\n                                    <tr>\n                                        <td\n                                            colspan='4'\n                                            class='px-5 py-4 text-center overflow-hidden'\n                                            style='background-color: #FB4114; color: #ffffff; border-radius: 0 0 10px 10px; font-size: 1.1em;'\n                                        >\n                                            <nobr class='mr-4'>QPaws app</nobr>\n\n                                            <img src='https://themusher.app/assets/appstore-download.png' height='40' class='ml-5 mr-1' />\n                                            <img src='https://themusher.app/assets/playstore-download.png' height='40' class='mx-1' />\n                                        </td>\n                                    </tr>\n                                </tfoot>\n                            </table>\n\n                        {/* </div> */}\n                    </div>\n                </div>\n            </div>\n        </>);\n    }\n}\n\nexport default TvTop10;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverelementonly\":\"hoverelementonly__3_DrK\",\"hoverElement\":\"hoverElement__3ED7Q\",\"hoverelementhide\":\"hoverelementhide__2AP13\"};"],"sourceRoot":""}