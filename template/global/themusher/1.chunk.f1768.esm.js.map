{"version":3,"sources":["webpack:///./components/lineGraph/style.css","webpack:///./components/lineGraph/index.js"],"names":["module","exports","getTicks","count","min","max","reverse","prefix","postfix","loop","Array","from","keys","range","Math","ceil","floor","map","d","parseInt","transformXTick","tick","fn","util","isFunction","match","msDiff","replace","now","epoch","isoDate","transformYTick","normalizeRange","val","newMin","newMax","round5","x","roundDown","sign","abs","findMinY","data","values","arr","isArray","isNumber","y","findMaxY","controlPoint","current","previous","next","o","pointA","pointB","lengthX","lengthY","length","sqrt","pow","angle","atan2","lineProperties","PI","cos","sin","bezierCommand","point","i","a","cpsX","cpsY","cpeX","cpeY","lineCommand","svgPath","points","command","opts","maxX","firstPoint","height","lastPoint","dPrefix","dPostfix","lineFromXzero","lineFromXmax","width","reduce","acc","makePaths","idx","yMin","yMax","xMin","xMax","yRangeMin","yRangeMax","offsetY","maxMinFixed","smooth","avgWindow","yMaxMinRound","dataMap","minX","minY","maxY","realHeight","fnX","dataVal","round","isDefined","xVal","fnY","yVal","dataArray","p","filter","e","finalDataArray","windowSize","getter","value","setter","get","result","leftOffeset","to","sum","j","smoothValues","l","ySmooth","dOriginal","makePath","undefined","avgWindowLeft","avgWindowRight","smoothLeft","smoothRight","initialState","mouseData","LineChart","observer","Component","constructor","props","super","mouseMove","this","stores","getCoordsWithPadding","layerX","layerY","appState","setMousePosition","state","svgRef","svgContainerRef","paddingLeft","paddingTop","paddingBottom","showYTicksLeft","showXTicks","PADDING_TOP","PADDING_BOTTOM","svgHeight","clientHeight","clientWidth","getMouseCoordX","xPos","getCoordX","getTextBoxX","mousePos","align","subtractPadding","pos","getMouseData","key","opt","autoLimit","padding","isObject","dataMapCurrent","Object","rest","resto","componentDidMount","showValueLeftLine","showValueRightLine","scrollToRight","addEventListener","scrollLeft","scrollLeftMax","scrollWidth","componentWillUnmount","removeEventListener","render","paddingRight","tickCount","showYTicksRight","xTicks","xTicksVal","xTicksLink","yTicksLeft","yTicksLeftVal","yTicksLeftPrefix","yTicksLeftPostfix","yTicksLeftWidth","yTicksRight","yTicksRightVal","yTicksRightPrefix","yTicksRightPostfix","yTicksRightWidth","yMaxLeft","yMinLeft","yMaxMinLeftRound","yMaxRight","yMinRight","yMaxMinRightRound","rangeMinLeft","rangeMaxLeft","rangeMinRight","rangeMaxRight","dataLeft","dataRight","legendLeft","legendRight","unitLeft","unitRight","dataFillLeft","dataFillRight","hoverValLeft","hoverValRight","legendFontSize","legendLineHeight","hoverFontSize","ticksFontSize","marker","markers","darkmode","PADDING_LEFT","PADDING_RIGHT","LEGEND_LINE_HEIGHT","LEGEND_FONT_SIZE","HOVER_FONT_SIZE","TICKS_FONT_SIZE","common","MIN_Y_LEFT","MAX_Y_LEFT","MIN_Y_RIGHT","MAX_Y_RIGHT","MIN_X","findMinX","concat","MAX_X","findMaxX","pathLeft","pathRight","TOTAL_GRAPHS_LEFT","TOTAL_GRAPHS_RIGHT","TOTAL_GRAPHS","X_TICKS","Y_TICKS_LEFT","Y_TICKS_RIGHT","markerX","class","style","lineChart","ref","c","onTouchstart","mu","captureEvents","onTouchend","onTouchmove","onScroll","xmlns","svg","viewBox","preserveAspectRatio","path","fill-rule","x1","x2","y1","y2","mouseLine","currentStyleIdx","className","classFillLeft","pathOriginal","m","mX","rx","ry","mouseHoverBox","font-size","mouseHoverDarkmode","mouseHover","hoverVal","dy","text-anchor","left","bottom","v","data-value","href","legend","legendOriginal","pathText","top"],"mappings":"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","file":"1.chunk.f1768.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"lineChart__1V7gu\",\"svg\":\"svg__2VZNe\",\"pathText\":\"pathText__2RfbE\",\"pathOriginal\":\"pathOriginal__9eH9i\",\"legendOriginal\":\"legendOriginal__2ZbOt\",\"pathLeft0\":\"pathLeft0__3tOjN\",\"pathLeftFill0\":\"pathLeftFill0__3QXUB\",\"legendLeft0\":\"legendLeft0__H5zqB\",\"pathLeft1\":\"pathLeft1__3XeI-\",\"legendLeft1\":\"legendLeft1__1vXUq\",\"pathLeft2\":\"pathLeft2__Jskj_\",\"legendLeft2\":\"legendLeft2__38D1t\",\"pathLeft3\":\"pathLeft3__vtNwg\",\"legendLeft3\":\"legendLeft3__tROYd\",\"pathLeft4\":\"pathLeft4__ZfOXV\",\"legendLeft4\":\"legendLeft4__1d0WE\",\"pathLeft5\":\"pathLeft5__1V5kT\",\"legendLeft5\":\"legendLeft5__3PSRY\",\"pathLeft6\":\"pathLeft6__3g2rw\",\"legendLeft6\":\"legendLeft6__2gdN9\",\"pathLeft7\":\"pathLeft7__2aVhq\",\"legendLeft7\":\"legendLeft7__3n5R1\",\"pathLeft8\":\"pathLeft8__3LkIB\",\"legendLeft8\":\"legendLeft8__1cA-J\",\"pathLeft9\":\"pathLeft9__1eWVE\",\"legendLeft9\":\"legendLeft9__1g73E\",\"pathRight0\":\"pathRight0__3sPo3\",\"legendRight0\":\"legendRight0__2sF9z\",\"pathRight1\":\"pathRight1__16EJJ\",\"legendRight1\":\"legendRight1__1ryhw\",\"pathRight2\":\"pathRight2__1giMc\",\"legendRight2\":\"legendRight2__1Aub9\",\"pathRight3\":\"pathRight3__yhWxI\",\"legendRight3\":\"legendRight3__2TdGl\",\"pathRight4\":\"pathRight4__3M2kd\",\"legendRight4\":\"legendRight4__2ySNI\",\"pathRight5\":\"pathRight5__1IsUE\",\"legendRight5\":\"legendRight5__3amxo\",\"pathRight6\":\"pathRight6__37j9X\",\"legendRight6\":\"legendRight6__q3gxO\",\"pathRight7\":\"pathRight7__2k1bu\",\"legendRight7\":\"legendRight7__1gMWB\",\"pathRight8\":\"pathRight8__xUK7j\",\"legendRight8\":\"legendRight8__1MmGE\",\"pathRight9\":\"pathRight9__rL-jI\",\"legendRight9\":\"legendRight9__1z3dO\",\"x-axis\":\"x-axis__1601s\",\"y-axis-left\":\"y-axis-left__3tpCF\",\"y-axis-right\":\"y-axis-right__3gWmK\",\"marker\":\"marker__2peOe\",\"markers\":\"markers__2lso3\",\"mouseHover\":\"mouseHover__2B4N6\",\"mouseHoverDarkmode\":\"mouseHoverDarkmode__3VPOP\",\"mouseHoverBox\":\"mouseHoverBox__3fJuY\",\"mouseLine\":\"mouseLine__1cdau\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nimport style from './style.css';\n\nimport mu from '../../lib/musher-util';\n\nconst TEXT_BOX_PADDING_X = 10;\nconst TEXT_PADDING_X = 20;\n\nfunction getTicks(count, min, max, reverse = false, prefix = '', postfix = '') {\n    let loop = Array.from(Array(count).keys());\n    if (reverse) {\n        loop = loop.reverse();\n    }\n    const range = Math.ceil(max) - Math.floor(min);\n    if (prefix === '' && postfix === '') {\n        return loop.map(d => parseInt((range / (count - 1) * d), 10) + Math.floor(min));\n    }\n    return loop.map(d => `${prefix}${parseInt((range / (count - 1) * d), 10) + Math.floor(min)}${postfix}`);\n}\n\nfunction transformXTick(tick, fn) {\n    if (util.isFunction(fn)) {\n        return fn(tick);\n    }\n    if (typeof tick === 'string') {\n        if (tick.match(/\\d+h/)) {\n            const msDiff = tick.replace(/h/g, '') * 3600 * 1000;\n            const now = util.epoch();\n            const then = now - msDiff;\n            return util.isoDate(then);\n        }\n    }\n    return tick;\n}\n\nfunction transformYTick(tick, fn) {\n    if (util.isFunction(fn)) {\n        return fn(tick);\n    }\n    return tick;\n}\n\nfunction normalizeRange(val, min, max, newMin, newMax) {\n    return newMin + (val - min) * (newMax - newMin) / (max - min);\n}\n\nfunction round5(x, roundDown = false) {\n    let sign = 1;\n    if (x < 0) {\n        sign = -1;\n    }\n    if (roundDown) {\n        if (sign === 1) {\n            return Math.floor(Math.abs(x) / 5) * 5 * sign;\n        }\n        return Math.ceil(Math.abs(x) / 5) * 5 * sign;\n    }\n    if (sign === 1) {\n        return Math.ceil(Math.abs(x) / 5) * 5 * sign;\n    }\n    return Math.floor(Math.abs(x) / 5) * 5 * sign;\n}\n\nfunction findMinX({ data, min }) {\n    const values = data.map((arr) => {\n        if (util.isArray(arr)) {\n            if (util.isNumber(min)) {\n                return Math.min(min, ...arr.map(d => d.x));\n            }\n            return Math.min(...arr.map(d => d.x));\n        }\n    });\n    return Math.min(...values);\n}\n\nfunction findMaxX({ data, max }) {\n    const values = data.map((arr) => {\n        if (util.isArray(arr)) {\n            if (util.isNumber(max)) {\n                return Math.max(max, ...arr.map(d => d.x));\n            }\n            return Math.max(...arr.map(d => d.x));\n        }\n    });\n    return Math.max(...values);\n}\n\nfunction findMinY({ data, min }) {\n    const values = data.map((arr) => {\n        if (util.isArray(arr)) {\n            if (util.isNumber(min)) {\n                return Math.min(min, ...arr.map(d => d.y));\n            }\n            return Math.min(...arr.map(d => d.y));\n        }\n    });\n    return Math.min(...values);\n}\n\nfunction findMaxY({ data, max }) {\n    const values = data.map((arr) => {\n        // console.log(arr);\n        if (util.isArray(arr)) {\n            if (util.isNumber(max)) {\n                return Math.max(max, ...arr.map(d => d.y));\n            }\n            return Math.max(...arr.map(d => d.y));\n        }\n    });\n    return Math.max(...values);\n}\n\nfunction smoothValues(arr, windowSize = 2, getter = (value) => value, setter) {\n    const get = getter\n    const result = []\n    for (let i = 0; i < arr.length; i += 1) {\n        const leftOffeset = i - windowSize\n        const from = leftOffeset >= 0 ? leftOffeset : 0\n        const to = i + windowSize + 1\n        let count = 0\n        let sum = 0\n        for (let j = from; j < to && j < arr.length; j += 1) {\n            sum += get(arr[j])\n            count += 1\n        }\n        result[i] = setter ? setter(arr[i], sum / count) : sum / count\n    }\n    return result\n}\n\n\n// Properties of a line\n// I:  - pointA (array) [x,y]: coordinates\n//     - pointB (array) [x,y]: coordinates\n// O:  - (object) { length: l, angle: a }: properties of the line\nfunction lineProperties(pointA, pointB) {\n    const lengthX = pointB[0] - pointA[0];\n    const lengthY = pointB[1] - pointA[1];\n    return {\n        length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n        angle: Math.atan2(lengthY, lengthX),\n    };\n}\n\n// Position of a control point\n// I:  - current (array) [x, y]: current point coordinates\n//     - previous (array) [x, y]: previous point coordinates\n//     - next (array) [x, y]: next point coordinates\n//     - reverse (boolean, optional): sets the direction\n// O:  - (array) [x,y]: a tuple of coordinates\nfunction controlPoint(current, previous, next, reverse) {\n    // When 'current' is the first or last point of the array\n    // 'previous' or 'next' don't exist.\n    // Replace with 'current'\n    const p = previous || current;\n    const n = next || current;\n\n    // The smoothing ratio\n    const smoothing = 0.2;\n\n    // Properties of the opposed-line\n    const o = lineProperties(p, n);\n\n    // If is end-control-point, add PI to the angle to go backward\n    const angle = o.angle + (reverse ? Math.PI : 0);\n    const length = o.length * smoothing;\n\n    // The control point position is relative to the current point\n    const x = current[0] + Math.cos(angle) * length;\n    const y = current[1] + Math.sin(angle) * length;\n    return [x, y]\n}\n\n// Create the bezier curve command\n// I:  - point (array) [x,y]: current point coordinates\n//     - i (integer): index of 'point' in the array 'a'\n//     - a (array): complete array of points coordinates\n// O:  - (string) 'C x2,y2 x1,y1 x,y': SVG cubic bezier C command\nfunction bezierCommand(point, i, a) {\n    // start control point\n    const [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point)  // end control point\n    const [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true);\n    return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1]}`\n}\n\n// Svg path line command\n// I:  - point (array) [x, y]: coordinates\n// O:  - (string) 'L x,y': svg line command\nfunction lineCommand(point) {\n    if (point[1] === null) {\n        return `M ${point[0]} ${point[1]}`;\n    }\n    return `L ${point[0]} ${point[1]}`;\n}\n\n// Render the svg <path> element\n// I:  - points (array): points coordinates\n//     - command (function)\n//       I:  - point (array) [x,y]: current point coordinates\n//           - i (integer): index of 'point' in the array 'a'\n//           - a (array): complete array of points coordinates\n//       O:  - (string) a svg path command\n// O:  - (string): a Svg <path> element\nfunction svgPath(points, command, opts = {}) {\n    // build the d attributes by looping over the points\n    const maxX = Math.max(...points.map(d => d[0]));\n    const minX = Math.min(...points.map(d => d[0]));\n    const firstPoint = points[0] || [[0, opts.height]];\n    const lastPoint = points[points.length - 1] || [[maxX, opts.height]];\n\n    let dPrefix;\n    if (opts.lineFromXzero) {\n        dPrefix = `M ${0},${opts.height} L ${firstPoint[0] - 20},${opts.height - 1}`;\n    } else {\n        dPrefix = `M ${firstPoint[0]},${firstPoint[1]} L ${firstPoint[0]},${firstPoint[1]}`;\n    }\n    let dPostfix;\n    if (opts.lineFromXmax) {\n        dPostfix = `L ${lastPoint[0] + 10},${opts.height} L ${opts.width},${opts.height - 1}`;\n    } else {\n        dPostfix = `L ${lastPoint[0]},${lastPoint[1]} L ${lastPoint[0]},${lastPoint[1]}`;\n    }\n\n    const d = points.reduce((acc, point, i, a) => i === 0\n        // if first point\n        ? `L ${point[0]},${point[1]}`\n        // else\n        : `${acc} ${command(point, i, a)}`\n    , '');\n\n    return `${dPrefix} ${d} ${dPostfix}`;\n}\n\nfunction makePaths(opts) {\n    return opts.data.map((d, idx) => makePath({\n        ...opts,\n        data: d,\n        yRangeMin: util.isArray(opts.yRangeMin) ? opts.yRangeMin[idx] : undefined,\n        yRangeMax: util.isArray(opts.yRangeMax) ? opts.yRangeMax[idx] : undefined,\n        avgWindow: util.isArray(opts.avgWindowLeft) ? opts.avgWindowLeft[idx] : (util.isArray(opts.avgWindowRight) ? opts.avgWindowRight[idx] : undefined),\n        smooth: util.isArray(opts.smoothLeft) ? opts.smoothLeft[idx] : (util.isArray(opts.smoothRight) ? opts.smoothRight[idx] : undefined),\n    }));\n}\n\nfunction makePath({ data, yMin, yMax, xMin, xMax, width, height, yRangeMin, yRangeMax,\n    offsetY = 0, maxMinFixed = false, smooth = false, avgWindow = 0, lineFromXzero, lineFromXmax,\n    yMaxMinRound,\n}) {\n    const dataMap = {};\n    if (data && data.length) {\n        const minX = xMin || Math.min(...data.map(d => d.x), xMin);\n        const maxX = xMax || Math.max(...data.map(d => d.x), xMax);\n\n        let minY;\n        let maxY;\n        if (maxMinFixed) {\n            minY = util.isNumber(yMin) ? yMin : findMinY({ data });\n        } else {\n            minY = util.isNumber(yMin) ? findMinY({ data, min: yMin }) : findMinY({ data });\n            if (yMaxMinRound) {\n                minY = round5(minY, true);\n            }\n        }\n        if (maxMinFixed) {\n            maxY = util.isNumber(yMax) ? yMax : findMaxY({ data });\n        } else {\n            maxY = util.isNumber(yMax) ? findMaxY({ data, max: yMax }) : findMaxY({ data });\n            if (yMaxMinRound) {\n                maxY = round5(maxY);\n            }\n        }\n\n        const realHeight = height;\n        const fnX = (val, idx) => {\n            if (val === -1) {\n                return -1;\n            }\n\n            const dataVal = normalizeRange(val, minX, maxX, minX, maxX);\n            const x = Math.round(normalizeRange(dataVal, minX, maxX, 0, width));\n            // const x = Math.round(val / maxX * width);\n            if (util.isDefined(idx)) {\n                if (!dataMap[idx]) {\n                    dataMap[idx] = {};\n                }\n                dataMap[idx].x = x;\n                dataMap[idx].xVal = val;\n            }\n            return x;\n        }\n\n        const fnY = (val, idx) => {\n            if (val === -1) {\n                return height;\n            }\n            let dataVal = val;\n            if (util.isNumber(yRangeMin) && util.isNumber(yRangeMax)) {\n                dataVal = normalizeRange(dataVal, minY, maxY, yRangeMin, yRangeMax);\n                return realHeight - normalizeRange(dataVal, yRangeMin, yRangeMax, 0, height - offsetY);\n            }\n            if (dataVal === null) {\n                return null;\n            }\n            dataVal = normalizeRange(dataVal, minY, maxY, minY, maxY);\n            const y = Math.round(realHeight - normalizeRange(dataVal, minY, maxY, 0, height - offsetY));\n            if (util.isDefined(idx)) {\n                if (!dataMap[idx]) { dataMap[idx] = {}; }\n                dataMap[idx].y = y;\n                dataMap[idx].yVal = dataVal;\n            }\n            return y;\n        };\n\n        const dataArray = data.map((p, idx) => [fnX(p.x, idx + 1), fnY(p.y, idx + 1)]).filter(e => e[1] !== null);\n        const finalDataArray = avgWindow > 0 ? smoothValues(dataArray, avgWindow, (e) => e[1], (e, val) => [e[0], val]) : dataArray;\n        for (let i = 0, l = finalDataArray.length; i < l; i += 1) {\n            if (util.isDefined(dataMap[i])) {\n                dataMap[i + 1].ySmooth = finalDataArray[i][1];\n            }\n        }\n\n        const d = svgPath(finalDataArray, smooth ? bezierCommand : lineCommand, {\n            height,\n            width,\n            lineFromXzero,\n            lineFromXmax,\n        });\n        const dOriginal = svgPath(dataArray, lineCommand, { height });\n        return { d, maxX, maxY, minY, dOriginal, dataMap };\n    }\n    return {};\n}\n\nconst initialState = {\n    mouseData: {},\n};\n\n@observer\nclass LineChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.svgRef = null;\n        this.svgContainerRef = null;\n    }\n\n    mouseMove = (e) => {\n        if (this.props.stores) {\n            const { x, y } = this.getCoordsWithPadding(e.layerX, e.layerY);\n            const { appState } = this.props.stores;\n            appState.setMousePosition([x, y]);\n        }\n    };\n\n    getCoordsWithPadding(xVal, yVal) {\n        if (!this.svgRef) {\n            return {};\n        }\n\n        const {\n            width = 600,\n            height = 200,\n            paddingLeft,\n            // paddingRight,\n            paddingTop,\n            paddingBottom,\n            showYTicksLeft,\n            // showYTicksRight,\n            showXTicks,\n        } = this.props;\n\n        const PADDING_LEFT = paddingLeft || (showYTicksLeft ? 35 : 0);\n        const PADDING_RIGHT = 0; //paddingRight || (showYTicksRight ? 35 : 0);\n        const PADDING_TOP = paddingTop;\n        const PADDING_BOTTOM = paddingBottom || (showXTicks ? 20 : 0);\n        // console.log({ PADDING_LEFT, PADDING_RIGHT, PADDING_TOP, PADDING_BOTTOM });\n\n        const svgWidth = this.svgRef.clientWidth;\n        const svgHeight = this.svgRef.clientHeight;\n\n        const x = parseInt(normalizeRange(xVal, PADDING_LEFT, svgWidth, PADDING_RIGHT, width), 10);\n        const y = parseInt(normalizeRange(yVal, PADDING_TOP, svgHeight, PADDING_BOTTOM, height), 10);\n\n        return { x, y };\n    }\n\n    getMouseCoordX(maxX, xPos) {\n        const { width = 600 } = this.props;\n        return parseInt(normalizeRange(xPos, 0, width, 0, maxX), 10) + 1;\n    }\n\n    getCoordX(minX, maxX, x) {\n        const { width = 600 } = this.props;\n        return normalizeRange(x, minX, maxX, 0, width);\n    }\n\n    getTextBoxX(mousePos, align, subtractPadding = 0) {\n        const RIGHT_TEXT_OFFSET = 150;\n        const LEFT_SIDE_OF_MOUSE_LINE = 180;\n        const { width = 600 } = this.props;\n\n        const pos = (mousePos / width * 100) > 75 ? mousePos - LEFT_SIDE_OF_MOUSE_LINE : mousePos;\n        if (align === 'right') {\n            return pos + TEXT_PADDING_X - subtractPadding + RIGHT_TEXT_OFFSET;\n        }\n        return pos + TEXT_PADDING_X - subtractPadding;\n    }\n\n    getMouseData(minX, maxX, dataMap, xPos, key, opt = { autoLimit: false, padding: 0 }) {\n        const { width = 600 } = this.props;\n        const x = parseInt(normalizeRange(xPos, 0, width, minX, maxX), 10) + 1;\n        if (!util.isObject(dataMap)) {\n            return null;\n        }\n        // Find closest value to current mouse position.\n        const dataMapArr = Object.values(dataMap);\n        const dataMapCurrent = dataMapArr.reduce(({ xVal, ...resto }, { xVal: a, ...rest }) =>\n            Math.abs(x - a) < Math.abs(x - xVal) ? { xVal: a, ...rest } : { xVal, ...resto }\n        );\n\n\n        if (util.isObject(dataMapCurrent)) {\n            if (!key) {\n                return dataMapCurrent;\n            }\n            // if (opt.autoLimit && key === 'y') {\n            //     const val = dataMapCurrent.yVal;\n            //     if (val > height / 2) {\n            //         return val - 70 - opt.padding;\n            //     }\n            //     return val + 20 - opt.padding;\n            // }\n            // if (opt.autoLimit && key === 'x') {\n            //     const val = dataMapCurrent.x;\n            //     if (val > width / 2) {\n            //         // console.log(`autoLimit=${autoLimit}, key=${key}, val=${val}, width=${width}`)\n            //         return val - 160 - opt.padding;\n            //     }\n            //     return val + 20 - opt.padding;\n            // }\n            const val = dataMapCurrent[key];\n            return val;\n        }\n    }\n\n    componentDidMount() {\n        const { showValueLeftLine, showValueRightLine, scrollToRight = false } = this.props;\n        if(showValueLeftLine || showValueRightLine) {\n            this.svgRef.addEventListener('mousemove', this.mouseMove);\n        }\n        if (this.svgContainerRef && scrollToRight) {\n            const maxScroll = this.svgContainerRef.scrollLeftMax || (this.svgContainerRef.scrollWidth - this.svgContainerRef.clientWidth);\n            this.svgContainerRef.scrollLeft = maxScroll;\n        }\n        // onMouseMove={this.mouseMove}\n    }\n\n    componentWillUnmount() {\n        const { showValueLeftLine, showValueRightLine } = this.props;\n        if(showValueLeftLine || showValueRightLine) {\n            this.svgRef.removeEventListener('mousemove', this.mouseMove);\n        }\n    }\n\n    render() {\n        const {\n            width = 600,         // Width of svg.\n            height = 200,        // Height of svg.\n            offsetY = 0,         // Data plot offset y axis.\n            paddingLeft = 0,     // Make room for yTicksLeft.\n            paddingRight = 0,    // Make room for yTicksRight.\n            paddingTop = 0,      // Make room for legends.\n            paddingBottom = 0,   // Make room for xTicks.\n            tickCount = 6,       // Number of ticks to show\n\n            showXTicks,          // Show X ticks.\n            showYTicksLeft,      // Show Y ticks left.\n            showYTicksRight,     // Show Y ticks right.\n\n            xTicks,              // xTicks array to use instead of values. JSON.stringified and backslash escaped.\n            xTicksVal,           // Function used to show x ticks\n            xTicksLink,          // Link to xticks valuies.\n\n            yTicksLeft,          // yTicks array to use instead of values. JSON.stringified and backslash escaped.\n            yTicksLeftVal,       // Function used to show y ticks\n            yTicksLeftPrefix,\n            yTicksLeftPostfix,\n            yTicksLeftWidth,\n\n            yTicksRight,         // yTicks array to use instead of values. JSON.stringified and backslash escaped.\n            yTicksRightVal,      // Function used to show y ticks\n            yTicksRightPrefix,\n            yTicksRightPostfix,\n            yTicksRightWidth,\n\n            xMin,\n            xMax,\n\n            yMaxLeft,            // Y max value to use for yTicks\n            yMinLeft,            // Y min value to use for yTicks\n            yMaxMinLeftRound = true, // Y min max value to use for yTicks\n\n            yMaxRight,           // Y max value to use for yTicks\n            yMinRight,           // Y min value to use for yTicks\n            yMaxMinRightRound = true, // Y min max value to use for yTicks\n\n            rangeMinLeft = [],\n            rangeMaxLeft = [],\n\n            rangeMinRight = [],\n            rangeMaxRight = [],\n\n            dataLeft = [],\n            dataRight = [],\n\n            legendLeft = [],\n            legendRight = [],\n\n            unitLeft = [],\n            unitRight = [],\n\n            dataFillLeft = [],\n            dataFillRight = [],\n\n            avgWindowLeft = [],\n            avgWindowRight = [],\n\n            smoothLeft = [],\n            smoothRight = [],\n\n            hoverValLeft = [],   // Function used to show value for hover.\n            hoverValRight = [],  // Function used to show value for hover.\n\n            showValueLeftLine = true,\n            showValueRightLine = true,\n\n            lineFromXzero,\n            lineFromXmax,\n\n            legendFontSize = '14px',\n            legendLineHeight = 14,\n\n            hoverFontSize = '12px',\n            ticksFontSize = '12px',\n\n            marker,\n            markers = [],\n        } = this.props;\n        const { appState = {} } = this.props.stores || {};\n        const { mousePos = [], darkmode } = appState;\n\n        const PADDING_LEFT = paddingLeft || (showYTicksLeft ? 35 : 0);\n        const PADDING_RIGHT = paddingRight || (showYTicksRight ? 20 : 0);\n        const PADDING_TOP = paddingTop;\n        const PADDING_BOTTOM = paddingBottom || (showXTicks ? 20 : 0);\n        // console.log({ PADDING_LEFT, PADDING_RIGHT, PADDING_TOP, PADDING_BOTTOM });\n        const LEGEND_LINE_HEIGHT = legendLineHeight;\n        const LEGEND_FONT_SIZE = legendFontSize;\n\n        const HOVER_FONT_SIZE = hoverFontSize;\n        const TICKS_FONT_SIZE = ticksFontSize;\n\n        const common = {\n            width,\n            height,\n            offsetY,\n        };\n\n        // console.table(xTicks);\n        // console.table(yTicks);\n        const MIN_Y_LEFT = round5(findMinY({ data: dataLeft, min: yMinLeft }), true);\n        const MAX_Y_LEFT = round5(findMaxY({ data: dataLeft, max: yMaxLeft }), false);\n        const MIN_Y_RIGHT = round5(findMinY({ data: dataRight, min: yMinRight }), true);\n        const MAX_Y_RIGHT = round5(findMaxY({ data: dataRight, max: yMaxRight }), false);\n\n        const MIN_X = findMinX({ data: dataLeft.concat(dataRight), min: xMin });\n        const MAX_X = findMaxX({ data: dataLeft.concat(dataRight), max: xMax });\n        // console.log({ MIN_Y_LEFT, MAX_Y_LEFT, MIN_Y_RIGHT, MAX_Y_RIGHT, MIN_X, MAX_X });\n\n        const pathLeft = makePaths({\n            ...common,\n            data: dataLeft,\n            xMin: MIN_X,\n            xMax: MAX_X,\n            yMin: MIN_Y_LEFT,\n            yMax: MAX_Y_LEFT,\n            yRangeMin: rangeMinLeft,\n            yRangeMax: rangeMaxLeft,\n            maxMinFixed: true,\n            smoothLeft,\n            avgWindowLeft,\n            offsetY: PADDING_TOP,\n            lineFromXzero,\n            lineFromXmax,\n            yMaxMinRound: yMaxMinLeftRound,\n        });\n\n        const pathRight = makePaths({\n            ...common,\n            data: dataRight,\n            xMin: MIN_X,\n            xMax: MAX_X,\n            yMin: MIN_Y_RIGHT,\n            yMax: MAX_Y_RIGHT,\n            yRangeMin: rangeMinRight,\n            yRangeMax: rangeMaxRight,\n            maxMinFixed: true,\n            smoothRight,\n            avgWindowRight,\n            offsetY: PADDING_TOP,\n            lineFromXzero,\n            lineFromXmax,\n            yMaxMinRound: yMaxMinRightRound,\n        });\n        // console.log(pathLeft);\n\n        const TOTAL_GRAPHS_LEFT = pathLeft.length;\n        const TOTAL_GRAPHS_RIGHT = pathRight.length;\n        const TOTAL_GRAPHS = TOTAL_GRAPHS_LEFT + TOTAL_GRAPHS_RIGHT;\n        const X_TICKS = xTicks || getTicks(tickCount, MIN_X, MAX_X);\n        const Y_TICKS_LEFT = yTicksLeft || getTicks(tickCount, MIN_Y_LEFT, MAX_Y_LEFT, true, yTicksLeftPrefix, yTicksLeftPostfix);\n        const Y_TICKS_RIGHT = yTicksRight || getTicks(tickCount, MIN_Y_RIGHT, MAX_Y_RIGHT, true, yTicksRightPrefix, yTicksRightPostfix);\n        const markerX = this.getCoordX(MIN_X, MAX_X, marker);\n        return (\n            <div class={style.lineChart} style={`height: ${height}px; overflow: hidden;`}>\n                <div\n                    class='overflow-auto position-relative w-100 h-100'\n                    style='overflow-y: hidden !important;'\n                    ref={c => this.svgContainerRef = c}\n                    onTouchstart={mu.captureEvents}\n\t\t\t\t\tonTouchend={mu.captureEvents}\n\t\t\t\t\tonTouchmove={mu.captureEvents}\n\t\t\t\t\tonScroll={mu.captureEvents}\n                >\n                    <svg xmlns='http://www.w3.org/2000/svg' class={style.svg} viewBox={`0 0 ${width} ${height}`}\n                        preserveAspectRatio='none'\n                        style={`padding-left: ${PADDING_LEFT}px; padding-right: ${PADDING_RIGHT}px; padding-bottom: ${PADDING_BOTTOM}px; width: ${width}px; min-width: 100%; max-height: 100%;`}\n                        ref={c => this.svgRef = c}\n                    >\n                        {pathRight && pathRight.reverse().map((path, idx) => {\n                            let mouseData;\n                            if (mousePos && mousePos.length > 0) {\n                                mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                            }\n                            return (\n                                <>\n                                    <path d={path.d}\n                                        class={`${style[TOTAL_GRAPHS_RIGHT > 20 ? 'pathOriginal' : `pathRight${TOTAL_GRAPHS_RIGHT - idx - 1}`]}\n                                            ${dataFillRight[TOTAL_GRAPHS_RIGHT - idx - 1] ? style[`pathRightFill${TOTAL_GRAPHS_RIGHT - idx - 1}`] : ''}`}\n                                        fill-rule='evenodd'\n                                    />\n                                    {showValueRightLine && mousePos && mousePos.length > 0 && path.dataMap\n                                        && mouseData && mouseData.yVal\n                                        && <line\n                                            x1={this.getCoordX(MIN_X, MAX_X, MAX_X)}\n                                            x2={mouseData.x}\n                                            y1={mouseData.ySmooth}\n                                            y2={mouseData.ySmooth}\n                                            class={`${style.mouseLine} ${style[`pathRight${TOTAL_GRAPHS_RIGHT - idx - 1}`]}`} />}\n                                </>\n                            );\n                        })}\n                        {pathLeft && pathLeft.reverse().map((path, idx) => {\n                            let mouseData;\n                            if (mousePos && mousePos.length > 0) {\n                                mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                            }\n                            const currentStyleIdx = TOTAL_GRAPHS_LEFT - idx - 1;\n                            let className = style[`pathLeft${currentStyleIdx}`];\n                            let classFillLeft = style[dataFillLeft[currentStyleIdx] ? style[`pathLeftFill${currentStyleIdx}`] : ''];\n                            if (currentStyleIdx > 9) {\n                                className = style.pathOriginal;\n                            }\n                            return (\n                                <>\n                                    <path d={path.d}\n                                        class={`${className} ${classFillLeft}`}\n                                        fill-rule='evenodd'\n                                    />\n                                    {showValueLeftLine && mousePos && mousePos.length > 0 && path.dataMap\n                                        && mouseData && mouseData.yVal\n                                        && <line\n                                            x1={this.getCoordX(MIN_X, MAX_X, MIN_X)}\n                                            x2={mouseData.x}\n                                            y1={mouseData.ySmooth}\n                                            y2={mouseData.ySmooth}\n                                            class={`${style.mouseLine} ${style[`pathLeft${TOTAL_GRAPHS_LEFT - idx - 1}`]}`} />}\n                                </>\n                            );\n                        })}\n\n                        {/* {dCold && dCold.map(o => <line x1={o[0].x} y1={o[0].y} x2={o[1].x} y2={o[1].y} class={style.pathCold} />)};\n                        {dWarm && dWarm.map(o => <line x1={o[0].x} y1={o[0].y} x2={o[1].x} y2={o[1].y} class={style.pathWarm} />)}; */}\n\n                        {mousePos && mousePos.length > 0 && <line x1={mousePos[0]} y1={height} x2={mousePos[0]} y2='0' class={style.mouseLine} />}\n                        {markerX && <line x1={markerX} y1={height} x2={markerX} y2='0' class={style.marker} />}\n\n                        {markers && markers.map(m => {\n                            const mX = this.getCoordX(MIN_X, MAX_X, m);\n                            return (\n                                <line x1={mX} y1={height} x2={mX} y2='0' class={style.markers} />\n                            );\n                        })}\n\n                        {(showValueLeftLine || showValueRightLine) && pathLeft && mousePos && mousePos.length > 0 && <rect\n                            x={this.getTextBoxX(mousePos[0], '', TEXT_BOX_PADDING_X)}\n                            y={height / 2}\n                            width='165' height={TOTAL_GRAPHS * 15 + 25} rx='5' ry='5' class={style.mouseHoverBox}\n                        />}\n                        {(showValueLeftLine || showValueRightLine) && mousePos && mousePos.length > 0\n                            && <text\n                                x={this.getTextBoxX(mousePos[0])}\n                                y={height / 2}\n                                font-size={HOVER_FONT_SIZE}\n                                class={darkmode ? style.mouseHoverDarkmode : style.mouseHover}\n                                style='border: #ff0000 solid 2px;'\n                            >\n                                {showValueLeftLine && pathLeft && pathLeft.reverse().map((path, idx) => {\n                                    const hoverVal = util.isArray(hoverValLeft) && util.isFunction(hoverValLeft[idx]) ? hoverValLeft[idx] : (val) => val;\n                                    const mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                                    return (\n                                        <>\n                                            {mouseData && idx === 0 && <tspan\n                                                x={this.getTextBoxX(mousePos[0])}\n                                                dy='1.2em'\n                                            >\n                                                {transformXTick(mouseData.xVal, xTicksVal)}\n                                            </tspan>}\n                                            {path.d && path.dataMap && util.isNumber(mouseData.yVal) &&\n                                            <tspan\n                                                // x={this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0], 'x', { autoLimit: true, padding: 0, maxX: MAX_X })}\n                                                // x={this.getCoordX(MIN_X, MAX_X, mouseData.xVal)}\n                                                x={this.getTextBoxX(mousePos[0])}\n                                                dy='1.2em'\n                                                text-anchor='start'\n                                            >\n                                                <tspan class={style[`pathLeft${idx}`]}>--</tspan> {legendLeft[idx]}: {hoverVal(mouseData.yVal)} {unitLeft[idx]}\n                                            </tspan>}\n                                        </>\n                                    );\n                                })}\n                                {showValueRightLine && pathRight && pathRight.reverse().map((path, idx) => {\n                                    const hoverVal = util.isArray(hoverValRight) && util.isFunction(hoverValRight[idx]) ? hoverValRight[idx] : (val) => val;\n                                    let mouseData;\n                                    if (mousePos && mousePos.length > 0) {\n                                        mouseData = this.getMouseData(MIN_X, MAX_X, path.dataMap, mousePos[0]);\n                                    }\n                                    return (\n                                        <>\n                                            {path.d && path.dataMap && util.isNumber(mouseData.yVal) &&\n                                            <tspan\n                                                x={this.getTextBoxX(mousePos[0], 'right')}\n                                                dy='1.2em'\n                                                text-anchor='end'\n                                            >\n                                                {legendRight[idx]}: {hoverVal(mouseData.yVal)} {unitRight[idx]} <tspan class={style[`pathRight${idx}`]}>--</tspan>\n                                            </tspan>}\n                                        </>\n                                    );\n                                })}\n                            </text>}\n                    </svg>\n\n                    {showXTicks && (\n                        <div class={`${style['x-axis']}`}\n                            style={{\n                                left: `${PADDING_LEFT}px`,\n                                bottom: `0px`,\n                                width: `calc(${width}px - ${PADDING_LEFT}px)`,\n                                'font-size': TICKS_FONT_SIZE,\n                            }}\n                        >\n                            {xTicksLink ? (\n                                <>\n                                    {X_TICKS.map(v => <div data-value={transformXTick(v, xTicksVal)} class='position-relative'><a href={`${xTicksLink}${v}`} class='stretched-link'>&nbsp;</a></div>)}\n                                </>\n                            ): (\n                                <>\n                                    {X_TICKS.map(v => <div data-value={transformXTick(v, xTicksVal)} />)}\n                                </>\n                            )}\n                        </div>\n                    )}\n                </div>\n\n                <div\n                    class='position-absolute'\n                    style={`top: 0; left: ${PADDING_LEFT + 20}px;`}\n                >\n                    {legendLeft && legendLeft.map((legend, idx) => {\n                        const currentStyleIdx = idx;\n                        let className = style[`legendLeft${currentStyleIdx}`];\n                        if (currentStyleIdx > 9) {\n                            className = style.legendOriginal;\n                        }\n                        return (\n                            <div class='d-flex align-items-center'>\n                                <span \n                                    class={`${className}`}\n                                />\n                                <small\n                                    class={style.pathText}\n                                    x='35' y={15 + LEGEND_LINE_HEIGHT * idx}\n                                    font-size={LEGEND_FONT_SIZE}\n                                >{legend}</small>\n                            </div>\n                        );\n                    })}\n                </div>\n                <div\n                    class='position-absolute'\n                    style={`top: 0; right: ${PADDING_RIGHT + 70}px;`}\n                >\n                    {legendRight && legendRight.map((legend, idx) => (\n                        <div class='d-flex align-items-center'>\n                            <span\n                                class={`${style[`legendRight${idx}`]}`}\n                                x1={width - 150} y1={10 + LEGEND_LINE_HEIGHT * idx}\n                                x2={width - 130} y2={10 + LEGEND_LINE_HEIGHT * idx}\n                            />\n                            <small\n                                class={style.pathText}\n                                x={width - 125} y={15 + LEGEND_LINE_HEIGHT * idx}\n                                font-size={LEGEND_FONT_SIZE}\n                            >{legend}</small>\n                        </div>\n                    ))}\n                </div>\n\n                {showYTicksLeft && (\n                    <div\n                        class={style['y-axis-left']}\n                        style={{\n                            top: `${PADDING_TOP}px`,\n                            bottom: `${PADDING_BOTTOM}px`,\n                            'font-size': TICKS_FONT_SIZE,\n                            width: `${yTicksLeftWidth}`,\n                        }}\n                    >\n                        {Y_TICKS_LEFT.map(v => <div data-value={transformYTick(v, yTicksLeftVal)} />)}\n                    </div>\n                )}\n                {showYTicksRight && (\n                    <div\n                        class={style['y-axis-right']}\n                        style={{\n                            top: `${PADDING_TOP}px`,\n                            bottom: `${PADDING_BOTTOM}px`,\n                            'font-size': TICKS_FONT_SIZE,\n                            width: `${yTicksRightWidth}`,\n                        }}\n                    >\n                        {Y_TICKS_RIGHT.map(v => <div data-value={transformYTick(v, yTicksRightVal)} />)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default LineChart;\n"],"sourceRoot":""}