{"version":3,"sources":["webpack:///./routes/workouts/index.js","webpack:///./components/workout/table.js"],"names":["MARGIN_TOP","mu","marginTop","MARGIN_BOTTOM","marginBottom","SUB_MENU_MARGIN_TOP","subMenuMarginTop","initialState","isLoading","Workouts","observer","Component","constructor","props","super","loadWorkouts","async","setState","workoutStore","userStore","stores","loadWorkoutSummary","loadWorkoutPlans","getNotifications","year","currentMonth","Date","getMonth","currentYear","util","getYear","seasonStart","parseInt","workoutPlanStore","currentTeam","updateItem","resetGraphPlanWeekDistanceCurrent","load","query","team","seasonYear","seasonMonth","workoutPlans","workoutPlanCurrent","id","prepareWeekGraphs","this","state","getWorkoutSummary","componentDidMount","componentWillReceiveProps","nextProps","month","render","appState","workoutPlan","darkmode","workouts","getLatests","workoutSummaryWeek","class","style","href","callback","key","length","basehref","fields","total","map","workout","WorkoutTable","withText","week","distance","ascend","plan","user","language","MONTHS","getMonths","seasonMonths","monthRange","prevSeasonMonths","xTicksAll","weekRange","wo","partSize","Math","floor","xTicks","i","l","push","m","scope","findWorkoutSummaryMonth"],"mappings":"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","file":"route-workouts.chunk.4bf73.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(true);\nconst MARGIN_BOTTOM = mu.marginBottom();\nconst SUB_MENU_MARGIN_TOP = mu.subMenuMarginTop();\n\nimport Workout from '../../components/workout';\nimport WorkoutSummary from '../../components/workout/summary';\nimport WorkoutGraph from '../../components/workout/graph';\nimport WorkoutTable from '../../components/workout/table';\nimport WorkoutCalendar from '../../components/workout/calendar';\nimport Teams from '../../components/team/teams';\n\nconst initialState = {\n\tisLoading: false,\n};\n\n@observer\nclass Workouts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\tloadWorkouts = async (props = this.props) => {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { workoutStore, userStore } = props.stores;\n\t\tconst { currentTeam } = workoutStore;\n\n\t\t// const currentMonth = new Date().getMonth() + 1;\n        // const { month = currentMonth, year = util.getYear(), team = currentTeam, dog = {} } = props;\n\n\t\t// const { year } = props;\n\t\t// await workoutStore.load({ query: { team: currentTeam, year } });\n\t\tawait this.loadWorkoutSummary(props);\n\t\tawait this.loadWorkoutPlans(props);\n\t\tawait userStore.getNotifications();\n\t\tthis.setState({ isLoading: false });\n\t}\n\n\tloadWorkoutPlans = async (props = this.props) => {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { year } = props;\n\n\t\tconst currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\t\tconst seasonStart = parseInt(year || (currentMonth < 6 ? currentYear - 1 : currentYear), 10);\n\t\tconst { workoutPlanStore, workoutStore } = props.stores;\n\t\tconst { currentTeam } = workoutStore;\n\n\t\tworkoutPlanStore.updateItem('workoutPlans', []);\n\t\tworkoutPlanStore.updateItem('workoutPlan', {});\n\t\tworkoutPlanStore.resetGraphPlanWeekDistanceCurrent();\n\n\t\tif (currentTeam) {\n\t\t\tawait workoutPlanStore.load({ query: {\n\t\t\t\tteam: currentTeam,\n\t\t\t\tseasonYear: seasonStart,\n\t\t\t\tseasonMonth: 6,\n\t\t\t} });\n\t\t\tconst { workoutPlans } = workoutPlanStore;\n\t\t\tconst workoutPlanCurrent = workoutPlans[0] || {};\n\t\t\tif (workoutPlanCurrent.id) {\n\t\t\t\tawait workoutPlanStore.load(workoutPlanCurrent.id);\n\t\t\t\tworkoutPlanStore.prepareWeekGraphs({ year });\n\t\t\t}\n\t\t}\n\t\tthis.setState({ isLoading: false });\n\t}\n\n\t// loadDogs = async () => {\n\t// \tconst { dogStore } = this.props.stores;\n\t// \tconst { currentTeam } = dogStore;\n\t// \tawait dogStore.load({ query: { team: currentTeam }, addData: ['workoutSummary'] });\n\t// }\n\n\t// async loadTracks() {\n\t// \tconst { trackStore } = this.props.stores;\n\t// \tawait trackStore.load();\n\t// }\n\n\tasync loadWorkoutSummary(props = this.props) {\n\n\t\tconst { userStore, workoutStore } = props.stores;\n\t\tconst { year } = props;\n\t\tconst { currentTeam } = workoutStore;\n        await userStore.getWorkoutSummary({ team: currentTeam, year });\n    }\n\n\tcomponentDidMount() {\n\t\tthis.loadWorkouts();\n\t\t// this.loadDogs();\n\t\t// this.loadTracks();\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n        // console.log('componentWillReceiveProps', nextProps);\n        if (nextProps.month !== this.props.month\n            || nextProps.year !== this.props.year\n            || nextProps.team !== this.props.team) {\n            this.loadWorkouts(nextProps);\n        }\n    }\n\n\trender() {\n\t\tconst { isLoading } = this.state;\n\t\tconst { userStore, appState, workoutStore, workoutPlanStore } = this.props.stores;\n\t\tconst { workoutPlan, workoutPlans } = workoutPlanStore;\n\n\t\tconst { month, year } = this.props;\n\t\tconst { currentTeam } = workoutStore;\n\n\t\tconst { darkmode } = appState;\n\t\tconst workouts = workoutStore.getLatests();\n\t\tconst { workoutSummaryWeek = [] } = userStore;\n\n\t\treturn (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n\t\t\t\t<div class='row mb-4 fixed-top' style={`margin-top: ${SUB_MENU_MARGIN_TOP}; background-color: ${darkmode ? '#191d21' : '#f8f9fa'};`}>\n\t\t\t\t\t<div class='col text-center border-bottom border-primary'>\n\t\t\t\t\t\t<a href='/workouts/' class='text-primary stretched-link'><i class='fas fa-chart-line' /> <Text id='workout.index.dashboard'>Oversikt</Text></a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col text-center'>\n\t\t\t\t\t\t<a href='/workouts/list' class='text-secondary stretched-link'><i class='fas fa-list' /> <Text id='workout.index.list'>Liste</Text></a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col text-center'>\n\t\t\t\t\t\t<a href='/workouts/plan' class='text-secondary stretched-link'><i class='fas fa-calendar-alt' /> <Text id='workout.index.plan'>Plan</Text></a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 border-bottom'>\n\t\t\t\t\t\t<Teams stores={this.props.stores} callback={this.loadWorkouts} key={`teams-${currentTeam}`} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-2 mb-2'>\n\t\t\t\t\t\t<a class='btn btn-primary btn-sm float-right'\n\t\t\t\t\t\t\thref='/workouts/edit/new'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i class='fas fa-plus' /> <Text id='workout.index.add-workout'>Legg til treningstur</Text>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3'>\n\t\t\t\t\t\t<WorkoutTable stores={this.props.stores} isLoading={isLoading} year={year} key={`table-${workoutPlan.id}-${workoutPlans.length}`} />\n\t\t\t\t\t\t<WorkoutGraph stores={this.props.stores} isLoading={isLoading} year={year} key={`graph-${workoutPlan.id}-${workoutPlans.length}`} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<WorkoutCalendar stores={this.props.stores} team={currentTeam} basehref={`/workouts/`} month={month} year={year} key={`calendar-${workoutPlan.id}-${workoutPlans.length}`} />\n\t\t\t\t</div>\n\n\n\t\t\t\t<div class='row'>\n\t\t\t\t\t{workouts && workouts.length > 0 && <div class='col-12 mb-4'>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 px-0 mt-4'>\t\t\n\t\t\t\t\t\t\t<h5><Text id='workout.index.last-workouts' fields={{ total: workouts.length }}>Nyeste treningsturer - {workouts.length} stk</Text></h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{workouts && workouts.map(workout => (\n\t\t\t\t\t\t\t<Workout stores={this.props.stores} workout={workout} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>}\n\t\t\t\t</div>\n\n\n\n\t\t\t\t{1 === 2 && <div class='row'>\n\t\t\t\t\t{workoutSummaryWeek && workoutSummaryWeek.length > 0 && <div class='col-12 mb-4'>\n\t\t\t\t\t\t<div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 px-0'>\n\t\t\t\t\t\t\t<h5 class='mt-4'><Text id='workout.index.workout-overview'>Treningsoversikt</Text></h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* {JSON.stringify(workoutSummaryWeek)} */}\n\t\t\t\t\t\t{workoutSummaryWeek && workoutSummaryWeek.reverse().map(summary => (\n\t\t\t\t\t\t\t<WorkoutSummary stores={this.props.stores} summary={summary} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>}\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Workouts;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\n@withText((props) => ({\n    week: <Text id='workout.graph.week' />,\n    distance: <Text id='workout.graph.distance' />,\n    ascend: <Text id='workout.graph.ascend' />,\n    plan: <Text id='workout.graph.plan' />,\n}))\n@observer\nclass WorkoutTable extends Component {\n    render() {\n        const { userStore } = this.props.stores;\n        const { isLoading, year } = this.props;\n        const {\n            user,\n\t\t} = userStore;\n        const { language = 'no' } = user;\n\t\tconst MONTHS = mu.getMonths(language);\n\n        const currentMonth = new Date().getMonth() + 1;\n\t\tconst currentYear = util.getYear();\n\t\tconst seasonStart = parseInt(year || (currentMonth < 6 ? currentYear - 1 : currentYear), 10);\n\n        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(year, monthNum) || {};\n        const seasonMonths = util.monthRange(`${seasonStart}-06-01`, `${seasonStart + 1}-05-31`);\n        const prevSeasonMonths = util.monthRange(`${seasonStart - 1}-06-01`, `${seasonStart}-05-31`);\n        const seasonWeeks = util.weekRange(`${seasonStart}-06-01`, `${seasonStart + 1}-05-31`);\n\n        const xTicksAll = seasonWeeks.map(wo => wo.week);\n        const parts = xTicksAll.length % 6;\n        const partSize = Math.floor(xTicksAll.length / parts);\n        const xTicks = [];\n        for (let i = 0, l = xTicksAll.length; i < l; i += partSize) {\n            xTicks.push(xTicksAll[i]);\n        }\n\n        return (\n            <>\n                <h5><Text id='workout.graph.title'>Treningsstatistikk</Text> {seasonStart} - {seasonStart + 1}</h5>\n                <div class='w-100 mt-3 mb-4'>\n                    {/* <xmp>graphWorkoutSummaryWeekDistanceCurrent: {JSON.stringify(graphWorkoutSummaryWeekDistanceCurrent, null, 4)}</xmp>\n                    <xmp>graphWorkoutSummaryWeekDistancePrev: {JSON.stringify(graphWorkoutSummaryWeekDistancePrev, null, 4)}</xmp> */}\n                    <small class='mb-4'><small>\n                        <table class='table table-sm font-weigth-lighter border-bottom'>\n                            <thead>\n                                <tr>\n                                    <th style='padding: .15rem;'><Text id='workout.graph.season'>Sesong</Text></th>\n                                    {seasonMonths.map(m => (\n                                        <th class='text-right' style='padding: .15rem;'><a href={`/workouts/month/${m.month}/${m.year}`}>{MONTHS[m.month - 1]}</a></th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th scope='row' style='padding: .15rem;'>{seasonStart - 1} - {seasonStart}</th>\n                                    {prevSeasonMonths.map(m => {\n                                        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(m.year, m.month) || {};\n                                        return (\n                                            <>\n                                                <td class='text-right' style='padding: .15rem;'>\n                                                    {/* <nobr>{summaryMonth.distance}</nobr><br /> */}\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month)}</nobr><br />\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month, 'elevation')}</nobr><br />\n                                                </td>\n                                            </>\n                                        );\n                                    })}\n                                    <td class='text-muted' style='padding: .15rem;'>\n                                        <nobr><i class='fas fa-road' /> km</nobr><br />\n                                        <nobr><i class='fas fa-mountain' /> m</nobr><br />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <th scope='row' style='padding: .15rem;'>{seasonStart} - {seasonStart + 1}</th>\n                                    {seasonMonths.map(m => {\n                                        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(m.year, m.month) || {};\n                                        return (\n                                            <>\n                                                <td class='text-right' style='padding: .15rem;'>\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month)}</nobr><br />\n                                                    <nobr>{userStore.findWorkoutSummaryMonth(m.year, m.month, 'elevation')}</nobr><br />\n                                                </td>\n                                            </>\n                                        );\n                                    })}\n                                    <td class='text-muted' style='padding: .15rem;'>\n                                        <nobr><i class='fas fa-road' /> km</nobr><br />\n                                        <nobr><i class='fas fa-mountain' /> m</nobr><br />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </small></small>\n\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WorkoutTable;\n"],"sourceRoot":""}