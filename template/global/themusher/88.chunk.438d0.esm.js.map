{"version":3,"sources":["webpack:///./components/util/scrollIntoView.js","webpack:///./routes/tracks/edit.js","webpack:///./components/form/files.js"],"names":["initialState","ScrollIntoView","observer","Component","constructor","props","super","this","state","container","componentDidMount","horizontal","vertical","behavior","inline","block","scrollIntoView","render","ref","c","MARGIN_TOP","mu","marginTop","MARGIN_TOP_BACK","marginTopBack","MARGIN_BOTTOM","marginBottom","newTrack","Input","handleImageErrored","e","image","target","onerror","setTimeout","src","Date","setDateToNow","field","updateField","track","value","util","isoDate","undefined","id","setTimeToNow","isoTime","removeImage","async","trackStore","stores","name","parentElement","dataset","removeMainImage","saved","type","values","title","icon","help","onInput","toJS","class","for","s3SmallLink","onError","onClick","data-name","images","map","img","object","autoOpen","style","option","data-id","data-field","checked","aria-describedby","InputNew","updateObjectKeyValue","TracksEdit","insertTrack","userStore","insert","getInfo","resetTrack","route","elementtype","isNew","updateFieldValue","parseInt","datatype","skipTimer","newValue","localObjectValue","Array","isArray","split","parseFloat","doUpdateField","clearTimeout","updateTimer","back","history","goBack","setState","createNew","load","updateKeyValue","saveField","loadTrack","insertStatus","gpx","gpxInfo","min","max","mapId","geojson","geoJSON","role","Files","handleAddImage","file","files","uploadStatus","before","after","apiUrl","height","width"],"mappings":"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","file":"88.chunk.438d0.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nconst initialState = {};\n\n@observer\nclass ScrollIntoView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.container = null;\n    }\n\n    componentDidMount() {\n        const { horizontal, vertical = '' } = this.props;\n        const props = {\n            behavior: 'smooth',\n        };\n        if (horizontal) {\n            props.inline = horizontal;\n        }\n        if (vertical) {\n            props.block = vertical;\n        }\n\t\tthis.container.scrollIntoView(props);\n\t}\n\n    render() {\n        return (\n            <div ref={c => this.container = c}>&nbsp;</div>\n        );\n    }\n}\n\nexport default ScrollIntoView;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport linkState from 'linkstate';\nimport { route } from 'preact-router';\nimport { toJS } from 'mobx';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_TOP_BACK = mu.marginTopBack(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport Images from '../../components/form/images';\nimport Files from '../../components/form/files';\nimport Map from '../../components/map';\n\nimport ScrollIntoView from '../../components/util/scrollIntoView';\n\nconst initialState = {\n    newTrack: {},\n};\n\n@observer\nclass Input extends Component {\n    handleImageErrored = (e) => {\n        const image = e.target;\n        image.onerror = null;\n        setTimeout(() => {\n            image.src += `?${new Date()}`;\n        }, 1000);\n    }\n\n    setDateToNow = () => {\n        const { field, updateField, track } = this.props;\n        const value = util.isoDate(undefined, false, false, true);\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, type, isNew = false, skipTimer = false }) => {\n        updateField({ id: track.id, field, value });\n    }\n\n    setTimeToNow = () => {\n        const { field, updateField, track } = this.props;\n        const value = util.isoTime();\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, type, isNew = false, skipTimer = false }) => {\n        updateField({ id: track.id, field, value });\n    }\n\n    removeImage = async (e) => {\n        const { trackStore } = this.props.stores;\n        const { track } = this.props;\n        const imageName = e.target.parentElement.dataset.name || e.target.dataset.name;\n        trackStore.removeImage({\n            id: track.id,\n            name: imageName,\n        });\n    }\n\n    removeMainImage = () => {\n        const { track, field, updateField } = this.props;\n        updateField({ id: track.id, field, value: {} });\n    }\n\n    render() {\n        // const { saved, dog, type = 'text', datalist = [], min, max, step, field, title, icon, help, onInput, updateField } = this.props;\n        const { saved, track, type = 'text', field, values = [], title, icon, help, onInput, updateField } = this.props;\n        let value = toJS(track[field]);\n        if (type === 'date') {\n            if (value) {\n                value = util.isoDate(track[field], false, false, true);\n            }\n        }\n        if (type === 'image') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n\n                    <div class='container-fluid'>\n                        <div class='row'>\n                            {track.image && track.image.s3SmallLink && <div class='col-3 p-1'>\n                                <img src={track.image.s3SmallLink} class='img-fluid border rounded-lg' onError={this.handleImageErrored} />\n                                <button class='btn btn-sm btn-link'\n                                    onClick={this.removeMainImage}\n                                    data-name={track.image.name}\n                                ><i class='fas fa-trash' /> Del</button>\n                                <span class='badge badge-success'>Main</span>\n                            </div>}\n                            {track.images && track.images.map(img => (\n                                <div class='col-3 p-1'>\n                                    <img src={img.s3SmallLink} class='img-fluid' onError={this.handleImageErrored} />\n                                    <button class='btn btn-sm btn-link'\n                                        onClick={this.removeImage}\n                                        data-name={img.name}\n                                    ><i class='fas fa-trash' /> Del</button>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <Images saved={saved} object={track} field={field} updateField={updateField} autoOpen={false} />\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'file') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <Files saved={saved} object={track} field={field} updateField={updateField} />\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'radio') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title} \"{value}\"</label>\n                    {values.map(option => <>\n                        <div class='form-check'>\n                            <input\n                                class={`form-check-input ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}\n                                type='radio'\n                                id={`${field}Input`}\n                                value={option[0]}\n                                data-id={track.id}\n                                data-field={field}\n                                onInput={onInput}\n                                checked={value == option[0] ? 'checked' : ''}\n                            />\n                            <label class='form-check-label' for={`${field}Input`}>\n                                {option[1]}\n                            </label>\n                        </div>\n                    </>)}\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'toggle') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <div class='custom-control custom-switch'>\n                        <input type='checkbox'\n                            class='custom-control-input'\n                            id={`${field}Input`}\n                            value={value === 1 ? 0 : 1}\n                            data-id={track.id}\n                            data-field={field}\n                            onInput={onInput}\n                            checked={value == 1 ? 'checked' : ''}\n                        />\n                        <label class='custom-control-label' for={`${field}Input`} />\n                    </div>\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        return (\n            <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type={type} class={`form-control ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    value={value}\n                    data-id={track.id}\n                    data-field={field}\n                    onInput={onInput}\n                />\n                {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                    <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n            </div>\n        );\n    }\n}\n\n@observer\nclass InputNew extends Component {\n    onInput = (e) => {\n        const { field } = this.props;\n        const value = e.target.value;\n        const { trackStore } = this.props.stores;\n        // console.log('trackStore.newTrack', trackStore.newTrack);\n        trackStore.updateObjectKeyValue('newTrack', field, value);\n    }\n\n    render() {\n        const { field, icon, title, help } = this.props;\n        const { trackStore } = this.props.stores;\n        const { newTrack } = trackStore;\n        return (\n            <div class='form-group'>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type='text' class={`form-control`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    onInput={this.onInput}\n                    value={newTrack[field]}\n                />\n                <small id={`${field}Help`} class='form-text text-muted'>{help}</small>\n            </div>\n        );\n    }\n}\n\n@observer\nclass TracksEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n    }\n\n    async loadTrack() {\n\t\tconst { trackStore } = this.props.stores;\n        if (this.props.track === 'new') {\n            this.setState({ createNew: true });\n        } else {\n            trackStore.load(this.props.track);\n        }\n    }\n\n\tresetTrack() {\n        const { trackStore } = this.props.stores;\n        trackStore.updateKeyValue('newTrack', {});\n\t}\n\n\tinsertTrack = async () => {\n\t\tconst { trackStore, userStore } = this.props.stores;\n\t\tconst { newTrack } = trackStore;\n\t\tawait trackStore.insert({ ...newTrack });\n        await userStore.getInfo();\n        this.resetTrack();\n        route(`/tracks/`);\n\t}\n\n    updateField = (e) => {\n        const { id, field, type, elementtype, isNew } = e.target.dataset;\n        const value = e.target.value;\n        this.updateFieldValue({ id: parseInt(id, 10), field, value, type, elementtype, isNew });\n    }\n\n    updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const { trackStore } = this.props.stores;\n        let newValue = value;\n\n        let localObjectValue = value;\n        const { track } = trackStore;\n        if (field === 'images') {\n            if (Array.isArray(track.images) && Array.isArray(value)) {\n                localObjectValue = [...track.images, ...value];\n            }\n        }\n    \n        if (datatype === 'array' && !Array.isArray(value)) {\n            if (elementtype === 'number') {\n                newValue = value.split(',').map(e => parseFloat(e) || e);\n            } else  {\n                newValue = value.split(',');\n            }\n            // console.log('updateFieldValue', id, field, value, datatype, elementtype);\n        }\n\n        if (isNew) {\n            trackStore.updateObjectKeyValue('newTrack', field, value);\n        } else {\n            trackStore.updateField(id, field, localObjectValue);\n            if (skipTimer) {\n                this.doUpdateField(id, field, newValue);\n            } else {\n                clearTimeout(this.updateTimer[field]);\n                this.updateTimer[field] = setTimeout(async () => {\n                    this.doUpdateField(id, field, newValue);\n                }, 500);\n            }\n        }\n    }\n\n    async doUpdateField(id, field, value) {\n        const { trackStore } = this.props.stores;\n        await trackStore.saveField(id, field, value);\n    }\n\n    back = () => {\n        const { history } = this.props.stores;\n        history.goBack();\n    }\n\n\tcomponentDidMount() {\n        this.loadTrack();\n    }\n\n\trender() {\n        const { createNew } = this.state;\n\t\tconst { trackStore } = this.props.stores;\n\t\tconst { insertStatus, saved, track } = trackStore;\n        const { name, gpx, gpxInfo } = track;\n\t\treturn (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n                <button class='btn btn-link pl-0 fixed-top text-primary'\n                    style={`top: ${MARGIN_TOP_BACK}; left: 5px; font-size: 35px; width: 45px;`}\n                    onClick={this.back}>\n                    <i class='fas fa-arrow-circle-left' />\n                </button>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='offset-0 col-12 offset-sm-2 col-sm-8 offset-lg-4 col-lg-4' style='padding-left: 35px;'>\n                        {createNew ? (\n                            <div> \n                                <h5><Text id='tracks.add-new'>Legg til ny treningsrunde</Text></h5>\n                                <InputNew stores={this.props.stores} field='name' icon='fas fa-heading'\n                                    title={<Text id='tracks.title'>Tittel</Text>}\n                                    help={<Text id='tracks.title-help'>Tittel på denne runden. Eks: 'Rundt Veslevann og tilbake'</Text>} />\n                                <InputNew stores={this.props.stores} field='distanceKm' icon='fas fa-road'\n                                    title={<Text id='tracks.distance'>Distanse i km</Text>}\n                                    help={<Text id='tracks.distance-help'>Hvor lang er runden i km.</Text>} />\n                                <InputNew stores={this.props.stores} field='elevation' icon='fas fa-mountain'\n                                    title={<Text id='tracks.elevation'>Høydemeter</Text>}\n                                    help={<Text id='tracks.elevation-help'>Høydemeter du klatrer på denne runden.</Text>} />\n\n                                <button type='button' class='btn btn-primary'\n                                    onClick={this.insertTrack}\n                                >\n                                    <Text id='tracks.save'>Registrer ny treningsrunde</Text>\n                                </button>\n                                <p class='mt-4'>\n                                    <Text id='tracks.gpx-info'>For å legge til GPX må du lagre og gå tilbake og endre denne.</Text>\n                                </p>\n                            </div>\n                        ) : (\n                            <div>\n                                <h5><Text id='tracks.edit'>Endre</Text>: {name}</h5>\n                                <Input saved={saved} track={track} field='public' icon='fas fa-users' type='toggle'\n                                    title={<Text id='tracks.public'>Offentlig</Text>}\n                                    help={<Text id='tracks.public-help'>Er denne runden synlig for alle som bruker appen?</Text>}\n                                    onInput={this.updateField} />\n                                <Input saved={saved} track={track} field='name' icon='fas fa-heading'\n                                    title={<Text id='tracks.title'>Tittel</Text>}\n                                    help={<Text id='tracks.title-help'>Tittel på denne runden. Eks: 'Rundt Veslevann og tilbake'</Text>}\n                                    onInput={this.updateField} />\n\n                                <div class='row'>\n                                    <div class='col'>\n                                        <Input stores={this.props.stores} saved={saved} track={track} field='date' icon='fas fa-calendar' type='date' min='2010-01-01' max='today'\n                                            title={<Text id='tracks.date'>Dato</Text>}\n                                            help={<Text id='tracks.date-help'>Dato for turen. Format på dato er: 'YYYY-MM-DD'.</Text>}\n                                            onInput={this.updateField}\n                                            updateField={this.updateFieldValue}\n                                        />\n                                    </div>\n                                    <div class='col'>\n                                        <Input stores={this.props.stores} saved={saved} track={track} field='time' icon='fas fa-clock' type='time'\n                                            title={<Text id='tracks.time'>Klokka</Text>}\n                                            help={<Text id='tracks.time-help'>Klokkeslett for turen. Format: 'HH:MI'.</Text>}\n                                            onInput={this.updateField}\n                                            updateField={this.updateFieldValue}\n                                        />\n                                    </div>\n                                </div>\n\n                                <Input saved={saved} track={track} field='distanceKm' icon='fas fa-road'\n                                    title={<Text id='tracks.distance'>Distanse i km</Text>}\n                                    help={<Text id='tracks.distance-help'>Hvor lang er runden i km.</Text>}\n                                    onInput={this.updateField} />\n                                <Input saved={saved} track={track} field='elevation' icon='fas fa-mountain'\n                                    title={<Text id='tracks.elevation'>Høydemeter</Text>}\n                                    help={<Text id='tracks.elevation-help'>Høydemeter du klatrer på denne runden.</Text>}\n                                    onInput={this.updateField} />\n                                <Input saved={saved} track={track} field='image' icon='fas fa-camera' type='image'\n                                    stores={this.props.stores}\n                                    title={<Text id='tracks.photos'>Bilder</Text>}\n                                    help={<Text id='tracks.photos-help'>Bilder fra denne runden.</Text>}\n                                    onInput={this.updateField} updateField={this.updateFieldValue} />\n\n                                {gpx && <div style='height: 500px;'>\n                                    <Map stores={this.props.stores} mapId={track.id} geojson={gpx.geoJSON} gpxInfo={gpx.gpxInfo || gpxInfo} />\n                                </div>}\n                                <Input saved={saved} track={track} field='gpx' type='file'\n                                    title={<Text id='tracks.gpx'>Gpx</Text>}\n                                    help={<Text id='tracks.gpx-help'>Gpx til denne runden.</Text>}\n                                    onInput={this.updateField} updateField={this.updateFieldValue} />\n\n                            </div>                                                        \n                        )}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{insertStatus && <div class='alert alert-success mt-4 col-12' role='alert'>\n\t\t\t\t\t\t<Text id='tracks.saved'>Runden er lagret.</Text>\n\t\t\t\t\t</div>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TracksEdit;\n","import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport { toJS } from 'mobx';\nimport util from 'preact-util';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport DragNDropFileupload from './dragNdropFileupload';\n\n@observer\nclass Files extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n    }\n    \n    handleAddImage = (file) => {\n        // <Images saved={saved} object={dog} field={field} updateField={updateField} />\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const {\n            updateField,\n            object,\n            field,\n        } = this.props;\n        updateField({ id: object.id, field, value: file });\n\n        // let images = toJS(object.images);\n        // if (!util.isArray(images)) {\n        //     images = [];\n        // }\n        // images.push(file);\n        // updateField({ id: object.id, field: 'images', value: images });\n    };\n\n    render() {\n        const { uploadStatus = () => {}, before = () => {}, after = () => {}, autoOpen = false } = this.props;\n        return (\n            <div class='row'>\n                <div class='col-12'>\n                    <Text id='form.files.upload-file'>Last opp fil</Text>:<br />\n                    <DragNDropFileupload\n                        handleAddImage={this.handleAddImage}\n                        apiUrl={'/api/fileupload'}\n                        uploadStatus={uploadStatus}\n                        before={before}\n                        after={after}\n                        autoOpen={autoOpen}\n                    >\n                        <div style={{ height: 30, width: '100%' }}>\n                            {/* {files.map((file, idx) => (\n                                <div key={idx}>\n                                    {file.name}\n                                    Total: {util.asString(file, 'load', 'total')}\n                                    <img style='width: 48px;'\n                                        alt='Preview'\n                                        key={file.preview}\n                                        src={file.src}\n                                    />\n                                </div>\n                            ))} */}\n                        </div>\n                    </DragNDropFileupload>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Files;\n"],"sourceRoot":""}