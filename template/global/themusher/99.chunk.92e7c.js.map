{"version":3,"sources":["webpack:///./components/form/files.js","webpack:///./routes/users/edit.js"],"names":["Files","observer","props","handleAddImage","file","updateField","id","object","field","value","state","files","render","this","uploadStatus","before","after","autoOpen","class","apiUrl","style","height","width","Component","MARGIN_TOP","mu","marginTop","MARGIN_TOP_BACK","marginTopBack","MARGIN_BOTTOM","marginBottom","initialState","Input","handleImageErrored","e","image","target","onerror","setTimeout","src","Date","removeImage","stores","userStore","user","name","parentElement","dataset","removeMainImage","saved","type","title","icon","help","onInput","skipImageList","for","s3SmallLink","onError","onClick","data-name","images","filter","md5","map","img","aria-describedby","data-id","data-field","UserEdit","elementtype","updateFieldValue","parseInt","datatype","skipTimer","newValue","localObjectValue","Array","isArray","split","parseFloat","doUpdateField","clearTimeout","updateTimer","back","history","goBack","loadUser","getInfo","saveField","componentDidMount","insertStatus","email","role"],"mappings":"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","file":"99.chunk.92e7c.js","sourcesContent":["import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport { toJS } from 'mobx';\nimport util from 'preact-util';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport DragNDropFileupload from './dragNdropFileupload';\n\n@observer\nclass Files extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n    }\n    \n    handleAddImage = (file) => {\n        // <Images saved={saved} object={dog} field={field} updateField={updateField} />\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const {\n            updateField,\n            object,\n            field,\n        } = this.props;\n        updateField({ id: object.id, field, value: file });\n\n        // let images = toJS(object.images);\n        // if (!util.isArray(images)) {\n        //     images = [];\n        // }\n        // images.push(file);\n        // updateField({ id: object.id, field: 'images', value: images });\n    };\n\n    render() {\n        const { uploadStatus = () => {}, before = () => {}, after = () => {}, autoOpen = false } = this.props;\n        return (\n            <div class='row'>\n                <div class='col-12'>\n                    <Text id='form.files.upload-file'>Last opp fil</Text>:<br />\n                    <DragNDropFileupload\n                        handleAddImage={this.handleAddImage}\n                        apiUrl={'/api/fileupload'}\n                        uploadStatus={uploadStatus}\n                        before={before}\n                        after={after}\n                        autoOpen={autoOpen}\n                    >\n                        <div style={{ height: 30, width: '100%' }}>\n                            {/* {files.map((file, idx) => (\n                                <div key={idx}>\n                                    {file.name}\n                                    Total: {util.asString(file, 'load', 'total')}\n                                    <img style='width: 48px;'\n                                        alt='Preview'\n                                        key={file.preview}\n                                        src={file.src}\n                                    />\n                                </div>\n                            ))} */}\n                        </div>\n                    </DragNDropFileupload>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Files;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { route } from 'preact-router';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_TOP_BACK = mu.marginTopBack(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport Images from '../../components/form/images';\nimport Files from '../../components/form/files';\nimport Map from '../../components/map';\n\nconst initialState = {};\n\n@observer\nclass Input extends Component {\n    handleImageErrored = (e) => {\n        const image = e.target;\n        image.onerror = null;\n        setTimeout(() => {\n            image.src += `?${new Date()}`;\n        }, 1000);\n    }\n\n    removeImage = async (e) => {\n        const { userStore } = this.props.stores;\n        const { user } = this.props;\n        const imageName = e.target.parentElement.dataset.name || e.target.dataset.name;\n        userStore.removeImage({\n            id: user.id,\n            name: imageName,\n        });\n    }\n\n    removeMainImage = () => {\n        const { user, field, updateField } = this.props;\n        updateField({ id: user.id, field, value: {} });\n    }\n\n    render() {\n        // const { saved, dog, type = 'text', datalist = [], min, max, step, field, title, icon, help, onInput, updateField } = this.props;\n        const { saved, user, type = 'text', field, title, icon, help, onInput, updateField, skipImageList } = this.props;\n        const value = user[field];\n        const byMd5 = e => user.image ? e.md5 !== user.image.md5 : true;\n\n        if (type === 'image') {\n            return (\n                <div class={`form-group ${saved[`${field}.${user.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n\n                    {!skipImageList && <div class='container-fluid'>\n                        <div class='row'>\n                            {user.image && user.image.s3SmallLink && <div class='col-3 p-1'>\n                                <img src={user.image.s3SmallLink} class='img-fluid border rounded-lg' onError={this.handleImageErrored} />\n                                <button class='btn btn-sm btn-link'\n                                    onClick={this.removeMainImage}\n                                    data-name={user.image.name}\n                                ><i class='fas fa-trash' /> Del</button>\n                                <span class='badge badge-success'>Main</span>\n                            </div>}\n                            {user.images && user.images.filter(byMd5).map(img => (\n                                <div class='col-3 p-1'>\n                                    <img src={img.s3SmallLink} class='img-fluid' onError={this.handleImageErrored} />\n                                    <button class='btn btn-sm btn-link'\n                                        onClick={this.removeImage}\n                                        data-name={img.name}\n                                    ><i class='fas fa-trash' /> Del</button>\n                                </div>\n                            ))}\n                        </div>\n                    </div>}\n                    <Images saved={saved} object={user} field={field} updateField={updateField} autoOpen={false} />\n                    {saved[`${field}.${user.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='users.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'file') {\n            return (\n                <div class={`form-group ${saved[`${field}.${user.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <Files saved={saved} object={user} field={field} updateField={updateField} />\n                    {saved[`${field}.${user.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='users.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        return (\n            <div class={`form-group ${saved[`${field}.${user.id}`] ? 'is-valid' : ''}`}>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type='text' class={`form-control ${saved[`${field}.${user.id}`] ? 'is-valid' : ''}`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    value={value}\n                    data-id={user.id}\n                    data-field={field}\n                    onInput={onInput}\n                />\n                {saved[`${field}.${user.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='users.changes-saved'>Endringene er lagret</Text></div> : \n                    <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n            </div>\n        );\n    }\n}\n\n@observer\nclass UserEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n    }\n\n    async loadUser() {\n\t\tconst { userStore } = this.props.stores;\n        userStore.getInfo();\n    }\n\n    updateField = (e) => {\n        const { id, field, type, elementtype } = e.target.dataset;\n        const value = e.target.value;\n        this.updateFieldValue({ id: parseInt(id, 10), field, value, type, elementtype });\n    }\n\n    updateFieldValue = ({ id, field, value, datatype, elementtype, skipTimer = false }) => {\n        const { userStore } = this.props.stores;\n        let newValue = value;\n\n        let localObjectValue = value;\n        const { user } = userStore;\n        if (field === 'images') {\n            if (Array.isArray(user.images) && Array.isArray(value)) {\n                localObjectValue = [...user.images, ...value];\n            }\n        }\n    \n        if (datatype === 'array' && !Array.isArray(value)) {\n            if (elementtype === 'number') {\n                newValue = value.split(',').map(e => parseFloat(e) || e);\n            } else  {\n                newValue = value.split(',');\n            }\n            // console.log('updateFieldValue', id, field, value, datatype, elementtype);\n        }\n\n       \n        userStore.updateField(id, field, localObjectValue);\n        if (skipTimer) {\n            this.doUpdateField(id, field, newValue);\n        } else {\n            clearTimeout(this.updateTimer[field]);\n            this.updateTimer[field] = setTimeout(async () => {\n                this.doUpdateField(id, field, newValue);\n            }, 500);\n        }\n    }\n\n    async doUpdateField(id, field, value) {\n        const { userStore } = this.props.stores;\n        await userStore.saveField(id, field, value);\n    }\n\n    back = () => {\n        const { history } = this.props.stores;\n        history.goBack();\n    }\n\n\tcomponentDidMount() {\n        this.loadUser();\n    }\n\n\trender() {\n\t\tconst { userStore } = this.props.stores;\n\t\tconst { insertStatus, saved, user } = userStore;\n        const { email } = user;\n        const { field, title, help, icon, type } = this.props;\n\n        if (field) {\n            return <>\n                <Input\n                    saved={saved}\n                    user={user}\n                    field={field}\n                    icon={icon}\n                    type={type}\n                    stores={this.props.stores}\n                    title={title}\n                    help={help}\n                    onInput={this.updateField}\n                    updateField={this.updateFieldValue}\n                    skipImageList={false}\n                />\n            </>;\n        }\n\n\t\treturn (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n                <button class='btn btn-link pl-0 fixed-top text-primary'\n                    style={`top: ${MARGIN_TOP_BACK}; left: 5px; font-size: 35px; width: 45px;`}\n                    onClick={this.back}>\n                    <i class='fas fa-arrow-circle-left' />\n                </button>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='offset-0 col-12 offset-sm-2 col-sm-8 offset-lg-4 col-lg-4' style='padding-left: 35px;'>\n                        <div>\n                            <h5><Text id='users.edit'>Endre</Text>: {email}</h5>\n\n                            <Input saved={saved} user={user} field='username' icon='fas fa-user'\n                                title={<Text id='users.username'>Brukernavn</Text>}\n                                help={<Text id='users.username-help'>Ditt brukernavn på The Musher</Text>}\n                                onInput={this.updateField} />\n\n                            <div class='row'>\n                                <div class='col-6'>\n                                    <Input saved={saved} user={user} field='firstname'\n                                        title={<Text id='users.firstname'>Fornavn</Text>}\n                                        help={<Text id='users.firstname-help'>Ditt fornavn</Text>}\n                                        onInput={this.updateField} />\n                                </div>\n                                <div class='col-6'>\n                                    <Input saved={saved} user={user} field='lastname'\n                                        title={<Text id='users.lastname'>Etternavn</Text>}\n                                        help={<Text id='users.lastname-help'>Ditt etternavn</Text>}\n                                        onInput={this.updateField} />\n                                </div>\n                            </div>\n\n                            <Input saved={saved} user={user} field='cellphone' icon='fas fa-mobile'\n                                title={<Text id='users.cellphone'>Mobil</Text>}\n                                help={<Text id='users.cellphone-help'>Ditt mobilnummer</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} user={user} field='url' icon='fas fa-link'\n                                title={<Text id='users.url'>Hjemmeside</Text>}\n                                help={<Text id='users.url-help'>Din hjemmeside</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} user={user} field='facebook' icon='fab fa-facebook-square'\n                                title={<Text id='users.facebook'>Facebook</Text>}\n                                help={<Text id='users.facebook-help'>Din Facebook profil</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} user={user} field='instagram' icon='fab fa-instagram'\n                                title={<Text id='users.instagram'>Instagram</Text>}\n                                help={<Text id='users.instagram-help'>Din Instagram profil</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} user={user} field='snapchat' icon='fab fa-snapchat'\n                                title={<Text id='users.snapchat'>Snapchat</Text>}\n                                help={<Text id='users.snapchat-help'>Din Snapchat profil</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} user={user} field='image' icon='fas fa-camera' type='image'\n                                stores={this.props.stores}\n                                title={<Text id='users.photos'>Bilder</Text>}\n                                help={<Text id='users.photos-help'>Bilder av deg.</Text>}\n                                onInput={this.updateField} updateField={this.updateFieldValue} />\n                        </div>                                                        \n\t\t\t\t\t</div>\n\n\t\t\t\t\t{insertStatus && <div class='alert alert-success mt-4 col-12' role='alert'>\n\t\t\t\t\t\t<Text id='users.saved'>Profilen er lagret.</Text>\n\t\t\t\t\t</div>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default UserEdit;\n"],"sourceRoot":""}