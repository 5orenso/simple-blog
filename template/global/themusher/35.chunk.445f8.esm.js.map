{"version":3,"sources":["webpack:///./routes/news/edit.js","webpack:///./components/form/files.js","webpack:///./components/form/images.js","webpack:///./components/form/dragNdropFileupload.js"],"names":["MARGIN_TOP","mu","marginTop","MARGIN_TOP_BACK","marginTopBack","MARGIN_BOTTOM","marginBottom","initialState","isLoading","Input","observer","Component","handleImageErrored","e","image","target","onerror","setTimeout","src","Date","removeImage","async","newsStore","props","stores","news","id","name","parentElement","dataset","removeMainImage","field","updateField","this","value","render","saved","type","rows","title","icon","help","onInput","class","for","images","map","img","s3SmallLink","onError","onClick","data-name","object","autoOpen","style","aria-describedby","data-id","data-field","InputNew","updateObjectKeyValue","newNews","NewsEdit","constructor","super","elementtype","updateFieldValue","parseInt","datatype","skipTimer","newValue","localObjectValue","Array","isArray","split","parseFloat","doUpdateField","clearTimeout","updateTimer","insertNewNews","insert","back","createNew","route","state","setState","load","saveField","componentDidMount","loadNews","userStore","isAdmin","onclick","Files","handleAddImage","file","files","uploadStatus","before","after","apiUrl","height","width","Images","addToImages","push","DragNDropFileupload","dropRef","createRef","handleDrag","preventDefault","stopPropagation","handleDragIn","dragCounter","dataTransfer","items","length","drag","handleDragOut","handleDrop","i","l","readLocalFile","handleAddFiles","event","el","handleEvent","handleUpload","fileObject","util","isFunction","formData","FormData","append","uploadMeta","progress","xhr","XMLHttpRequest","upload","addEventListener","updateProgress","fileObj","uploadDone","open","getApiServer","setRequestHeader","getJwtToken","send","filename","uploadedFilesData","imageNum","Promise","resolve","reject","reader","FileReader","error","photo","readAsDataURL","lengthComputable","percentComplete","loaded","total","readyState","status","JSON","parse","responseText","data","addFileToUpload","fileInput","loadingProgress","uploadedFiles","div","current","click","componentWillUnmount","removeEventListener","position","ref","border","backgroundColor","top","bottom","left","right","zIndex","textAlign","color","fontSize","multiple","onchange","c","Object","keys","key","isImage","match","result","formatBytes","role","aria-valuenow","aria-valuemin","aria-valuemax","children"],"mappings":"45BAaA,MAAMA,EAAaC,IAAGC,WAAU,GAC1BC,EAAkBF,IAAGG,eAAc,GACnCC,EAAgBJ,IAAGK,eAEnBC,EAAe,CACpBC,WAAW,G,IAINC,EADLC,Y,EAAD,cACoBC,YAAU,gDAC1BC,mBAAsBC,IAClB,MAAMC,EAAQD,EAAEE,OAChBD,EAAME,QAAU,KAChBC,WAAW,KACPH,EAAMI,KAAQ,IAAG,IAAIC,MACtB,MANmB,KAS1BC,YAAcC,eAAOR,GACjB,MAAM,UAAES,GAAc,EAAKC,MAAMC,QAC3B,KAAEC,GAAS,EAAKF,MAEtBD,EAAUF,YAAY,CAClBM,GAAID,EAAKC,GACTC,KAHcd,EAAEE,OAAOa,cAAcC,QAAQF,MAAQd,EAAEE,OAAOc,QAAQF,QAZpD,KAmB1BG,gBAAkB,KACd,MAAM,KAAEL,EAAF,MAAQM,EAAR,YAAeC,GAAgBC,KAAKV,MAC1CS,EAAY,CAAEN,GAAID,EAAKC,GAAIK,QAAOG,MAAO,MAG7CC,SAEI,MAAM,MAAEC,EAAF,KAASX,EAAT,KAAeY,EAAO,OAAtB,KAA8BC,EAA9B,MAAoCP,EAApC,MAA2CQ,EAA3C,KAAkDC,EAAlD,KAAwDC,EAAxD,QAA8DC,EAA9D,YAAuEV,GAAgBC,KAAKV,MAC5FW,EAAQT,EAAKM,GACnB,MAAa,UAATM,EAEI,mBAAKM,MAAQ,eAAaP,EAAO,GAAEL,KAASN,EAAKC,MAAQ,WAAa,KAClE,qBAAOkB,IAAQb,EAAF,SAAiBS,GAAQ,iBAAGG,MAAUH,EAAF,gBAAjD,IAA2ED,GAE3E,mBAAKI,MAAM,mBACP,mBAAKA,MAAM,OACNlB,EAAKoB,QAAUpB,EAAKoB,OAAOC,IAAIC,GAC5B,mBAAKJ,MAAM,aACP,mBAAKzB,IAAK6B,EAAIC,YAAaL,MAAM,YAAYM,QAAShB,KAAKrB,qBAC3D,sBAAQ+B,MAAM,sBACVO,QAASjB,KAAKb,YACd+B,YAAWJ,EAAIpB,MAClB,iBAAGgB,MAAM,iBAHV,YAQhB,YAAC,IAAD,CAAQP,MAAOA,EAAOgB,OAAQ3B,EAAMM,MAAOA,EAAOC,YAAaA,EAAaqB,UAAU,IACrFjB,EAAO,GAAEL,KAASN,EAAKC,MAAQ,mBAAKiB,MAAQ,iBAAiBW,MAAM,mBAAkB,YAAC,IAAD,CAAM5B,GAAG,sBAAT,yBAClF,qBAAOA,GAAOK,EAAF,OAAeY,MAAM,wBAAwBF,IAI5D,SAATJ,EAEI,mBAAKM,MAAQ,eAAaP,EAAO,GAAEL,KAASN,EAAKC,MAAQ,WAAa,KAClE,qBAAOkB,IAAQb,EAAF,SAAiBS,GAAQ,iBAAGG,MAAUH,EAAF,gBAAjD,IAA2ED,GAC3E,YAAC,IAAD,CAAOH,MAAOA,EAAOgB,OAAQ3B,EAAMM,MAAOA,EAAOC,YAAaA,IAC7DI,EAAO,GAAEL,KAASN,EAAKC,MAAQ,mBAAKiB,MAAQ,iBAAiBW,MAAM,mBAAkB,YAAC,IAAD,CAAM5B,GAAG,sBAAT,yBAClF,qBAAOA,GAAOK,EAAF,OAAeY,MAAM,wBAAwBF,IAI5D,aAATJ,EAEI,mBAAKM,MAAQ,eAAaP,EAAO,GAAEL,KAASN,EAAKC,MAAQ,WAAa,KAClE,qBAAOkB,IAAQb,EAAF,SAAiBS,GAAQ,iBAAGG,MAAUH,EAAF,gBAAjD,IAA2ED,GAC3E,wBAAUF,KAAMA,EAAMM,MAAQ,iBAAeP,EAAO,GAAEL,KAASN,EAAKC,MAAQ,WAAa,IAAMA,GAAOK,EAAF,QAAgBwB,mBAAqBxB,EAAF,OACnIG,MAAOA,EACPI,KAAMA,EACNkB,UAAS/B,EAAKC,GACd+B,aAAY1B,EACZW,QAASA,IAEZN,EAAO,GAAEL,KAASN,EAAKC,MAAQ,mBAAKiB,MAAQ,iBAAiBW,MAAM,mBAAkB,YAAC,IAAD,CAAM5B,GAAG,sBAAT,yBAClF,qBAAOA,GAAOK,EAAF,OAAeY,MAAM,wBAAwBF,IAMrE,mBAAKE,MAAQ,eAAaP,EAAO,GAAEL,KAASN,EAAKC,MAAQ,WAAa,KAClE,qBAAOkB,IAAQb,EAAF,SAAiBS,GAAQ,iBAAGG,MAAUH,EAAF,gBAAjD,IAA2ED,GAC3E,qBAAOF,KAAMA,EAAMM,MAAQ,iBAAeP,EAAO,GAAEL,KAASN,EAAKC,MAAQ,WAAa,IAAMA,GAAOK,EAAF,QAAgBwB,mBAAqBxB,EAAF,OAChIG,MAAOA,EACPsB,UAAS/B,EAAKC,GACd+B,aAAY1B,EACZW,QAASA,IAEZN,EAAO,GAAEL,KAASN,EAAKC,MAAQ,mBAAKiB,MAAQ,iBAAiBW,MAAM,mBAAkB,YAAC,IAAD,CAAM5B,GAAG,sBAAT,yBAClF,qBAAOA,GAAOK,EAAF,OAAeY,MAAM,wBAAwBF,Q,EAOvEiB,EADLhD,Y,EAAD,cACuBC,YAAU,mCAC7B+B,QAAW7B,IACP,MAAM,MAAEkB,GAAUE,KAAKV,MACjBW,EAAQrB,EAAEE,OAAOmB,OACjB,UAAEZ,GAAcW,KAAKV,MAAMC,OAEjCF,EAAUqC,qBAAqB,UAAW5B,EAAOG,IAGrDC,SACI,MAAM,MAAEJ,EAAF,KAASS,EAAT,MAAeD,EAAf,KAAsBE,GAASR,KAAKV,OACpC,UAAED,GAAcW,KAAKV,MAAMC,QAC3B,QAAEoC,GAAYtC,EACpB,OACI,mBAAKqB,MAAM,cACP,qBAAOC,IAAQb,EAAF,SAAiBS,GAAQ,iBAAGG,MAAUH,EAAF,gBAAjD,IAA2ED,GAC3E,qBAAOF,KAAK,OAAOM,MAAQ,eAAejB,GAAOK,EAAF,QAAgBwB,mBAAqBxB,EAAF,OAC9EW,QAAST,KAAKS,QACdR,MAAO0B,EAAQ7B,KAEnB,qBAAOL,GAAOK,EAAF,OAAeY,MAAM,wBAAwBF,Q,EAOnEoB,EADLnD,Y,EAAD,cACuBC,YACnBmD,YAAYvC,GAAO,MACfwC,MAAMxC,GADS,YAcnBS,YAAenB,IACX,MAAM,GAAEa,EAAF,MAAMK,EAAN,KAAaM,EAAb,YAAmB2B,GAAgBnD,EAAEE,OAAOc,QAC5CK,EAAQrB,EAAEE,OAAOmB,MACvBD,KAAKgC,iBAAiB,CAAEvC,GAAIwC,SAASxC,EAAI,IAAKK,QAAOG,QAAOG,OAAM2B,iBAjBnD,KAoBnBC,iBAAmB,EAAGvC,KAAIK,QAAOG,QAAOiC,WAAUH,cAAaI,aAAY,MACvE,MAAM,UAAE9C,GAAcW,KAAKV,MAAMC,OACjC,IAAI6C,EAAWnC,EAEXoC,EAAmBpC,EACvB,MAAM,KAAET,GAASH,EACH,WAAVS,GACIwC,MAAMC,QAAQ/C,EAAKoB,SAAW0B,MAAMC,QAAQtC,KAC5CoC,EAAmB,IAAI7C,EAAKoB,UAAWX,IAI9B,UAAbiC,GAAyBI,MAAMC,QAAQtC,KAEnCmC,EADgB,WAAhBL,EACW9B,EAAMuC,MAAM,KAAK3B,IAAIjC,GAAK6D,WAAW7D,IAAMA,GAE3CqB,EAAMuC,MAAM,MAM/BnD,EAAUU,YAAYN,EAAIK,EAAOuC,GAC7BF,EACAnC,KAAK0C,cAAcjD,EAAIK,EAAOsC,IAE9BO,aAAa3C,KAAK4C,YAAY9C,IAC9BE,KAAK4C,YAAY9C,GAASd,YAAWI,iBACjC,EAAKsD,cAAcjD,EAAIK,EAAOsC,KAC/B,OAjDQ,KA0DnBS,cAAgBzD,iBACZ,MAAM,UAAEC,GAAc,EAAKC,MAAMC,QACjC,QAAEoC,GAAYtC,EACpBA,EAAUyD,OAAV,KAAsBnB,KA7DD,KAoEnBoB,KAAO,KACH,MAAM,UAAEC,GAAchD,KAAKV,OACrB,UAAED,GAAcW,KAAKV,MAAMC,QACjC,KAAEC,GAASH,EACP2D,EACAC,gBAAO,UAEPA,gBAAO,SAAQzD,EAAKC,KAzExBO,KAAKkD,MAAL,KACO5E,GAEP0B,KAAK4C,YAAc,GAG1B,eAAetD,EAAQU,KAAKV,OAC3BU,KAAKmD,SAAS,CAAE5E,WAAW,IAC3B,MAAM,UAAEc,GAAcW,KAAKV,MAAMC,aAC3BF,EAAU+D,KAAK9D,EAAMG,IA0CzB,oBAAoBA,EAAIK,EAAOG,GAC3B,MAAM,UAAEZ,GAAcW,KAAKV,MAAMC,aAC3BF,EAAUgE,UAAU5D,EAAIK,EAAOG,GAS5CqD,oBACCtD,KAAKuD,WAcNrD,SACO,MAAM,UAAE8C,GAAchD,KAAKV,OAC3B,UAAED,EAAF,UAAamE,GAAcxD,KAAKV,MAAMC,QAChC,QAAEkE,GAAYD,EACpB,IAAKC,EACD,MAAO,GAEjB,MAAM,KAAEjE,EAAF,MAAQW,GAAUd,EACxB,OACC,mBAAKqB,MAAM,kBAAkBW,MAAQ,kBAAiBjD,kBAA8BL,MACvE,mBAAK2C,MAAM,uCACP,uBACI,sBAAQA,MAAM,2CACVW,MAAQ,QAAOnD,8CACf+C,QAASjB,KAAK+C,MACd,iBAAGrC,MAAM,+BAGjB,uBACI,kBAAIA,MAAM,cAAV,2BAEJ,6BAKfsC,EACe,mBAAKtC,MAAM,OACP,mBAAKA,MAAM,UACP,sBAAI,YAAC,IAAD,CAAMjB,GAAG,gBAAT,qBACJ,YAACgC,EAAD,CAAUlC,OAAQS,KAAKV,MAAMC,OAAQO,MAAM,QAAQS,KAAK,iBACpDD,MAAO,YAAC,IAAD,CAAMb,GAAG,cAAT,UACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,mBAAT,8BACV,YAACgC,EAAD,CAAUlC,OAAQS,KAAKV,MAAMC,OAAQO,MAAM,MAAMS,KAAK,aAClDD,MAAO,YAAC,IAAD,CAAMb,GAAG,YAAT,OACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,iBAAT,0BACNgB,QAAST,KAAKD,cAClB,sBACIK,KAAK,SACLM,MAAM,uBACNgD,QAAS1D,KAAK6C,eAHlB,eAQR,mBAAKnC,MAAM,OACP,mBAAKA,MAAM,UACP,YAAClC,EAAD,CAAO2B,MAAOA,EAAOX,KAAMA,EAAMM,MAAM,QAAQS,KAAK,iBAChDD,MAAO,YAAC,IAAD,CAAMb,GAAG,cAAT,SACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,mBAAT,4BACNgB,QAAST,KAAKD,cAElB,YAACvB,EAAD,CAAO2B,MAAOA,EAAOX,KAAMA,EAAMM,MAAM,SAASS,KAAK,iBACjDD,MAAO,YAAC,IAAD,CAAMb,GAAG,eAAT,UACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,oBAAT,uBACNgB,QAAST,KAAKD,cAElB,YAACvB,EAAD,CAAO2B,MAAOA,EAAOX,KAAMA,EAAMM,MAAM,MAAMS,KAAK,iBAC9CD,MAAO,YAAC,IAAD,CAAMb,GAAG,YAAT,OACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,iBAAT,0BACNgB,QAAST,KAAKD,cAElB,YAACvB,EAAD,CAAO2B,MAAOA,EAAOX,KAAMA,EAAMM,MAAM,UAAUS,KAAK,qBAClDH,KAAK,WACLE,MAAO,YAAC,IAAD,CAAMb,GAAG,gBAAT,WACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,qBAAT,8BACNgB,QAAST,KAAKD,cAElB,YAACvB,EAAD,CAAO2B,MAAOA,EAAOX,KAAMA,EAAMM,MAAM,OAAOS,KAAK,qBAC/CH,KAAK,WAAWC,KAAM,GACtBC,MAAO,YAAC,IAAD,CAAMb,GAAG,aAAT,QACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,kBAAT,2BACNgB,QAAST,KAAKD,cAElB,YAACvB,EAAD,CAAO2B,MAAOA,EAAOX,KAAMA,EAAMM,MAAM,QAAQM,KAAK,QAAQG,KAAK,gBAC7DhB,OAAQS,KAAKV,MAAMC,OACnBe,MAAO,YAAC,IAAD,CAAMb,GAAG,cAAT,UACPe,KAAM,YAAC,IAAD,CAAMf,GAAG,mBAAT,+BACNgB,QAAST,KAAKD,YAAaA,YAAaC,KAAKgC,0B,EAS9DJ,a,kHC/ST+B,EADLlF,Y,EAAD,cACoBC,YAChBmD,YAAYvC,GACRwC,MAAMxC,GADS,KAOnBsE,eAAkBC,IAGd,MAAM,YACF9D,EADE,OAEFoB,EAFE,MAGFrB,GACAE,KAAKV,MACTS,EAAY,CAAEN,GAAI0B,EAAO1B,GAAIK,QAAOG,MAAO4D,KAb3C7D,KAAKkD,MAAQ,CACTY,MAAO,IAsBf5D,SACI,MAAM,aAAE6D,EAAe,SAAjB,OAA2BC,EAAS,SAApC,MAA8CC,EAAQ,SAAtD,SAAgE7C,GAAW,GAAUpB,KAAKV,MAChG,OACI,mBAAKoB,MAAM,OACP,mBAAKA,MAAM,UACP,YAAC,IAAD,CAAMjB,GAAG,0BAAT,gBADJ,IAC0D,uBACtD,YAAC,IAAD,CACImE,eAAgB5D,KAAK4D,eACrBM,OAAQ,kBACRH,aAAcA,EACdC,OAAQA,EACRC,MAAOA,EACP7C,SAAUA,GAEV,mBAAKC,MAAO,CAAE8C,OAAQ,GAAIC,MAAO,iB,EAoB1CT,O,sGC7DTU,EADL5F,Y,EAAD,cACqBC,YACjBmD,YAAYvC,GACRwC,MAAMxC,GADS,KAOnBsE,eAAkBC,IACd,MAAM,YAAES,GAAc,GAAStE,KAAKV,OAI9B,YACFS,EADE,OAEFoB,EAFE,MAGFrB,GACAE,KAAKV,MAUT,GARIQ,GACAC,EAAY,CAAEN,GAAI0B,EAAO1B,GAAIK,QAAOG,MAAO4D,EAAM1B,WAAW,IAO5DmC,EAAa,CACb,MAAM1D,EAAS,GACfA,EAAO2D,KAAKV,GACZ9D,EAAY,CAAEN,GAAI0B,EAAO1B,GAAIK,MAAO,SAAUG,MAAOW,EAAQuB,WAAW,MA3B5EnC,KAAKkD,MAAQ,CACTY,MAAO,IAiCf5D,SACI,MAAM,aAAE6D,EAAe,SAAjB,OAA2BC,EAAS,SAApC,MAA8CC,EAAQ,SAAtD,SAAgE7C,GAAW,GAASpB,KAAKV,MAC/F,OACI,mBAAKoB,MAAM,OACP,mBAAKA,MAAM,UACP,YAAC,IAAD,CACIkD,eAAgB5D,KAAK4D,eACrBG,aAAcA,EACdG,OAAQ,kBACRF,OAAQA,EACRC,MAAOA,EACP7C,SAAUA,GAEV,mBAAKC,MAAO,CAAE8C,OAAQ,GAAIC,MAAO,iB,EAoB1CC,O,4FCrETG,EADL/F,Y,EAAD,cACkCC,YAC9BmD,YAAYvC,GACRwC,MAAMxC,GADS,KAUnBmF,QAAUC,sBAVS,KAYnBC,WAAc/F,IACVA,EAAEgG,iBACFhG,EAAEiG,mBAda,KAiBnBC,aAAgBlG,IACZA,EAAEgG,iBACFhG,EAAEiG,kBACF7E,KAAK+E,cACDnG,EAAEoG,aAAaC,OAASrG,EAAEoG,aAAaC,MAAMC,OAAS,GACtDlF,KAAKmD,SAAS,CAAEgC,MAAM,KAtBX,KA0BnBC,cAAiBxG,IACbA,EAAEgG,iBACFhG,EAAEiG,kBACF7E,KAAK+E,cACoB,IAArB/E,KAAK+E,aACL/E,KAAKmD,SAAS,CAAEgC,MAAM,KA/BX,KAmCnBE,WAAczG,IAOV,GAHAA,EAAEgG,iBACFhG,EAAEiG,kBACF7E,KAAKmD,SAAS,CAAEgC,MAAM,IAClBvG,EAAEoG,aAAalB,OAASlF,EAAEoG,aAAalB,MAAMoB,OAAS,EAAG,CAGzD,IAAK,IAAII,EAAI,EAAGC,EAAI3G,EAAEoG,aAAalB,MAAMoB,OAAQI,EAAIC,EAAGD,GAAK,EAAG,CAG5DtF,KAAKwF,cAFS5G,EAAEoG,aAAalB,MAAMwB,IAKvCtF,KAAK+E,YAAc,IAnDR,KAwDnBU,eAAkBC,IACdA,EAAMd,iBACN,MAAMe,EAAKD,EAAM5G,OAIjB,IAAK,IAAIwG,EAAI,EAAGC,EAAII,EAAG7B,MAAMoB,OAAQI,EAAIC,EAAGD,GAAK,EAAG,CAGhDtF,KAAKwF,cAFSG,EAAG7B,MAAMwB,MA/DZ,KAsEnBM,YAAc,KA3EJ,GAKS,KA8EnBC,aAAgBC,IAKZ,MAAM,aAAE/B,EAAe,SAAjB,OAA2BC,EAAS,SAApC,MAA8CC,EAAQ,UAAajE,KAAKV,MAC9EyE,GAAa,GAETgC,IAAKC,WAAWhC,IAChBA,IAGJ,MAAMiC,EAAW,IAAIC,SACrBD,EAASE,OAAO,UAAWL,GAC3B,MAAMM,EAAa,CACfC,SAAU,GAGdD,EAAWE,IAAM,IAAIC,eAErBH,EAAWE,IAAIE,OAAOC,iBAAiB,WAAaf,IAEhD1F,KAAK0G,eAAehB,EADJI,KAGpBM,EAAWE,IAAIG,iBAAiB,YAAcf,IAE1C1F,KAAK4F,YAAYF,EADDI,KAGpBM,EAAWE,IAAIG,iBAAiB,OAASf,IAErC1F,KAAK4F,YAAYF,EADDI,KAGpBM,EAAWE,IAAIG,iBAAiB,UAAYf,IACxC,MAAMiB,EAAUb,EACZC,IAAKC,WAAW/B,IAChBA,IAEJjE,KAAK4F,YAAYF,EAAOiB,KAE5BP,EAAWE,IAAIG,iBAAiB,WAAaf,IAEzC1F,KAAK4F,YAAYF,EADDI,KAGpBM,EAAWE,IAAIG,iBAAiB,QAAUf,IAEtC1F,KAAK4F,YAAYF,EADDI,KAGpBM,EAAWE,IAAIG,iBAAiB,QAAUf,IAEtC1F,KAAK4F,YAAYF,EADDI,KAGpBM,EAAWE,IAAIG,iBAAiB,mBAAqBf,IAEjD1F,KAAK4G,WAAWlB,EADAI,KAIpBM,EAAWE,IAAIO,KAAK,OAAS,GAAEd,IAAKe,iBAAiB9G,KAAKV,MAAM4E,UAChEkC,EAAWE,IAAIS,iBAAiB,gBAAkB,UAAShB,IAAKiB,eAChEZ,EAAWE,IAAIW,KAAKhB,GAEpB,MAAMiB,EAAWpB,EAAWpG,KACtByH,EAAoBnH,KAAKkD,MAAMiE,kBAChCA,EAAkBD,KACnBC,EAAkBD,GAAY,IAElCC,EAAkBD,GAAUd,WAAaA,EACzCe,EAAkBD,GAAUE,SAAWpH,KAAKkD,MAAMkE,SAClDpH,KAAKmD,SAAS,CAAEgE,uBAjJD,KAqJnB3B,cAAiBM,GACN,IAAIuB,QAAQ,CAACC,EAASC,KACzB,MAAMC,EAAS,IAAIC,WAEnBD,EAAOf,iBAAiB,QAAUiB,IAI9BH,EAAOG,KAGXF,EAAOf,iBAAiB,OAASf,IAK7B,MAAMiC,EAAQ7B,EACRoB,EAAWS,EAAMjI,KACjByH,EAAoBnH,KAAKkD,MAAMiE,kBAChCA,EAAkBD,KACnBC,EAAkBD,GAAY,IAElCC,EAAkBD,GAAUxB,MAAQA,EACpC1F,KAAKmD,SAAS,CAAEgE,sBAChBnH,KAAK6F,aAAa8B,GAClBL,EAAQ5B,KAGZ8B,EAAOI,cAAc9B,KAjLV,KAqLnBY,eAAiB,CAAChB,EAAOI,KACrB,GAAIJ,EAAMmC,iBAAkB,CACxB,MAAMX,EAAWpB,EAAWpG,KACtByH,EAAoBnH,KAAKkD,MAAMiE,kBAC/BW,EAAmBpC,EAAMqC,OAASrC,EAAMsC,MAAS,IA9LrD,EAkMFb,EAAkBD,GAAUd,WAAWC,SAAWyB,EAClD9H,KAAKmD,SAAS,CAAEgE,wBA9LL,KAkMnBP,WAAa,CAAClB,EAAOI,KACjB,MAAMoB,EAAWpB,EAAWpG,KACtByH,EAAoBnH,KAAKkD,MAAMiE,kBAC/Bf,EAAae,EAAkBD,GAAUd,WAO/C,GAAIA,GAA4C,IAA9BA,EAAWE,IAAI2B,YAA8C,MAA1B7B,EAAWE,IAAI4B,OAAgB,CAChF,MACMpE,EADWqE,KAAKC,MAAMhC,EAAWE,IAAI+B,cACpBC,KAAKxE,MAC5B,IAAK,IAAIwB,EAAI,EAAGA,EAAIxB,EAAMoB,OAAQI,GAAK,EAAG,CAEtCtF,KAAKuI,gBADQzE,EAAMwB,IAEnBtF,KAAKwI,UAAUvI,MAAQ,MAhN/BD,KAAKkD,MAAQ,CACTiC,MAAM,EACNsD,gBAAiB,EACjBC,cAAe,GACfvB,kBAAmB,IAiN3BoB,gBAAgB1E,GAIZ,MAAM,kBAAEsD,GAAsBnH,KAAKkD,OAC7B,eAAEU,EAAF,aAAkBG,EAAe,UAAa/D,KAAKV,aAElD6H,EAAkBtD,EAAKnE,MAC9BM,KAAKmD,SAAS,CAAEgE,sBAChBvD,EAAeC,GACfE,GAAa,GAIjBT,oBACI,MAAMqF,EAAM3I,KAAKyE,QAAQmE,QACzBD,EAAIlC,iBAAiB,YAAazG,KAAK8E,cACvC6D,EAAIlC,iBAAiB,YAAazG,KAAKoF,eACvCuD,EAAIlC,iBAAiB,WAAYzG,KAAK2E,YACtCgE,EAAIlC,iBAAiB,OAAQzG,KAAKqF,YAElC,MAAM,SAAEjE,GAAapB,KAAKV,MAEtB8B,GACApC,WAAW,KAEPgB,KAAKwI,UAAUK,SAChB,IAIXC,uBACI,MAAMH,EAAM3I,KAAKyE,QAAQmE,QACzBD,EAAII,oBAAoB,YAAa/I,KAAK8E,cAC1C6D,EAAII,oBAAoB,YAAa/I,KAAKoF,eAC1CuD,EAAII,oBAAoB,WAAY/I,KAAK2E,YACzCgE,EAAII,oBAAoB,OAAQ/I,KAAKqF,YAGzCnF,SACI,MAAM,kBAAEiH,GAAsBnH,KAAKkD,MAEnC,OACI,mBAAK7B,MAAO,CAAE2H,SAAU,YAAcC,IAAKjJ,KAAKyE,SAC3CzE,KAAKkD,MAAMiC,MACZ,mBAAK9D,MAAO,CACR6H,OAAQ,kBACRC,gBAAiB,uBACjBH,SAAU,WACVI,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,OAAQ,OAER,mBACInI,MAAO,CACH2H,SAAU,WACVI,IAAK,MACLG,MAAO,EACPD,KAAM,EACNG,UAAW,SACXC,MAAO,OACPC,SAAU,KAGd,uBAAK,YAAC,IAAD,CAAMlK,GAAG,+BAAT,8BAIb,uBACI,qBAAOiB,MAAM,yBAAyBkJ,UAAQ,EAC1CxJ,KAAK,OACLX,GAAG,aACHoK,SAAU7J,KAAKyF,eACfwD,IAAMa,IACF9J,KAAKwI,UAAYsB,MAI7B,uBACKC,OAAOC,KAAK7C,GAAmBjC,OAAS,EAAK,sBAAI,YAAC,IAAD,CAAMzF,GAAG,6BAAT,oBAAoE,GACtH,kBAAIiB,MAAM,cACLqJ,OAAOC,KAAK7C,GAAmBtG,IAAKoJ,IACjC,MAAM,WAAE7D,EAAa,IAAOe,EAAkB8C,GACxCC,EAAUD,EAAIE,MAAM,8CAC1B,OACI,kBAAIzJ,MAAM,wEACN,mBAAKA,MAAM,wCACNwJ,GAAW,mBAAKxJ,MAAM,iBACnBzB,IAAKkI,EAAkB8C,GAAKvE,MAAM5G,OAAOsL,OACzC/I,MAAM,sBAEV,yBAAQ8F,EAAkB8C,GAAKvE,MAAMkB,YACrC,YAAC,IAAD,CAAMnH,GAAG,+BAAT,uBACA,yBAAQsG,IAAKsE,YAAYlD,EAAkB8C,GAAKvE,MAAMsC,MAAO,KAEjE,mBAAKtH,MAAM,gBAAgBW,MAAM,gBAC7B,mBACIX,MAAM,qEACN4J,KAAK,cACLjJ,MAAQ,UAAS+E,EAAWC,0BAC5BkE,gBAAenE,EAAWC,SAC1BmE,gBAAc,IACdC,gBAAc,cASzCzK,KAAKV,MAAMoL,c,EAMblG","file":"35.chunk.445f8.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { toJS } from 'mobx';\nimport { Text, Localizer } from 'preact-i18n';\nimport { route } from 'preact-router';\nimport linkstate from 'linkstate';\n\nimport mu from '../../lib/musher-util';\n\nimport Images from '../../components/form/images';\nimport Files from '../../components/form/files';\n\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_TOP_BACK = mu.marginTopBack(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nconst initialState = {\n\tisLoading: false,\n};\n\n@observer\nclass Input extends Component {\n    handleImageErrored = (e) => {\n        const image = e.target;\n        image.onerror = null;\n        setTimeout(() => {\n            image.src += `?${new Date()}`;\n        }, 1000);\n    }\n    \n    removeImage = async (e) => {\n        const { newsStore } = this.props.stores;\n        const { news } = this.props;\n        const imageName = e.target.parentElement.dataset.name || e.target.dataset.name;\n        newsStore.removeImage({\n            id: news.id,\n            name: imageName,\n        });\n    }\n\n    removeMainImage = () => {\n        const { news, field, updateField } = this.props;\n        updateField({ id: news.id, field, value: {} });\n    }\n\n    render() {\n        // const { saved, dog, type = 'text', datalist = [], min, max, step, field, title, icon, help, onInput, updateField } = this.props;\n        const { saved, news, type = 'text', rows, field, title, icon, help, onInput, updateField } = this.props;\n        const value = news[field];\n        if (type === 'image') {\n            return (\n                <div class={`form-group ${saved[`${field}.${news.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n\n                    <div class='container-fluid'>\n                        <div class='row'>\n                            {news.images && news.images.map(img => (\n                                <div class='col-3 p-1'>\n                                    <img src={img.s3SmallLink} class='img-fluid' onError={this.handleImageErrored} />\n                                    <button class='btn btn-sm btn-link'\n                                        onClick={this.removeImage}\n                                        data-name={img.name}\n                                    ><i class='fas fa-trash' /> Del</button>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <Images saved={saved} object={news} field={field} updateField={updateField} autoOpen={false} />\n                    {saved[`${field}.${news.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='news.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'file') {\n            return (\n                <div class={`form-group ${saved[`${field}.${news.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <Files saved={saved} object={news} field={field} updateField={updateField} />\n                    {saved[`${field}.${news.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='news.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'textarea') {\n            return (\n                <div class={`form-group ${saved[`${field}.${news.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <textarea type={type} class={`form-control ${saved[`${field}.${news.id}`] ? 'is-valid' : ''}`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                        value={value}\n                        rows={rows}\n                        data-id={news.id}\n                        data-field={field}\n                        onInput={onInput}\n                    />\n                    {saved[`${field}.${news.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='news.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n\n        return (\n            <div class={`form-group ${saved[`${field}.${news.id}`] ? 'is-valid' : ''}`}>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type={type} class={`form-control ${saved[`${field}.${news.id}`] ? 'is-valid' : ''}`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    value={value}\n                    data-id={news.id}\n                    data-field={field}\n                    onInput={onInput}\n                />\n                {saved[`${field}.${news.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='news.changes-saved'>Endringene er lagret</Text></div> : \n                    <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n            </div>\n        );\n    }\n}\n\n@observer\nclass InputNew extends Component {\n    onInput = (e) => {\n        const { field } = this.props;\n        const value = e.target.value;\n        const { newsStore } = this.props.stores;\n        // console.log('adStore.newAd', adStore.newAd);\n        newsStore.updateObjectKeyValue('newNews', field, value);\n    }\n\n    render() {\n        const { field, icon, title, help } = this.props;\n        const { newsStore } = this.props.stores;\n        const { newNews } = newsStore;\n        return (\n            <div class='form-group'>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type='text' class={`form-control`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    onInput={this.onInput}\n                    value={newNews[field]}\n                />\n                <small id={`${field}Help`} class='form-text text-muted'>{help}</small>\n            </div>\n        );\n    }\n}\n\n@observer\nclass NewsEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n    }\n\n\tasync loadNews(props = this.props) {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { newsStore } = this.props.stores;\n\t\tawait newsStore.load(props.id);\n\t}\n\n    updateField = (e) => {\n        const { id, field, type, elementtype } = e.target.dataset;\n        const value = e.target.value;\n        this.updateFieldValue({ id: parseInt(id, 10), field, value, type, elementtype });\n    }\n\n    updateFieldValue = ({ id, field, value, datatype, elementtype, skipTimer = false }) => {\n        const { newsStore } = this.props.stores;\n        let newValue = value;\n\n        let localObjectValue = value;\n        const { news } = newsStore;\n        if (field === 'images') {\n            if (Array.isArray(news.images) && Array.isArray(value)) {\n                localObjectValue = [...news.images, ...value];\n            }\n        }\n    \n        if (datatype === 'array' && !Array.isArray(value)) {\n            if (elementtype === 'number') {\n                newValue = value.split(',').map(e => parseFloat(e) || e);\n            } else  {\n                newValue = value.split(',');\n            }\n            // console.log('updateFieldValue', id, field, value, datatype, elementtype);\n        }\n\n       \n        newsStore.updateField(id, field, localObjectValue);\n        if (skipTimer) {\n            this.doUpdateField(id, field, newValue);\n        } else {\n            clearTimeout(this.updateTimer[field]);\n            this.updateTimer[field] = setTimeout(async () => {\n                this.doUpdateField(id, field, newValue);\n            }, 500);\n        }\n    }\n\n    async doUpdateField(id, field, value) {\n        const { newsStore } = this.props.stores;\n        await newsStore.saveField(id, field, value);\n    }\n\n    insertNewNews = async () => {\n        const { newsStore } = this.props.stores;\n\t\tconst { newNews } = newsStore;\n\t\tnewsStore.insert({ ...newNews });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadNews();\n\t}\n\n    back = () => {\n        const { createNew } = this.props;\n        const { newsStore } = this.props.stores;\n\t\tconst { news } = newsStore;\n        if (createNew) {\n            route(`/news/`);\n        } else {\n            route(`/news/${news.id}`);\n        }\n    }\n\n\trender() {\n        const { createNew } = this.props;\n\t\tconst { newsStore, userStore } = this.props.stores;\n        const { isAdmin } = userStore;\n        if (!isAdmin) {\n            return '';\n        }\n\t\tconst { news, saved } = newsStore;\n\t\treturn (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n                <div class='d-flex justify-content-between mb-2'>\n                    <div>\n                        <button class='btn btn-link pl-0 fixed-top text-primary'\n                            style={`top: ${MARGIN_TOP_BACK}; left: 5px; font-size: 35px; width: 45px;`}\n                            onClick={this.back}>\n                            <i class='fas fa-arrow-circle-left' />\n                        </button>\n                    </div>\n                    <div>\n                        <h5 class='text-muted'>News and howto content</h5>\n                    </div>\n                    <div>\n                        &nbsp;\n                    </div>\n                </div>\n\n\t\t\t\t{createNew ? (\n                    <div class='row'>\n                        <div class='col-12'>\n                            <h5><Text id='news.add-new'>Lag nytt innhold</Text></h5>\n                            <InputNew stores={this.props.stores} field='title' icon='fas fa-heading'\n                                title={<Text id='news.title'>Tittel</Text>}\n                                help={<Text id='news.title-help'>Title of this news story</Text>} />\n                            <InputNew stores={this.props.stores} field='tag' icon='fas fa-eye'\n                                title={<Text id='news.tag'>Tag</Text>}\n                                help={<Text id='news.tag-help'>Tag of this news story</Text>}\n                                onInput={this.updateField} />\n                            <button\n                                type='button'\n                                class='btn btn-primary mb-2'\n                                onclick={this.insertNewNews}\n                            >Save news</button>\n                        </div>\n                    </div>\n                ) : (\n                    <div class='row'>\n                        <div class='col-12'>\n                            <Input saved={saved} news={news} field='title' icon='fas fa-heading'\n                                title={<Text id='news.title'>Title</Text>}\n                                help={<Text id='news.title-help'>Title of this news story</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} news={news} field='active' icon='fas fa-heading'\n                                title={<Text id='news.active'>Active</Text>}\n                                help={<Text id='news.active-help'>Is this active yet?</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} news={news} field='tag' icon='fas fa-heading'\n                                title={<Text id='news.tag'>Tag</Text>}\n                                help={<Text id='news.tag-help'>Tag of this news story</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} news={news} field='ingress' icon='fas fa-quote-right'\n                                type='textarea'\n                                title={<Text id='news.ingress'>Ingress</Text>}\n                                help={<Text id='news.ingress-help'>Ingress of this news story</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} news={news} field='body' icon='fas fa-quote-right'\n                                type='textarea' rows={20}\n                                title={<Text id='news.body'>Body</Text>}\n                                help={<Text id='news.body-help'>Body of this news story</Text>}\n                                onInput={this.updateField} />\n\n                            <Input saved={saved} news={news} field='image' type='image' icon='fas fa-camera'\n                                stores={this.props.stores}\n                                title={<Text id='news.photo'>Bilder</Text>} \n                                help={<Text id='news.photo-help'>Images for this news story.</Text>}\n                                onInput={this.updateField} updateField={this.updateFieldValue} />\n    \t\t\t\t\t</div>\n    \t\t\t\t</div>\n                )}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NewsEdit;\n","import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport { toJS } from 'mobx';\nimport util from 'preact-util';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport DragNDropFileupload from './dragNdropFileupload';\n\n@observer\nclass Files extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n    }\n    \n    handleAddImage = (file) => {\n        // <Images saved={saved} object={dog} field={field} updateField={updateField} />\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const {\n            updateField,\n            object,\n            field,\n        } = this.props;\n        updateField({ id: object.id, field, value: file });\n\n        // let images = toJS(object.images);\n        // if (!util.isArray(images)) {\n        //     images = [];\n        // }\n        // images.push(file);\n        // updateField({ id: object.id, field: 'images', value: images });\n    };\n\n    render() {\n        const { uploadStatus = () => {}, before = () => {}, after = () => {}, autoOpen = false } = this.props;\n        return (\n            <div class='row'>\n                <div class='col-12'>\n                    <Text id='form.files.upload-file'>Last opp fil</Text>:<br />\n                    <DragNDropFileupload\n                        handleAddImage={this.handleAddImage}\n                        apiUrl={'/api/fileupload'}\n                        uploadStatus={uploadStatus}\n                        before={before}\n                        after={after}\n                        autoOpen={autoOpen}\n                    >\n                        <div style={{ height: 30, width: '100%' }}>\n                            {/* {files.map((file, idx) => (\n                                <div key={idx}>\n                                    {file.name}\n                                    Total: {util.asString(file, 'load', 'total')}\n                                    <img style='width: 48px;'\n                                        alt='Preview'\n                                        key={file.preview}\n                                        src={file.src}\n                                    />\n                                </div>\n                            ))} */}\n                        </div>\n                    </DragNDropFileupload>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Files;\n","import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport { toJS } from 'mobx';\nimport util from 'preact-util';\n\nimport DragNDropFileupload from './dragNdropFileupload';\n\n@observer\nclass Images extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n    }\n    \n    handleAddImage = (file) => {\n        const { addToImages = true } = this.props;\n\n        // <Images saved={saved} object={dog} field={field} updateField={updateField} />\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const {\n            updateField,\n            object,\n            field,\n        } = this.props;\n\n        if (field) {\n            updateField({ id: object.id, field, value: file, skipTimer: true });\n        }\n\n        // let images = toJS(object.images);\n        // if (!util.isArray(images)) {\n        //     images = [];\n        // }\n        if (addToImages) {\n            const images = [];\n            images.push(file);\n            updateField({ id: object.id, field: 'images', value: images, skipTimer: true });\n        }\n        // const allImages = [];\n        // allImages.push(file);\n        // updateField({ id: object.id, field: 'allImages', value: allImages, skipTimer: true });\n    };\n\n    render() {\n        const { uploadStatus = () => {}, before = () => {}, after = () => {}, autoOpen = true } = this.props;\n        return (\n            <div class='row'>\n                <div class='col-12'>\n                    <DragNDropFileupload\n                        handleAddImage={this.handleAddImage}\n                        uploadStatus={uploadStatus}\n                        apiUrl={'/api/fileupload'}\n                        before={before}\n                        after={after}\n                        autoOpen={autoOpen}\n                    >\n                        <div style={{ height: 30, width: '100%' }}>\n                            {/* {files.map((file, idx) => (\n                                <div key={idx}>\n                                    {file.name}\n                                    Total: {util.asString(file, 'load', 'total')}\n                                    <img style='width: 48px;'\n                                        alt='Preview'\n                                        key={file.preview}\n                                        src={file.src}\n                                    />\n                                </div>\n                            ))} */}\n                        </div>\n                    </DragNDropFileupload>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Images;\n","import { h, Component, createRef } from 'preact';\nimport { observer } from 'mobx-preact';\nimport util from 'preact-util';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nconst debug = false;\nconst debugName = 'Images';\n\n@observer\nclass DragNDropFileupload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drag: false,\n            loadingProgress: 0,\n            uploadedFiles: [],\n            uploadedFilesData: {},\n        };\n    }\n\n    dropRef = createRef();\n\n    handleDrag = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    handleDragIn = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter++;\n        if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n            this.setState({ drag: true });\n        }\n    }\n\n    handleDragOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter--;\n        if (this.dragCounter === 0) {\n            this.setState({ drag: false });\n        }\n    }\n\n    handleDrop = (e) => {\n        if (debug) {\n            console.log(`${debugName}.handleDrop: event`, e);\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({ drag: false });\n        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n            // this.props.handleDrop(e.dataTransfer.files);\n            // e.dataTransfer.clearData();\n            for (let i = 0, l = e.dataTransfer.files.length; i < l; i += 1) {\n                const photo = e.dataTransfer.files[i];\n                // if (photo.type.match('image.*')) {\n                this.readLocalFile(photo);\n                // }\n            }\n            this.dragCounter = 0;\n        }\n    }\n\n    // Upload\n    handleAddFiles = (event) => {\n        event.preventDefault();\n        const el = event.target;\n        if (debug) {\n            console.log(`${debugName}.handleAddFiles: event, el`, event, el);\n        }\n        for (let i = 0, l = el.files.length; i < l; i += 1) {\n            const photo = el.files[i];\n            // if (photo.type.match('image.*')) {\n            this.readLocalFile(photo);\n            // }\n        }\n    }\n\n    handleEvent = (e, fileObject) => {\n        if (debug) {\n            console.log(`${debugName}.handleEvent[${fileObject.name}]: ${e.type}: `\n                + `${e.loaded} bytes transferred of ${e.total}. Is lengthComputable: ${e.lengthComputable}: `\n                + `${JSON.stringify(e)}`);\n        }\n    }\n\n    handleUpload = (fileObject) => {\n        if (debug) {\n            console.log(`${debugName}.handleUpload[${fileObject.name}]`);\n        }\n\n        const { uploadStatus = () => {}, before = () => {}, after = () => {} } = this.props;\n        uploadStatus(false);\n\n        if (util.isFunction(before)) {\n            before();\n        }\n\n        const formData = new FormData();\n        formData.append('files[]', fileObject);\n        const uploadMeta = {\n            progress: 1,\n        };\n\n        uploadMeta.xhr = new XMLHttpRequest();\n\n        uploadMeta.xhr.upload.addEventListener('progress', (event) => {\n            const fileObj = fileObject;\n            this.updateProgress(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('loadstart', (event) => {\n            const fileObj = fileObject;\n            this.handleEvent(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('load', (event) => {\n            const fileObj = fileObject;\n            this.handleEvent(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('loadend', (event) => {\n            const fileObj = fileObject;\n            if (util.isFunction(after)) {\n                after();\n            }\n            this.handleEvent(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('progress', (event) => {\n            const fileObj = fileObject;\n            this.handleEvent(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('error', (event) => {\n            const fileObj = fileObject;\n            this.handleEvent(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('abort', (event) => {\n            const fileObj = fileObject;\n            this.handleEvent(event, fileObj);\n        });\n        uploadMeta.xhr.addEventListener('readystatechange', (event) => {\n            const fileObj = fileObject;\n            this.uploadDone(event, fileObj);\n        });\n\n        uploadMeta.xhr.open('POST', `${util.getApiServer()}${this.props.apiUrl}`);\n        uploadMeta.xhr.setRequestHeader('Authorization', `Bearer ${util.getJwtToken()}`);\n        uploadMeta.xhr.send(formData);\n\n        const filename = fileObject.name;\n        const uploadedFilesData = this.state.uploadedFilesData;\n        if (!uploadedFilesData[filename]) {\n            uploadedFilesData[filename] = {};\n        }\n        uploadedFilesData[filename].uploadMeta = uploadMeta;\n        uploadedFilesData[filename].imageNum = this.state.imageNum;\n        this.setState({ uploadedFilesData });\n    }\n\n    // eslint-disable-next-line\n    readLocalFile = (fileObject) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.addEventListener('error', (error) => {\n                if (debug) {\n                    console.log(`${debugName}.FileReader: Error occurred reading file: ${fileObject.name}: ${error}`);\n                }\n                reject(error);\n            });\n\n            reader.addEventListener('load', (event) => {\n                if (debug) {\n                    console.log(`${debugName}.FileReader: File: ${fileObject.name} read successfully: `\n                        + `${JSON.stringify(event)}`);\n                }\n                const photo = fileObject;\n                const filename = photo.name;\n                const uploadedFilesData = this.state.uploadedFilesData;\n                if (!uploadedFilesData[filename]) {\n                    uploadedFilesData[filename] = {};\n                }\n                uploadedFilesData[filename].event = event;\n                this.setState({ uploadedFilesData });\n                this.handleUpload(photo);\n                resolve(event);\n            });\n\n            reader.readAsDataURL(fileObject);\n        });\n    }\n\n    updateProgress = (event, fileObject) => {\n        if (event.lengthComputable) {\n            const filename = fileObject.name;\n            const uploadedFilesData = this.state.uploadedFilesData;\n            const percentComplete = (event.loaded / event.total) * 100;\n            if (debug) {\n                console.log(`${debugName}.updateProgress[${filename}].progress`, percentComplete);\n            }\n            uploadedFilesData[filename].uploadMeta.progress = percentComplete;\n            this.setState({ uploadedFilesData });\n        }\n    }\n\n    uploadDone = (event, fileObject) => {\n        const filename = fileObject.name;\n        const uploadedFilesData = this.state.uploadedFilesData;\n        const uploadMeta = uploadedFilesData[filename].uploadMeta;\n        if (debug) {\n            console.log(`${debugName}.uploadDone[${filename}].uploadedFilesData`, uploadedFilesData);\n            console.log(`${debugName}.uploadDone[${filename}].uploadMeta`, uploadMeta);\n            console.log(`${debugName}.uploadDone.event`, event);\n        }\n\n        if (uploadMeta && uploadMeta.xhr.readyState === 4 && uploadMeta.xhr.status === 201) {\n            const response = JSON.parse(uploadMeta.xhr.responseText);\n            const files = response.data.files;\n            for (let i = 0; i < files.length; i += 1) {\n                const file = files[i];\n                this.addFileToUpload(file);\n                this.fileInput.value = '';\n            }\n        }\n    }\n\n    addFileToUpload(file) {\n        if (debug) {\n            console.log(`${debugName}.addFileToUpload[${file.name}]`);\n        }\n        const { uploadedFilesData } = this.state;\n        const { handleAddImage, uploadStatus = () => {} } = this.props;\n\n        delete uploadedFilesData[file.name];\n        this.setState({ uploadedFilesData });\n        handleAddImage(file);\n        uploadStatus(true);\n    }\n    // /Upload\n\n    componentDidMount() {\n        const div = this.dropRef.current;\n        div.addEventListener('dragenter', this.handleDragIn);\n        div.addEventListener('dragleave', this.handleDragOut);\n        div.addEventListener('dragover', this.handleDrag);\n        div.addEventListener('drop', this.handleDrop);\n\n        const { autoOpen } = this.props;\n\n        if (autoOpen) {\n            setTimeout(() => {\n                // console.log('[setTimeout]');\n                this.fileInput.click();\n            }, 10);\n        }\n    }\n\n    componentWillUnmount() {\n        const div = this.dropRef.current;\n        div.removeEventListener('dragenter', this.handleDragIn);\n        div.removeEventListener('dragleave', this.handleDragOut);\n        div.removeEventListener('dragover', this.handleDrag);\n        div.removeEventListener('drop', this.handleDrop);\n    }\n\n    render() {\n        const { uploadedFilesData } = this.state;\n\n        return (\n            <div style={{ position: 'relative' }} ref={this.dropRef}>\n                {this.state.drag &&\n                <div style={{\n                    border: 'dashed grey 4px',\n                    backgroundColor: 'rgba(255,255,255,.8)',\n                    position: 'absolute',\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0,\n                    zIndex: 9999,\n                }}>\n                    <div\n                        style={{\n                            position: 'absolute',\n                            top: '50%',\n                            right: 0,\n                            left: 0,\n                            textAlign: 'center',\n                            color: 'grey',\n                            fontSize: 36,\n                        }}\n                    >\n                        <div><Text id='imageupload.drag-files-here'>drop your files here :)</Text></div>\n                    </div>\n                </div>}\n\n                <div>\n                    <input class='btn btn-info col-sm-12' multiple\n                        type='file'\n                        id='image-file'\n                        onchange={this.handleAddFiles}\n                        ref={(c) => {\n                            this.fileInput = c;\n                        }}\n                    />\n                </div>\n                <div>\n                    {Object.keys(uploadedFilesData).length > 0 ? (<h3><Text id='imageupload.upload-images'>Uploaded images</Text></h3>) : ''}\n                    <ul class='list-group'>\n                        {Object.keys(uploadedFilesData).map((key) => {\n                            const { uploadMeta = {} } = uploadedFilesData[key];\n                            const isImage = key.match(/(jpg|jpeg|png|gif|heic|heif|svg|webp|tif)/i);\n                            return (\n                                <li class='list-group-item list-group-item-action flex-column align-items-start'>\n                                    <div class='d-flex w-100 justify-content-between'>\n                                        {isImage && <img class='img-fluid mr-3'\n                                            src={uploadedFilesData[key].event.target.result}\n                                            style='max-height: 50px;'\n                                        />}\n                                        <small>{uploadedFilesData[key].event.uploadDone}</small>\n                                        <Text id='imageupload.uploading-image'>Laster opp bilde...</Text>\n                                        <small>{util.formatBytes(uploadedFilesData[key].event.total, 2)}</small>\n                                    </div>\n                                    <div class='progress mt-1' style='height: 4px;'>\n                                        <div\n                                            class='progress-bar progress-bar-striped progress-bar-animated bg-success'\n                                            role='progressbar'\n                                            style={`width: ${uploadMeta.progress}%; height: 4px;`}\n                                            aria-valuenow={uploadMeta.progress}\n                                            aria-valuemin='0'\n                                            aria-valuemax='100'\n                                        />\n                                    </div>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default DragNDropFileupload;\n"],"sourceRoot":""}