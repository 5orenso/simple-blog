{"version":3,"sources":["webpack:///./components/inbox/users.js","webpack:///./routes/inbox/index.js"],"names":["initialState","InboxUser","observer","Component","constructor","props","super","this","state","render","user","showDot","shortname","mu","displayNameShort","name","displayName","userImage","image","images","undefined","teamImage","teamName","lastMessage","isMyMessage","body","uuidv4","updateUser","id","class","style","s3SmallLink","href","place","country","readDate","maxLength","util","formatDistance","updated","Date","locale","MARGIN_TOP","marginTop","MARGIN_BOTTOM","marginBottom","isLoading","limit","offset","search","Inbox","searchForMessages","setState","loadMessages","messageStore","userStore","stores","getNotifications","getUnReadMessages","loadConversationList","searchText","componentDidMount","users","for","type","onInput","linkState","value","placeholder","onClick","map"],"mappings":"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","file":"route-inbox.chunk.71619.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nconst initialState = {};\n\n@observer\nclass InboxUser extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n\trender() {\n        const { user = {}, showDot = false } = this.props;\n        const shortname = mu.displayNameShort(user);\n        const name = mu.displayName(user, true);\n        const userImage = user.image || (user.images ? user.images[0] : undefined) || user.teamImage;\n        const teamName = user.teamName;\n\n        const lastMessage = user.lastMessage;\n        let isMyMessage;\n        let body;\n        if (lastMessage) {\n            isMyMessage = user.uuidv4 !== lastMessage.updateUser;\n            body = lastMessage.body === 'LIKE_MESSAGE' ? <Text id='inbox.like-message'>Liked message</Text> : lastMessage.body;\n        }\n\n\t\treturn (\n            <div class='d-flex flex-row flex-nowrap position-relative' style='overflow: auto;'>\n                <div \n                    class={`text-center border rounded-circle imageRounded pt-2`}\n                    style={`${userImage ? `background-image: url(\"${userImage.s3SmallLink}\"); background-size: cover;` : ''} border-width: 3px !important;`}\n                >\n                    {!userImage && <span class='font-weight-lighter' style='font-size: 35px;'>{shortname}</span>}\n                </div>\n                <div class='flex-grow-1 pl-3 pt-0'>\n                    <div class='text-overflow'>\n                        <a href={`/inbox/${user.uuidv4}`} class='stretched-link'>\n                            <h5>{name}</h5>\n                        </a>\n                    </div>\n                    <div class='text-overflow'>\n                        {user.place ? `${user.place}, ` : ''} {user.country}\n                    </div>\n                    {lastMessage ? <>\n                        <div class={`text-overflow`}>\n                            {isMyMessage ? <>\n                                <span class='font-weight-lighter'><Text id='inbox.you'>You</Text>:</span>\n                                <span class={`ml-1 ${lastMessage.readDate ? '' : 'font-weight-bold'}`}>\n                                    {mu.maxLength(body, 30)}\n                                </span>\n                            </> : <>\n                                <span class={lastMessage.readDate ? '' : 'font-weight-bold'}>\n                                    {mu.maxLength(body, 30)}\n                                </span>\n                            </>}\n                            <span class='text-muted ml-3'>\n                                {util.formatDistance(lastMessage.updated, new Date(), { locale: 'no-NB' })}\n                            </span>\n                        </div>\n                    </> : <>\n                        {teamName && <div class='text-overflow'>\n                            {teamName}\n                        </div>}                    \n                    </>}\n                </div>\n                {showDot && <div class='d-flex align-items-center'>\n                    <i class='far fa-circle' style='font-size: 2.0em;' />\n                </div>}\n            </div>\n\t\t);\n\t}\n}\n\nexport default InboxUser;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer } from 'preact-i18n';\nimport linkState from 'linkstate';\n\nimport InboxUser from '../../components/inbox/users';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nconst initialState = {\n    isLoading: false,\n\tlimit: 25,\n\toffset: 0,\n    search: '',\n};\n\n@observer\nclass Inbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n    }\n\n    async loadMessages({ limit, offset, search }) {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { messageStore, userStore } = this.props.stores;\n        await userStore.getNotifications();\n        await messageStore.getUnReadMessages();\n\t\tawait messageStore.loadConversationList({ limit, offset, search });\n\t\tthis.setState({ isLoading: false, searchText: search });\n\t}\n\n    searchForMessages = () => {\n        const { search, limit } = this.state;\n\t\tthis.setState({\n\t\t\toffset: 0,\n\t\t});\n\t\tthis.loadMessages({ search, limit });\n    }\n\n    componentDidMount() {\n\t\tthis.loadMessages({});\n\t}\n\n\t// componentWillReceiveProps(nextProps) {\n\t// \tthis.loadMessages(nextProps);\n\t// }\n\n    render() {\n        const { search, searchText } = this.state;\n\n        const { messageStore } = this.props.stores;\n        const { users } = messageStore;\n\n\n        return (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n\n                <div class='row'>\n                    <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-3'>\n                        <a href='/inbox/new' class='btn btn-sm btn-success float-right' style=''><i class='fas fa-edit' /> <Text id='inbox.new'>New message</Text></a>\n                        {/* <a href='/inbox/new' class='float-right' style='line-height: 1.0em;'><Text id='inbox.new'>New message</Text> <i class='fas fa-edit' style='font-size: 1.5em;' /></a> */}\n                        <h5><Text id='inbox.title'>Inbox</Text></h5>\n                    </div>\n                    <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-4'>\n                        <div class='d-flex flex-row flex-nowrap'>\n                            <div class='flex-grow-1'>\n                                <label class='sr-only' for='inboxSearch'><Text id='inbox.search'>Search</Text></label>\n                                <Localizer>\n                                    <input\n                                        type='text'\n                                        class='form-control mb-2'\n                                        id='inboxSearch'\n                                        onInput={linkState(this, 'search')}\n                                        value={search}\n                                        placeholder={<Text id='inbox.search-for-messages'>Search for messages in your inbox...</Text>}\n                                    />\n                                </Localizer>\n                            </div>\n                            <div class='ml-1'>\n                                <button\n                                    type='button'\n                                    class='btn btn-primary mb-2'\n                                    onClick={this.searchForMessages}\n                                ><Text id='inbox.search-button'>Search</Text></button>\n                            </div>\n                        </div>\n                    </div>\n\t\t\t\t</div>\n\n                {searchText && <>\n                    <div class='row'>\n                        <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-3'>\n                            <span class='text-muted'>\n                                <Text id='inbox.search-for'>Searched in messages for</Text>: {searchText}\n                            </span>\n                        </div>\n                    </div>\n                </>}\n                {/* <div class='row mt-3'>\n                    <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3'>\n                        <a href='/inbox/new' class='btn btn-primary btn-block' style=''><i class='fas fa-edit' /> <Text id='inbox.new'>New message</Text></a>\n                    </div>\n                </div> */}\n                <div class='row'>\n                    {users && users.map(user => <>\n                        <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-3'>\n                            <InboxUser stores={this.props.stores} user={user} />\n                        </div>\n                    </>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Inbox;\n"],"sourceRoot":""}