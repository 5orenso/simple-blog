{"version":3,"sources":["webpack:///./components/util/scrollIntoView.js","webpack:///./components/workout/totals.js","webpack:///./components/workout/calendar.js","webpack:///./components/workout/status.js","webpack:///./components/modal/index.js","webpack:///./components/workout/graph.js","webpack:///./components/gauge/style.css","webpack:///./components/ad/index.js","webpack:///./components/gauge/index.js"],"names":["initialState","ScrollIntoView","observer","Component","constructor","props","super","this","state","container","componentDidMount","horizontal","vertical","behavior","inline","block","scrollIntoView","render","ref","c","WorkoutTotals","loadTeams","teamStore","stores","currentMonth","Date","getMonth","currentYear","getFullYear","month","year","currentTeam","load","query","team","skipMusherWorkoutSummary","addData","loadAll","componentWillReceiveProps","nextProps","currentSeason","currentSeasonSummary","prevSeason","prevSeasonSummary","seasonStart","parseInt","findWorkoutSummary","findWorkoutSummaryTotal","class","value","distanceKm","smallUnit","elevation","util","secToHms","duration","speedAvg","RED_DAYS","WorkoutCalendar","chooseDay","e","yyyy","mm","day","dd","chooseDayFunction","target","parentElement","dataset","setState","isLoading","skipLoadSummary","userStore","workoutStore","getYear","dog","id","getWorkoutSummary","getWorkoutSummaryDay","loadWorkoutSummary","appState","workoutPlanStore","user","language","DAYS","mu","getDays","MONTHS","getMonths","darkmode","currentDay","getDate","basehref","hideSummary","hideTable","monthNum","yearNum","nextMonth","nextYear","getNextMonth","prevMonth","prevYear","getPrevMonth","weeksInMonth","getDaysInMonth","getWeeksInMonth","daysOfWeek","getDaysInWeek","week","totalDistanceKmMonth","totalCountMonth","totalElevationMonth","totalDurationMonth","totalSpeedavgMonth","totalPlanDistanceKmMonth","href","name","map","getDay","weekObj","summaryPlanWeek","findWorkoutPlanSummaryWeek","totalWeek","summary","findWorkoutSummaryWeekDay","summaryPlanDay","findWorkoutPlanSummaryDay","count","push","distance","isChosen","isToday","isDayOff","indexOf","style","onClick","data-day","data-month","data-year","getTrainingColor","colspan","avgArr","WorkoutStatus","loadWorkoutPlans","async","seasonYear","seasonMonth","workoutPlans","workoutPlanCurrent","workoutPlan","findTeam","months","monthRange","lastPlanMonth","planMonth","sumWorkoutPlanMonth","percCompleted","findWorkoutSummaryMonth","height","format","role","aria-valuenow","aria-valuemin","aria-valuemax","fields","Modal","toggleDate","showDate","touchStart","stopPropagation","startY","touches","pageY","touchEnd","undefined","readyToRefresh","touchMove","close","refreshing","y","appContainer","scrollTop","image","imagexxl","thumb","title","date","formatDate","locale","formatDistance","src","onTouchstart","onTouchend","onTouchmove","rel","download","WorkoutGraph","withText","rest","ascend","plan","loadIndex","avgDogs","avgImages","sledWeight","rating","temperature","graphWorkoutSummaryWeekDistanceCurrent","graphWorkoutSummaryWeekDistancePrev","graphWorkoutSummaryWeekElevationCurrent","graphWorkoutSummaryWeekElevationPrev","avgDayDistance","avgDayElevation","avgDayDuration","avgDaySpeedAvg","avgDayLoadIndex","avgDayAvgDogs","avgDayAvgImages","avgDaySledWeight","avgDayRest","avgDayRating","avgDayTemperature","settings","graphPlanWeekDistanceCurrent","showExtra","seasonWeeks","weekRange","seasonDays","dayRange","xTicksAll","wo","parts","Math","floor","length","xTicks","i","l","xTicksAllDays","partsDays","xTicksDays","width","showXTicks","xTicksVal","val","paddingTop","lineFromXzero","lineFromXmax","xTicksLink","dataLeft","legendLeft","dataFillLeft","showYTicksLeft","yTicksLeftPostfix","imperial","unitLeft","avgWindowLeft","smoothLeft","dataRight","legendRight","showYTicksRight","yTicksRightPostfix","unitRight","avgWindowRight","smoothRight","paddingLeft","yTicksLeftWidth","yTicksLeftVal","yTicksRightVal","module","exports","showAddComment","Ad","subject","body","logClick","adStore","ads","updateTimer","inputRef","apiServer","getApiServer","section","path","url","ambitions","type","postalcode","place","country","findTeamAmbition","ambition","findTeamType","page","replace","setTime","loadAd","time","match","ad","native","images","s3LargeLink","mouseData","Gauge","svgRef","radius","heightAdd","color","showPercentText","percent","prefix","showCenterText","centerText","centerTextSize","centerTextX","centerTextY","total","totalY","totalX","totalTextAnchor","completed","completedY","completedX","completedTextAnchor","strokeWidth","innerRadius","strokeWidthGauge","circumference","PI","arc","dashArray","transform","offset","min","max","textSize","textSizeSmall","xmlns","svg","preserveAspectRatio","gaugeBackground","cx","cy","r","strokeDasharray","strokeLinecap","gauge","stroke","strokeDashoffset","transition","gaugeText","x","dominant-baseline","text-anchor","font-size","secondary"],"mappings":"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","file":"6.chunk.6194d.esm.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nconst initialState = {};\n\n@observer\nclass ScrollIntoView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.container = null;\n    }\n\n    componentDidMount() {\n        const { horizontal, vertical = '' } = this.props;\n        const props = {\n            behavior: 'smooth',\n        };\n        if (horizontal) {\n            props.inline = horizontal;\n        }\n        if (vertical) {\n            props.block = vertical;\n        }\n\t\tthis.container.scrollIntoView(props);\n\t}\n\n    render() {\n        return (\n            <div ref={c => this.container = c}>&nbsp;</div>\n        );\n    }\n}\n\nexport default ScrollIntoView;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport style from '../style.css';\nimport mu from '../../lib/musher-util';\n\nimport Speed from '../../components/data/speed';\nimport Elevation from '../../components/data/elevation';\nimport Weight from '../../components/data/weight';\nimport Distance from '../../components/data/distance';\nimport Temperature from '../../components/data/temperature';\n\n@observer\nclass WorkoutTotals extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    async loadAll(props = this.props) {\n        await this.loadTeams(props);\n        // await Promise.all([\n        //     this.loadTeams(props),\n        // ]);\n    }\n\n    async loadTeams(props = this.props) {\n\t\tconst { teamStore } = props.stores;\n\n        const currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\n\t\tconst { month = currentMonth, year = currentYear, currentTeam } = props;\n\n\t\tawait teamStore.load({ query: { team: currentTeam, skipMusherWorkoutSummary: true, year, month }, addData: ['workoutSummary'] });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.year !== this.props.year || nextProps.currentTeam !== this.props.currentTeam) {\n            this.loadAll(nextProps);\n        }\n    }\n\n    render() {\n        const { teamStore } = this.props.stores;\n\n        const currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\t\tconst { month = currentMonth, year = currentYear, currentTeam, currentSeason: currentSeasonSummary, prevSeason: prevSeasonSummary } = this.props;\n\t\tconst seasonStart = parseInt(month < 8 ? year - 1 : year, 10);\n\n        const { workoutSummary } = teamStore;\n        const prevSeason = prevSeasonSummary || ((currentTeam ? teamStore.findWorkoutSummary(currentTeam, seasonStart - 1) : teamStore.findWorkoutSummaryTotal(seasonStart - 1)) || {});\n        const currentSeason = currentSeasonSummary || ((currentTeam ? teamStore.findWorkoutSummary(currentTeam, seasonStart) : teamStore.findWorkoutSummaryTotal(seasonStart)) || {});\n\n        return (\n            <div class='container-fluid mb-2'>\n                <div class='row mt-2 border-top'>\n                    <div class='col text-center'>\n                        <small class='text-muted'><i class='fas fa-road' /> {seasonStart}-{seasonStart + 1}</small>\n                        <h3>\n                            <Distance stores={this.props.stores} value={currentSeason.distanceKm || 0} smallUnit={true} />\n                        </h3>\n                    </div>\n                    <div class='col text-center border-left'>\n                        <small class='text-muted'><i class='fas fa-road' /> {seasonStart - 1}-{seasonStart}</small>\n                        <h3 class='text-muted'>\n                            <Distance stores={this.props.stores} value={prevSeason.distanceKm || 0} smallUnit={true} />\n                        </h3>\n                    </div>\n                </div>\n                <div class='row mt-2'>\n                    <div class='col text-center'>\n                        <small class='text-muted'><i class='fas fa-mountain' /> {seasonStart}-{seasonStart + 1}</small>\n                        <h3>\n                            <Elevation stores={this.props.stores} value={currentSeason.elevation || 0} smallUnit={true} />\n                        </h3>\n                    </div>\n                    <div class='col text-center border-left'>\n                        <small class='text-muted'><i class='fas fa-mountain' /> {seasonStart - 1}-{seasonStart}</small>\n                        <h3 class='text-muted'>\n                            <Elevation stores={this.props.stores} value={prevSeason.elevation || 0} smallUnit={true} />\n                        </h3>\n                    </div>\n                </div>\n                <div class='row mt-2'>\n                    <div class='col text-center'>\n                        <small class='text-muted'><i class='fas fa-clock' /> {seasonStart}-{seasonStart + 1}</small>\n                        <h3>\n                            {util.secToHms(currentSeason.duration || 0)}\n                        </h3>\n                    </div>\n                    <div class='col text-center border-left'>\n                        <small class='text-muted'><i class='fas fa-clock' /> {seasonStart - 1}-{seasonStart}</small>\n                        <h3 class='text-muted'>\n                            {util.secToHms(prevSeason.duration || 0)}\n                        </h3>\n                    </div>\n                </div>\n                <div class='row mt-2 border-bottom'>\n                    <div class='col text-center'>\n                        <small class='text-muted'><i class='fas fa-tachometer-alt' /> {seasonStart}-{seasonStart + 1}</small>\n                        <h3>\n                            <Speed stores={this.props.stores} value={currentSeason.speedAvg || 0} smallUnit={true} />\n                        </h3>\n                    </div>\n                    <div class='col text-center border-left'>\n                        <small class='text-muted'><i class='fas fa-tachometer-alt' /> {seasonStart - 1}-{seasonStart}</small>\n                        <h3 class='text-muted'>\n                            <Speed stores={this.props.stores} value={prevSeason.speedAvg || 0} smallUnit={true} />\n                        </h3>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default WorkoutTotals;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport Speed from '../../components/data/speed';\nimport Elevation from '../../components/data/elevation';\nimport Weight from '../../components/data/weight';\nimport Distance from '../../components/data/distance';\nimport Temperature from '../../components/data/temperature';\n\nimport mu from '../../lib/musher-util';\n\nconst RED_DAYS = [0, 6];\n\n@observer\nclass WorkoutCalendar extends Component {\n\n    async loadWorkoutSummary(props = this.props) {\n        this.setState({ isLoading: true });\n        if (props.skipLoadSummary) {\n            return false;\n        }\n\n\t\tconst { userStore, workoutStore } = this.props.stores;\n\t\tconst { currentTeam } = workoutStore;\n\n        const currentMonth = new Date().getMonth() + 1;\n        const { month = currentMonth, year = util.getYear(), team = currentTeam, dog = {} } = props;\n        if (dog && dog.id) {\n            await userStore.getWorkoutSummary({ dog: dog.id, year });\n            await userStore.getWorkoutSummaryDay({ month, year, dog: dog.id });\n        } else {\n            await userStore.getWorkoutSummary({ team, dog: dog.id, year });\n            await userStore.getWorkoutSummaryDay({ month, year, team, dog: dog.id });\n        }\n\t\t// await workoutStore.load({ query: { team: currentTeam, month, year } });\n        this.setState({ isLoading: false });\n    }\n\n    chooseDay = (e) => {\n        const { year: yyyy, month: mm, day: dd } = this.state;\n        const { chooseDayFunction = () => {} } = this.props;\n\t\tconst day = e.target.parentElement.dataset.day || e.target.dataset.day;\n\t\tconst month = e.target.parentElement.dataset.month || e.target.dataset.month;\n\t\tconst year = e.target.parentElement.dataset.year || e.target.dataset.year;\n\t\t// console.log({ day, month, year });\n\n        if (year === yyyy && month === mm && day === dd) {\n            this.setState({\n                year: null,\n                month: null,\n                day: null,\n            });\n        } else {\n            this.setState({\n                year,\n                month,\n                day,\n            });\n        }\n        chooseDayFunction({ day, month, year });\n    }\n\n    componentDidMount() {\n        this.loadWorkoutSummary();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // console.log('componentWillReceiveProps', nextProps);\n        if (nextProps.month !== this.props.month\n            || nextProps.year !== this.props.year\n            || nextProps.dog !== this.props.dog\n            || nextProps.team !== this.props.team) {\n            this.loadWorkoutSummary(nextProps);\n        }\n    }\n\n    render() {\n        const { appState, userStore, workoutPlanStore } = this.props.stores;\n        const { user } = userStore;\n        const { language = 'en' } = user;\n        const DAYS = mu.getDays(language);\n        const MONTHS = mu.getMonths(language);\n\n        const { day: dd, month: mm, year: yyyy } = this.state;\n\n\t\tconst { darkmode } = appState;\n        \n        const currentDay = new Date().getDate();\n        const currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\n\t\tconst { month = currentMonth, year = currentYear, dog, basehref, hideSummary, hideTable } = this.props;\n\n\t\tconst seasonStart = parseInt(month < 8 ? year - 1 : year, 10);\n\n        const monthNum = parseInt(month, 10);\n        const yearNum = parseInt(year, 10);\n        const { month: nextMonth, year: nextYear } = mu.getNextMonth(monthNum, yearNum);\n        const { month: prevMonth, year: prevYear } = mu.getPrevMonth(monthNum, yearNum);\n\n        const daysOfMonth = util.getDaysInMonth(month, year);\n        const weeksInMonth = util.getWeeksInMonth(month, year);\n        const firstWeek = weeksInMonth[0].week;\n        const daysOfWeek = util.getDaysInWeek(firstWeek, year, month);\n        let totalDistanceKmMonth = 0;\n        let totalCountMonth = 0;\n        let totalElevationMonth = 0;\n        let totalDurationMonth = 0;\n        let totalSpeedavgMonth = [];\n\n        let totalPlanDistanceKmMonth = 0;\n\n        return (\n            <>\n                <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-4 text-center'>\n                    <a href={`${basehref || '/workouts/month/'}${nextMonth}/${nextYear}/skipScroll`} class='float-right btn btn-sm btn-outline-secondary ml-2'><i class='fas fa-arrow-right' /></a>\n                    <a href={`${basehref || '/workouts/month/'}${prevMonth}/${prevYear}/skipScroll`} class='float-left btn btn-sm btn-outline-secondary mr-2'><i class='fas fa-arrow-left' /></a>\n                    <h3><Text id='workout.calendar.month'>Måned</Text> - {MONTHS[month - 1]} {year}</h3>\n                    <h5 class='text-muted font-weight-light'><Text id='workout.plan.season'>Sesongen</Text> {seasonStart} - {seasonStart + 1}</h5>\n                    {dog && <div>{dog.name}</div>}\n                    {/* <small>{util.isoDate(daysOfMonth[0], false, false, true)} - {util.isoDate(daysOfMonth[daysOfMonth.length - 1], false, false, true)}</small> */}\n                </div>\n\n                <div class='col-12 offset-0 col-sm-8 offset-sm-2 col-lg-6 offset-lg-3 mt-4'>\n\n                    {!hideTable && <>\n                        <table class='table table-striped table-sm'>\n                            <thead>\n                                <tr>\n                                    <th class='text-muted'><small><Text id='workout.calendar.week'>Uke</Text></small></th>\n                                    {daysOfWeek.map(day => <th><small>{DAYS[day.getDay()]}</small></th>)}\n                                    <th class='text-muted'><small><Text id='workout.calendar.sum'>Sum</Text></small></th>\n                                    {/* <th class='text-muted'>Totalt</th> */}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {weeksInMonth && weeksInMonth.map(weekObj => {\n                                    const daysOfWeek = util.getDaysInWeek(weekObj.week, year, month);\n                                    const summaryPlanWeek = workoutPlanStore.findWorkoutPlanSummaryWeek(parseInt(year, 10), weekObj.week) || {};\n                                    let totalWeek = 0;\n                                    return (\n                                        <tr>\n                                            <td class='text-right text-muted pt-3'>\n                                                <small>\n                                                    <a href={`/workouts/week/${weekObj.week}/${year}`} class='text-muted'>{weekObj.week}</a>\n                                                </small>\n                                            </td>\n                                            {daysOfWeek.map(day => {\n                                                const summary = userStore.findWorkoutSummaryWeekDay(day.getFullYear(), day.getMonth() + 1, day.getDate(), monthNum) || {};\n                                                const summaryPlanDay = workoutPlanStore.findWorkoutPlanSummaryDay(day.getFullYear(), day.getMonth() + 1, day.getDate(), monthNum) || {};\n                                                if (summary && summary.distanceKm) {\n                                                    totalWeek += summary.distanceKm;\n                                                    totalDistanceKmMonth += summary.distanceKm;\n                                                    totalCountMonth += summary.count;\n                                                    totalElevationMonth += summary.elevation;\n                                                    totalDurationMonth += summary.duration;\n                                                    totalSpeedavgMonth.push(summary.speedAvg);\n                                                }\n                                                if (summaryPlanDay && summaryPlanDay.distance) {\n                                                    totalPlanDistanceKmMonth += summaryPlanDay.distance;\n                                                }\n                                                const isChosen = (dd == day.getDate()) && (mm == day.getMonth() + 1) && (yyyy === day.getFullYear());\n                                                const isToday =  (currentDay == day.getDate()) && (currentMonth == day.getMonth() + 1) && (currentYear == day.getFullYear());\n                                                const isDayOff = RED_DAYS.indexOf(day.getDay()) > -1;\n                                                // console.log(summary);\n                                                // count: 1, day: 5, distanceKm: 10, duration: 3600, elevation: 200, month: 9, speedAvg: 12, year: 2020\n                                                return (\n                                                    <td class={`text-center font-weight-light position-relative pt-3 pb-3 ${isChosen ? 'calendarIsChosen' : ''} ${isToday ? 'calendarIsToday' : ''} ${isDayOff ? 'calendarIsWeekend' : ''}`}\n                                                        style={`font-size: 0.8em;`}\n                                                        onClick={this.chooseDay} data-day={day.getDate()} data-month={day.getMonth() + 1} data-year={year}\n                                                    >\n                                                        <div class='position-absolute text-muted' style='top: 0px; right: 2px; font-size: 0.7em;'>\n                                                            {day.getDate()}\n                                                        </div>\n                                                        {summary && summary.distanceKm ? \n                                                            <div class='rounded-pill w-100 px-1'\n                                                                style={`background-color: ${mu.getTrainingColor(summary, darkmode)};`}\n                                                            >\n                                                                <Distance stores={this.props.stores} value={summary.distanceKm} />\n                                                                {summary.count > 1 && (\n                                                                    <span class='position-absolute text-danger'\n                                                                        style='bottom: 0; right: 0px; font-size: 0.6em;'>\n                                                                        {summary.count}\n                                                                    </span>\n                                                                )}\n\n                                                            </div> : '-'}\n                                                        {summaryPlanDay.distance > 0 && (\n                                                            <span class='position-absolute text-primary'\n                                                                style='bottom: 0; left: 0px; font-size: 0.9em;'>\n                                                                <Distance stores={this.props.stores} value={summaryPlanDay.distance} />\n                                                            </span>\n                                                        )}\n                                                    </td>\n                                                );\n                                            })}\n                                            <td class='text-right pt-3 pb-3 position-relative' style='font-size: 0.8em;'>\n                                                <Distance stores={this.props.stores} value={totalWeek} />\n                                                {summaryPlanWeek.distance > 0 && (\n                                                    <span class='position-absolute text-primary'\n                                                        style='bottom: 0; left: 0px; font-size: 0.9em;'>\n                                                        <Distance stores={this.props.stores} value={summaryPlanWeek.distance} />\n                                                    </span>\n                                                )}    \n                                            </td>\n                                            {/* <td class='text-right text-muted pt-3'>{totalDistanceKmMonth}</td> */}\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                            <tfoot>\n                                <tr>\n                                    <td colspan='8' class='text-right'><Text id='workout.calendar.totalKm'>Totalt km</Text></td>\n                                    <td class='text-right text-muted pb-3 position-relative'>\n                                        <Distance stores={this.props.stores} value={totalDistanceKmMonth} />\n                                        {totalPlanDistanceKmMonth > 0 && (\n                                            <span class='position-absolute text-primary'\n                                                style='bottom: 0; left: 0px; font-size: 0.8em;'>\n                                                <Distance stores={this.props.stores} value={totalPlanDistanceKmMonth} />\n                                            </span>\n                                        )}\n                                    </td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </>}\n\n                    {!hideSummary && <>\n                        <h5 class='mt-4'><Text id='workout.calendar.summary'>Oppsummering</Text> - {MONTHS[month - 1]} {year}</h5>\n                        {dog && <div>{dog.name}</div>}\n\n                        <table class='table table-striped table-sm'>\n                            <tbody>\n                                <tr>\n                                    <td class='text-muted'><Text id='workout.calendar.totalWorkouts'>Antall økter</Text></td>\n                                    <td class='text-right'>{totalCountMonth}</td>\n                                </tr>\n                                <tr>\n                                    <td class='text-muted'><Text id='workout.calendar.distance'>Distanse</Text></td>\n                                    <td class='text-right'>\n                                        <Distance stores={this.props.stores} value={totalDistanceKmMonth} />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td class='text-muted'><Text id='workout.calendar.ascend'>Høydemeter</Text></td>\n                                    <td class='text-right'>\n                                        <Elevation stores={this.props.stores} value={totalElevationMonth} />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td class='text-muted'><Text id='workout.calendar.duration'>Varighet</Text></td>\n                                    <td class='text-right'>\n                                        {util.secToHms(totalDurationMonth)}\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td class='text-muted'><Text id='workout.calendar.avg-speed'>Gjennomsnittsfart</Text></td>\n                                    <td class='text-right'>\n                                        <Speed stores={this.props.stores} value={mu.avgArr(totalSpeedavgMonth)} />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </>}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WorkoutCalendar;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport style from '../style.css';\nimport mu from '../../lib/musher-util';\n\n@observer\nclass WorkoutStatus extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    async loadAll(props = this.props) {\n        // await Promise.all([\n        //     this.loadTeams(props),\n        //     this.loadWorkoutPlans(props),\n        //     this.loadWorkoutSummary(props),\n        // ]);\n    }\n\n    async loadTeams(props = this.props) {\n\t\tconst { teamStore } = props.stores;\n\n        const currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\n\t\tconst { month = currentMonth, year = currentYear, currentTeam } = props;\n\t\tawait teamStore.load({ query: { team: currentTeam, skipMusherWorkoutSummary: true, year, month }, addData: ['workoutSummary'] });\n\t}\n\n    loadWorkoutPlans = async (props = this.props) => {\n\t\tconst { workoutPlanStore } = props.stores;\n\n\t\tconst currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\t\tconst { year = currentYear, month = currentMonth, currentTeam } = props;\n\t\tconst seasonStart = parseInt(year || (month < 8 ? year - 1 : year), 10);\n\n\t\tif (currentTeam) {\n\t\t\tawait workoutPlanStore.load({ query: {\n\t\t\t\tteam: currentTeam,\n\t\t\t\tseasonYear: seasonStart,\n\t\t\t\tseasonMonth: 6,\n\t\t\t} });\n\t\t\tconst { workoutPlans } = workoutPlanStore;\n\t\t\tconst workoutPlanCurrent = workoutPlans[0] || {};\n\t\t\tif (workoutPlanCurrent.id) {\n\t\t\t\tawait workoutPlanStore.load(workoutPlanCurrent.id);\n\t\t\t}\n\t\t}\n\t}\n\n    async loadWorkoutSummary(props = this.props) {\n        const { year, currentTeam, dog } = props;\n\t\tconst { userStore } = props.stores;\n        await userStore.getWorkoutSummary({ team: currentTeam, year, dog });\n    }\n\n\tcomponentDidMount() {\n\t\tthis.loadAll();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.year !== this.props.year || nextProps.currentTeam !== this.props.currentTeam) {\n            this.loadAll(nextProps);\n        }\n    }\n\n    render() {\n\t\tconst { currentSeason, prevSeason, currentTeam } = this.props;\n\n        const { userStore, workoutPlanStore, teamStore } = this.props.stores;\n        const { workoutPlan } = workoutPlanStore;\n        const { user, workoutSummaryTeam } = userStore;\n        const { language = 'en' } = user;\n\t\tconst MONTHS = mu.getMonths(language);\n\n\t\tconst team = teamStore.findTeam(currentTeam) || {};\n\n        const currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\n        const { year = currentYear, month = currentMonth } = this.props;\n\t\tconst seasonStart = parseInt(month < 8 ? year - 1 : year, 10);\n        const months = util.monthRange(`${seasonStart}-08-01`, `${seasonStart + 1}-07-31`);\n        let lastPlanMonth;\n\n        return (\n            <div class='container-fluid mb-2'>\n                <div class='row mt-2'>\n                    <div class='col-12'>\n                        <h5>\n                            <span style='display: none;'>{workoutPlan.id}</span>\n                            <Text id='workout.totals.title'>Treningsplanstatus</Text>\n                        </h5>\n                    </div>\n                </div>\n                <div class='row mt-2 border-bottom pb-2'>\n                    {months && months.map((month) => {\n                        if (month.year > year || (month.year === year && month.month >= month)) {\n                            return '';\n                        }\n                        const planMonth = workoutPlanStore.sumWorkoutPlanMonth(month.year, month.month + 1);\n                        if (!planMonth) {\n                            return '';\n                        }\n                        lastPlanMonth = planMonth;\n                        const summaryMonth = userStore.findWorkoutSummaryMonth(month.year, month.month + 1);\n                        const percCompleted = summaryMonth / planMonth * 100;\n                        const height = percCompleted > 100 ? 100 : util.format(percCompleted, 0);\n                        return (\n                            <div class='col-3 text-center'>\n                                {/* <div class='w-100 mt-1'>\n                                    <small class='text-muted'>\n                                        {planMonth}km\n                                    </small>\n                                    <small class='text-info'>\n                                        {summaryMonth}km\n                                    </small>\n                                </div> */}\n                                <div class='px-auto w-100 clearfix'>\n                                    <div class={`progress ${style['progress-bar-vertical']}`}\n                                        style={' margin-left: calc(50% - 20px);'}\n                                    >\n                                        <div class='progress-bar progress-bar-striped bg-success' role='progressbar'\n                                            style={`height: ${height}%; width: 40px;`}\n                                            aria-valuenow={height} aria-valuemin='0' aria-valuemax='100'\n                                        >\n                                            {util.format(percCompleted, 0)}%\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class='w-100 mt-1'>\n                                    {MONTHS[month.month]} {month.year}\n                                </div>\n                            </div>\n                        );\n                    })}\n                    {!lastPlanMonth && <div class='col-12 text-center text-muted mb-5'>\n                        <div class='display-1'>\n                            <i class='far fa-sad-tear' />\n                        </div>\n                        <h3 class='font-weight-lighter'>\n                            <Text id='workout.plan.no-workout-plan-found' fields={{ name: team.name }}>Ingen treningsplaner funnet for team {team.name}.</Text>\n                        </h3>\n                        <a class='btn btn-success btn-lg mt-3' href='/workouts/plan'><i class='fas fa-calendar-alt' /> <Text id='workout.plan.new'>New workoutplan</Text></a>\n                    </div>}\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default WorkoutStatus;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\n@observer\nclass Modal extends Component {\n    toggleDate = () => {\n        const { showDate } = this.state;\n        this.setState({ showDate: !showDate });\n    }\n\n    touchStart = (e) => {\n        e.stopPropagation();\n        this.setState({\n            startY: e.touches[0].pageY,\n        })\n    }\n\n    touchEnd = (e) => {\n        e.stopPropagation();\n        this.setState({\n            startY: undefined,\n            readyToRefresh: false,\n        })\n    }\n\n    touchMove = (e) => {\n        e.stopPropagation();\n        const { close } = this.props;\n        const { startY, refreshing } = this.state;\n        const scrollDistance = 30;\n        const y = e.touches[0].pageY;\n        if (this.appContainer) {\n            const { scrollTop } = this.appContainer;\n            if (scrollTop === 0 && y > startY + scrollDistance && !refreshing) {\n                close();\n            }\n        }\n    }\n\n    render() {\n        const { showDate } = this.state;\n        const { image, imagexxl, close, thumb, name, title, date } = this.props;\n        return (\n            <div class='fixed-top bg-dark text-center pt-2' style='width: 100vw; height: 100vh;'>\n                <button class='btn btn-secondary float-right mr-2' onClick={close}>X</button>\n\n                    <div class='d-flex mb-2 px-2'>\n                        {/* {JSON.stringify(dog, null, 4)} */}\n                        {thumb && <div class={`text-center border rounded-circle imageRounded imageRoundedSmall`} style={thumb ? `background-image: url(\"${thumb}\");` : ''}>\n                            &nbsp;\n                        </div>}\n                        <div class='flex-grow-1 pl-3 pr-2 text-left' style='line-height: 1.3em;'>\n                            {name && <strong class='mr-2'>{name}:</strong>}\n                            {title}<br />\n                            <small class='text-muted'>\n                                {date && <small onClick={this.toggleDate}>\n                                    {showDate ? util.formatDate(date, { locale: 'no-NB' }) : util.formatDistance(date, new Date(), { locale: 'no-NB' })}\n                                </small>}\n                            </small>\n                        </div>\n                    </div>\n\n\n                <img src={image}\n                    class='img-fluid align-middle mt-2 mb-2'\n                    onClick={close}\n                    onTouchstart={this.touchStart}\n                    onTouchend={this.touchEnd}\n                    onTouchmove={this.touchMove}\n                    ref={c => this.appContainer = c}\n                />\n\n                <a target='_blank' rel='noopener noreferrer' href={imagexxl || image} download={imagexxl || image}>\n                    <i class='fas fa-download' /> <Text id='modal.download'>Last ned bildet</Text>\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default Modal;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nimport LineGraph from '../../components/lineGraph';\n\n@withText((props) => ({\n    week: <Text id='workout.graph.week' />,\n    distance: <Text id='workout.graph.distance' />,\n    duration: <Text id='workout.graph.duration'>Duration</Text>,\n    rest: <Text id='workout.graph.rest'>Rest</Text>,\n    ascend: <Text id='workout.graph.ascend' />,\n    plan: <Text id='workout.graph.plan' />,\n    speedAvg: <Text id='workout.graph.speedavg'>Speed</Text>,\n    loadIndex: <Text id='workout.graph.loadindex'>Loadindex</Text>,\n\n    avgDogs: <Text id='workout.graph.avgdogs'>Avg dogs</Text>,\n    avgImages: <Text id='workout.graph.avgimages'>Avg images</Text>,\n    sledWeight: <Text id='workout.graph.sledweight'>Sled weight</Text>,\n    rating: <Text id='workout.graph.rating'>Rating</Text>,\n    temperature: <Text id='workout.graph.temperature'>Temperature</Text>,\n}))\n@observer\nclass WorkoutGraph extends Component {\n    render() {\n        const { userStore, workoutPlanStore } = this.props.stores;\n        const {\n            user,\n\t\t\tworkoutSummary,\n\t\t\tgraphWorkoutSummaryWeekDistanceCurrent, graphWorkoutSummaryWeekDistancePrev,\n\t\t\tgraphWorkoutSummaryWeekElevationCurrent, graphWorkoutSummaryWeekElevationPrev,\n            avgDayDistance, avgDayElevation, \n            avgDayDuration, avgDaySpeedAvg, avgDayLoadIndex, \n            avgDayAvgDogs, avgDayAvgImages, avgDaySledWeight,\n            avgDayRest, avgDayRating, avgDayTemperature,\n\t\t} = userStore;\n        const { settings = {} } = user;\n        const { graphPlanWeekDistanceCurrent } = workoutPlanStore;\n\n        const currentMonth = new Date().getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\n        const {\n            isLoading,\n            week,\n            distance,\n            duration,\n            rest,\n            ascend,\n            plan,\n            speedAvg,\n            loadIndex,\n            avgDogs,\n            avgImages,\n            sledWeight,\n            rating,\n            temperature,\n            year = currentYear,\n            month = currentMonth,\n            showExtra = false,\n        } = this.props;\n\t\tconst seasonStart = parseInt(month < 8 ? year - 1 : year, 10);\n\n        // const summaryMonth = workoutPlanStore.findWorkoutPlanSummaryMonth(year, monthNum) || {};\n        const seasonWeeks = util.weekRange(`${seasonStart}-08-01`, `${seasonStart + 1}-07-31`);\n        const seasonDays = util.dayRange(`${seasonStart}-08-01`, `${seasonStart + 1}-07-31`);\n\n        const xTicksAll = seasonWeeks.map(wo => wo.week);\n        const parts = Math.floor(xTicksAll.length / 5);\n        const xTicks = [];\n        for (let i = 0, l = xTicksAll.length; i < l; i += parts) {\n            xTicks.push(xTicksAll[i]);\n        }\n\n        const xTicksAllDays = seasonDays.map(wo => `${wo.day}.${wo.month}`);\n        const partsDays = Math.floor(xTicksAllDays.length / 5);\n        const xTicksDays = [];\n        for (let i = 0, l = xTicksAllDays.length; i < l; i += partsDays) {\n            xTicksDays.push(xTicksAllDays[i]);\n        }\n\n        return (\n            <>\n                {/* <h5><Text id='workout.graph.title'>Treningsstatistikk</Text> {seasonStart} - {seasonStart + 1}</h5> */}\n                <div class='w-100 mt-3 mb-4 border-top pt-5'>\n                    {/* <xmp>graphWorkoutSummaryWeekDistanceCurrent: {JSON.stringify(graphWorkoutSummaryWeekDistanceCurrent, null, 4)}</xmp>\n                    <xmp>graphWorkoutSummaryWeekDistancePrev: {JSON.stringify(graphWorkoutSummaryWeekDistancePrev, null, 4)}</xmp> */}\n                    <h5 class='text-center'><Text id='workout.graph.total-distance'>Total distance</Text></h5>\n                    <LineGraph\n                        stores={this.props.stores}\n                        width={500}\n                        height={200}\n                        showXTicks={1}\n                        xTicksVal={val => `${week} ${val}`}\n                        xTicks={xTicks}\n                        paddingTop={30}\n                        lineFromXzero={true}\n                        lineFromXmax={true}\n                        xTicksLink={'/workouts/week/'}\n\n                        dataLeft={[graphWorkoutSummaryWeekDistanceCurrent, graphWorkoutSummaryWeekDistancePrev, graphPlanWeekDistanceCurrent]}\n                        legendLeft={[`${seasonStart} ${distance}`, `${seasonStart - 1} ${distance}`, `${seasonStart} ${plan}`]}\n                        dataFillLeft={[1]}\n                        // yMaxLeft={30}\n                        // yMinLeft={0}\n                        showYTicksLeft={1}\n                        yTicksLeftPostfix={settings.imperial ? 'mi' : 'km'}\n                        unitLeft={settings.imperial ? ['mi', 'mi', 'mi'] : ['km', 'km', 'km']}\n                        avgWindowLeft={[0, 0, 0]}\n                        smoothLeft={[1, 1, 1]}\n\n                        dataRight={[graphWorkoutSummaryWeekElevationCurrent, graphWorkoutSummaryWeekElevationPrev]}\n                        legendRight={[`${seasonStart} ${ascend}`, `${seasonStart - 1} ${ascend}`]}\n                        showYTicksRight={1}\n                        yTicksRightPostfix={settings.imperial ? 'ft' : 'm'}\n                        unitRight={settings.imperial ? ['ft', 'ft'] : ['m', 'm']}\n                        avgWindowRight={[0, 0]}\n                        smoothRight={[1, 1]}\n\n                        // marker={week}\n                    />\n                </div>\n\n                {!isLoading && graphWorkoutSummaryWeekDistanceCurrent && graphWorkoutSummaryWeekDistanceCurrent.length < 3 && (\n                    <div class='mb-5 py-3 border-top border-bottom'>\n                        <div class='text-left' style='line-height: 1.0em;'>\n                            <div class='display-4 float-left text-warning mr-3'>\n                                <i class='fas fa-paw' />\n                            </div>\n                            <small>\n                                <Text id='workout.graph.too-little-data'>Foreløpig er det litt lite data for å kunne vise noen fine grafer. \n                                Etterhvert som du legger inn flere treninger så vil dette bli en fin tabell og graf som viser progresjonen din.</Text>\n                            </small>\n                        </div>\n                    </div>\n                )}\n                {showExtra && <>\n                    <div class='w-100 mt-3 mb-4 mt-5 pt-5 border-top'>\n                        <h5 class='text-center'><Text id='workout.graph.avg-rating'>Average rating/day</Text></h5>\n                        <LineGraph\n                            stores={this.props.stores}\n                            width={500}\n                            height={200}\n                            showXTicks={1}\n                            xTicksVal={val => `${val}`}\n                            xTicks={xTicksDays}\n                            paddingTop={30}\n                            lineFromXzero={true}\n                            lineFromXmax={true}\n                            // xTicksLink={'/workouts/week/'}\n\n                            dataLeft={[avgDayRating]}\n                            legendLeft={[`${seasonStart} ${rating}`]}\n                            // dataFillLeft={[1]}\n                            // yMaxLeft={30}\n                            // yMinLeft={0}\n                            showYTicksLeft={1}\n                            // yTicksLeftPostfix={settings.imperial ? 'mph' : 'km/t'}\n                            // unitLeft={settings.imperial ? ['mph', 'mph', 'mph'] : ['km/t', 'km/t', 'km/t']}\n                            avgWindowLeft={[0, 0, 0]}\n                            smoothLeft={[0, 0, 0]}\n\n                            dataRight={[avgDayTemperature]}\n                            legendRight={[`${seasonStart} ${temperature}`]}\n                            showYTicksRight={1}\n                            yTicksRightPostfix={settings.imperial ? '°F' : '°C'}\n                            // unitRight={settings.imperial ? ['ft', 'ft'] : ['m', 'm']}\n                            avgWindowRight={[0, 0]}\n                            smoothRight={[0, 0]}\n\n                            // marker={week}\n                        />\n                    </div>\n\n                    <div class='w-100 mt-3 mb-4 mt-5 pt-5 border-top'>\n                        <h5 class='text-center'><Text id='workout.graph.avg-distance'>Average distance/day</Text></h5>\n                        <LineGraph\n                            stores={this.props.stores}\n                            width={500}\n                            height={200}\n                            showXTicks={1}\n                            xTicksVal={val => `${val}`}\n                            xTicks={xTicksDays}\n                            paddingTop={30}\n                            lineFromXzero={true}\n                            lineFromXmax={true}\n                            // xTicksLink={'/workouts/week/'}\n\n                            dataLeft={[avgDayDistance]}\n                            legendLeft={[`${seasonStart} ${distance}`]}\n                            // dataFillLeft={[1]}\n                            // yMaxLeft={30}\n                            // yMinLeft={0}\n                            showYTicksLeft={1}\n                            yTicksLeftPostfix={settings.imperial ? 'mi' : 'km'}\n                            unitLeft={settings.imperial ? ['mi', 'mi', 'mi'] : ['km', 'km', 'km']}\n                            avgWindowLeft={[0, 0, 0]}\n                            smoothLeft={[0, 0, 0]}\n\n                            dataRight={[avgDayElevation]}\n                            legendRight={[`${seasonStart} ${ascend}`]}\n                            showYTicksRight={1}\n                            yTicksRightPostfix={settings.imperial ? 'ft' : 'm'}\n                            unitRight={settings.imperial ? ['ft', 'ft'] : ['m', 'm']}\n                            avgWindowRight={[0, 0]}\n                            smoothRight={[0, 0]}\n\n                            // marker={week}\n                        />\n                    </div>\n\n                    <div class='w-100 mt-3 mb-4 mt-5 pt-5 border-top'>\n                        <h5 class='text-center'><Text id='workout.graph.avg-duration'>Average duration/day</Text></h5>\n                        <LineGraph\n                            stores={this.props.stores}\n                            width={500}\n                            height={200}\n                            showXTicks={1}\n                            xTicksVal={val => `${val}`}\n                            xTicks={xTicksDays}\n                            paddingTop={30}\n                            paddingLeft={50}\n                            yTicksLeftWidth={'50px'}\n                            lineFromXzero={true}\n                            lineFromXmax={true}\n                            // xTicksLink={'/workouts/week/'}\n\n                            dataLeft={[avgDayDuration]}\n                            legendLeft={[`${seasonStart} ${duration}`]}\n                            yTicksLeftVal={val => `${util.secToHms(val)}`}\n\n                            // dataFillLeft={[1]}\n                            // yMaxLeft={30}\n                            // yMinLeft={0}\n                            showYTicksLeft={1}\n                            // yTicksLeftPostfix={settings.imperial ? 'mi' : 'km'}\n                            // unitLeft={settings.imperial ? ['mi', 'mi', 'mi'] : ['km', 'km', 'km']}\n                            avgWindowLeft={[0, 0, 0]}\n                            smoothLeft={[0, 0, 0]}\n\n                            dataRight={[avgDayRest]}\n                            legendRight={[`${seasonStart} ${rest}`]}\n                            showYTicksRight={1}\n                            yTicksRightVal={val => `${util.secToHms(val)}`}\n                            // yTicksRightPostfix={settings.imperial ? 'ft' : 'm'}\n                            // unitRight={settings.imperial ? ['ft', 'ft'] : ['m', 'm']}\n                            avgWindowRight={[0, 0]}\n                            smoothRight={[0, 0]}\n\n                            // marker={week}\n                        />\n                    </div>\n\n                    <div class='w-100 mt-3 mb-4 mt-5 pt-5 border-top'>\n                        <h5 class='text-center'><Text id='workout.graph.avg-speed'>Average speed/day</Text></h5>\n                        <LineGraph\n                            stores={this.props.stores}\n                            width={500}\n                            height={200}\n                            showXTicks={1}\n                            xTicksVal={val => `${val}`}\n                            xTicks={xTicksDays}\n                            paddingTop={30}\n                            lineFromXzero={true}\n                            lineFromXmax={true}\n                            // xTicksLink={'/workouts/week/'}\n\n                            dataLeft={[avgDaySpeedAvg]}\n                            legendLeft={[`${seasonStart} ${speedAvg}`]}\n                            // dataFillLeft={[1]}\n                            // yMaxLeft={30}\n                            // yMinLeft={0}\n                            showYTicksLeft={1}\n                            yTicksLeftPostfix={settings.imperial ? 'mph' : 'km/t'}\n                            unitLeft={settings.imperial ? ['mph', 'mph', 'mph'] : ['km/t', 'km/t', 'km/t']}\n                            avgWindowLeft={[0, 0, 0]}\n                            smoothLeft={[0, 0, 0]}\n\n                            dataRight={[avgDayLoadIndex]}\n                            legendRight={[`${seasonStart} ${loadIndex}`]}\n                            showYTicksRight={1}\n                            // yTicksRightPostfix={settings.imperial ? 'ft' : 'm'}\n                            // unitRight={settings.imperial ? ['ft', 'ft'] : ['m', 'm']}\n                            avgWindowRight={[0, 0]}\n                            smoothRight={[0, 0]}\n\n                            // marker={week}\n                        />\n                    </div>\n\n                    <div class='w-100 mt-3 mb-4 mt-5 pt-5 border-top'>\n                        <h5 class='text-center'><Text id='workout.graph.avg-dogs'>Average dogs/day</Text></h5>\n                        <LineGraph\n                            stores={this.props.stores}\n                            width={500}\n                            height={200}\n                            showXTicks={1}\n                            xTicksVal={val => `${val}`}\n                            xTicks={xTicksDays}\n                            paddingTop={30}\n                            lineFromXzero={true}\n                            lineFromXmax={true}\n                            // xTicksLink={'/workouts/week/'}\n\n                            dataLeft={[avgDayAvgDogs, avgDayAvgImages]}\n                            legendLeft={[`${seasonStart} ${avgDogs}`, `${seasonStart} ${avgImages}`]}\n                            // dataFillLeft={[1]}\n                            // yMaxLeft={30}\n                            // yMinLeft={0}\n                            showYTicksLeft={1}\n                            // yTicksLeftPostfix={settings.imperial ? 'mph' : 'km/t'}\n                            // unitLeft={settings.imperial ? ['mph', 'mph', 'mph'] : ['km/t', 'km/t', 'km/t']}\n                            avgWindowLeft={[0, 0, 0]}\n                            smoothLeft={[0, 0, 0]}\n\n                            dataRight={[avgDaySledWeight]}\n                            legendRight={[`${seasonStart} ${sledWeight}`]}\n                            showYTicksRight={1}\n                            // yTicksRightPostfix={settings.imperial ? 'ft' : 'm'}\n                            // unitRight={settings.imperial ? ['ft', 'ft'] : ['m', 'm']}\n                            avgWindowRight={[0, 0]}\n                            smoothRight={[0, 0]}\n\n                            // marker={week}\n                        />\n                    </div>\n\n                    {/* <xmp>{JSON.stringify(avgDayDuration, null, 4)}</xmp> */}\n                </>}\n            </>\n        );\n    }\n}\n\nexport default WorkoutGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gaugeBackground\":\"gaugeBackground__1UGxt\",\"gauge\":\"gauge__2ZDxd\",\"success\":\"success__3UQxg\",\"primary\":\"primary__3pPV6\",\"secondary\":\"secondary__-Vrk_\",\"info\":\"info__3t5zs\",\"warning\":\"warning__1jHlR\",\"danger\":\"danger__BLVC9\",\"gaugeText\":\"gaugeText__1on-w\"};","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport { Text, Localizer, withText } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\n\nconst initialState = {\n\tshowAddComment: false,\n};\n\n@withText(() => ({\n    subject: <Text id='ad.subject'>Annonseforespørsel</Text>,\n    body: <Text id='ad.body'>Hei, Jeg ønsker å vite mer om annonsering i appen The Musher.</Text>,\n}))\n\n@observer\nclass Ad extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n\t\tthis.inputRef = {};\n        this.apiServer = util.getApiServer();\n    }\n\n\tasync loadAd(props = this.props) {\n\t\tthis.setState({ isLoading: true });\n\t\tconst { adStore, workoutStore, userStore, appState } = this.props.stores;\n        const { section } = this.props;\n        const { path: url = '' } = appState;\n        const { currentTeam } = workoutStore;\n        const { user } = userStore;\n        const { language = 'en' } = user;\n        let team = {};\n        let ambitions;\n        let type;\n        let postalcode;\n        let place;\n        let country;\n        if (currentTeam) {\n            team = userStore.findTeam(currentTeam, true);\n            if (team && team.id) {\n                ambitions = userStore.findTeamAmbition({ ambition: team.ambitions, language });\n                type = userStore.findTeamType({ type: team.type, language });\n                postalcode = team.postalcode;\n                place = team.place;\n                country = team.country;\n            }\n        }\n        // console.log({ currentTeam, team, ambitions,  type, postalcode, place, country });\n        // const { url = '' } = this.props;\n        let page = url.replace(/\\d+$/, 'detail');\n        page = url.replace(/\\/\\d+/, '/detail');\n\n        // props: { \"url\": \"/\" }\n        // props: { \"url\": \"/workouts/\" }\n        // props: { \"url\": \"/workouts/4708\" }\n        // props: { \"url\": \"/dogs\" }\n        // props: { \"url\": \"/dogs/10\" }\n\n\t\tawait adStore.load({ query: { page, section }});\n        adStore.setTime();\n\t\tthis.setState({ isLoading: false });\n\t}\n\n    logClick = async () => {\n        const { adStore, userStore } = this.props.stores;\n        const { ads = [] } = adStore;\n        let id = ads.length > 0 ? ads[0].id : null;\n        const { user = {} } = userStore;\n        await adStore.logClick({ id, user: user.id });\n    }\n\n\tcomponentDidMount() {\n\t\tthis.loadAd();\n\t}\n\n    componentWillReceiveProps(nextProps) {\n        // console.log('componentWillReceiveProps', nextProps);\n        if (nextProps.path !== this.props.path) {\n            this.loadAd(nextProps);\n        }\n    }\n\n    render() {\n        const { adStore, userStore, appState } = this.props.stores;\n        const { subject, body, section } = this.props;\n        const { path } = appState;\n        const { user = {} } = userStore;\n        const { ads = [], time, adViews, adClicks } = adStore;\n        if (!user || !user.id || !ads || ads.length === 0) {\n            if (path.match(/\\/(home)/i)) {\n                return <>\n                    <div class='w-100'>\n                        <div class='row'>\n                            <div class='col-12 col-sm-8 col-lg-6 offset-sm-2 offset-lg-3 mb-0 position-relative'>\n                                <div class='border rounded-lg p-4 my-3'>\n                                    <span class='float-right display-4 text-warning'>\n                                        <i class='far fa-smile-wink' />\n                                    </span>\n                                    <h5><Text id='ad.heading'>Vil du annonsere her?</Text></h5>\n                                    <div><Text id='ad.teaser'>Det er super enkelt :)</Text></div>\n                                    <Localizer>\n                                        <a href={`mailto:post@themusher.no?subject=${subject}: ${path}: ${section}&body=${body}`} target='_blank' rel='noreferrer'>\n                                            <i class='fas fa-paper-plane' /> <Text id='ad.linktext'>Ta kontakt med The Musher</Text>\n                                        </a>\n                                    </Localizer>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </>;\n            }\n            return <></>;\n        }\n        const ad = ads[0];\n        return (\n            <>\n                <div class='w-100'>\n                    <div class='row'>\n                        <div class='col-12 col-sm-8 col-lg-6 offset-sm-2 offset-lg-3 mb-0 position-relative'>\n                            <div>\n                                <small><small class='text-muted'>\n                                    <Text id='ad.ad'>Annonse</Text>:\n                                    <img src={`${this.apiServer}/api/ads/${ad.id}/view?user=${user.id}&time=${time}`} style='width: 1; height: 1; opacity: 0.1;' />\n                                </small></small>\n                            </div>\n                            {ad.target ? <>\n                                <a\n                                    class='stretched-link'\n                                    href={`${ad.url}`}\n                                    target={ad.target || '_blank'}\n                                    rel='noopener noreferrer'\n                                    onClick={this.logClick}\n                                    native\n                                >\n                                    {ad.images && ad.images[0] && <>\n                                        <img src={ad.images[0].s3LargeLink} class='img-fluid rounded-lg' />\n                                    </>}\n                                </a>                            \n                            </> : <>\n                                <a\n                                    class='stretched-link'\n                                    href={`${ad.url}`}\n                                    onClick={this.logClick}\n                                >\n                                    {ad.images && ad.images[0] && <>\n                                        <img src={ad.images[0].s3LargeLink} class='img-fluid rounded-lg' />\n                                    </>}\n                                </a>\n                            </>}\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Ad;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nimport style from './style.css';\n\nconst initialState = {\n    mouseData: {},\n};\n\n@observer\nclass Gauge extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.svgRef = null;\n    }\n\n    render() {\n        const {\n            radius = 50,\n            heightAdd = 0,\n            color = 'success',\n\n            showPercentText = true,\n            percent = 0,\n            prefix = '',\n\n            showCenterText= false,\n            centerText,\n            centerTextSize,\n            centerTextX,\n            centerTextY,\n\n            total = '',\n            totalY = '90%',\n            totalX = '50%',\n            totalTextAnchor = 'middle',\n                        \n            completed = '',\n            completedY = '65%',\n            completedX = '50%',\n            completedTextAnchor = 'middle',\n        } = this.props;\n        const strokeWidth = radius * 0.3;\n        const innerRadius = radius - strokeWidth / 2;\n\n        const strokeWidthGauge = radius * 0.3;\n\n        const circumference = innerRadius * 2 * Math.PI;\n        const arc = circumference * (270 / 360);\n        const dashArray = `${arc} ${circumference}`;\n        const transform = `rotate(135, ${radius}, ${radius})`;\n\n        const percentNormalized = Math.min(Math.max(percent, 0), 100);\n        const offset = arc - (percentNormalized / 100) * arc;\n\n        const textSize = centerTextSize || radius / 2.5;\n        const textSizeSmall = radius / 5;\n\n        return (\n            <>\n                <svg xmlns='http://www.w3.org/2000/svg' class={style.svg}\n                    // viewBox={`0 0 ${radius * 2} ${radius * 2}`}\n                    width={radius * 2}\n                    height={radius * 2 + heightAdd}\n                    preserveAspectRatio='none'\n                    ref={c => this.svgRef = c}\n                >\n\n                    <circle\n                        class={`${style.gaugeBackground}`}\n                        cx={radius}\n                        cy={radius}\n                        r={innerRadius}\n                        strokeWidth={strokeWidth}\n                        strokeDasharray={dashArray}\n                        strokeLinecap='round'\n                        transform={transform}\n                    />\n                    \n                    <circle\n                        class={`${style[color]} ${style.gauge}`}\n                        cx={radius}\n                        cy={radius}\n                        r={innerRadius}\n                        stroke='url(#grad)'\n                        strokeDasharray={dashArray}\n                        strokeDashoffset={offset}\n                        strokeLinecap='round'\n                        strokeWidth={strokeWidthGauge}\n                        style={{\n                            transition: 'stroke-dashoffset 0.3s',\n                        }}\n                        transform={transform}\n                    />\n                     \n                    {showPercentText && <text\n                        class={`${style.gaugeText} ${style[color]}`}\n                        x={centerTextX || '50%'}\n                        y={centerTextY || '50%'}\n                        dominant-baseline='middle'\n                        text-anchor='middle'\n                        font-size={textSize}\n                    >{percent} {prefix}</text>}\n\n                    {showCenterText && <text\n                        class={`${style.gaugeText} ${style[color]}`}\n                        x={centerTextX || '50%'}\n                        y={centerTextY || '50%'}\n                        dominant-baseline='middle'\n                        text-anchor='middle'\n                        font-size={textSize}\n                    >{centerText}</text>}\n\n                    {completed && <text\n                        class={`${style.gaugeText} ${style[color]}`}\n                        x={completedX}\n                        y={completedY}\n                        dominant-baseline='middle'\n                        text-anchor={completedTextAnchor}\n                        font-size={textSizeSmall}\n                    >{completed}</text>}\n\n                    <text\n                        class={`${style.gaugeText} ${style.secondary}`}\n                        x={totalX}\n                        y={totalY}\n                        dominant-baseline='middle'\n                        text-anchor={totalTextAnchor}\n                        font-size={textSizeSmall}\n                    >{total}</text>\n\n                </svg>\n            </>\n        );\n    }\n}\n\nexport default Gauge;\n"],"sourceRoot":""}