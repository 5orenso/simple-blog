{"version":3,"sources":["webpack:///./components/util/scrollIntoView.js","webpack:///./routes/tracks/edit.js","webpack:///./components/form/files.js"],"names":["initialState","ScrollIntoView","observer","props","state","container","componentDidMount","this","horizontal","vertical","behavior","inline","block","scrollIntoView","render","ref","c","Component","MARGIN_TOP","mu","marginTop","MARGIN_TOP_BACK","marginTopBack","MARGIN_BOTTOM","marginBottom","newTrack","Input","handleImageErrored","e","image","target","onerror","setTimeout","src","Date","setDateToNow","field","updateField","track","value","util","isoDate","undefined","id","setTimeToNow","isoTime","removeImage","stores","trackStore","name","parentElement","dataset","removeMainImage","saved","type","values","title","icon","help","onInput","toJS","class","for","s3SmallLink","onError","onClick","data-name","images","map","img","object","autoOpen","style","option","data-id","data-field","checked","aria-describedby","InputNew","updateObjectKeyValue","TracksEdit","insertTrack","userStore","insert","getInfo","resetTrack","route","elementtype","isNew","updateFieldValue","parseInt","datatype","skipTimer","newValue","localObjectValue","Array","isArray","split","parseFloat","doUpdateField","clearTimeout","updateTimer","back","history","goBack","loadTrack","setState","createNew","load","updateKeyValue","saveField","insertStatus","gpx","gpxInfo","min","max","mapId","geojson","geoJSON","role","Files","handleAddImage","file","files","uploadStatus","before","after","apiUrl","height","width"],"mappings":"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","file":"90.chunk.5c37c.js","sourcesContent":["import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\n\nconst initialState = {};\n\n@observer\nclass ScrollIntoView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.container = null;\n    }\n\n    componentDidMount() {\n        const { horizontal, vertical = '' } = this.props;\n        const props = {\n            behavior: 'smooth',\n        };\n        if (horizontal) {\n            props.inline = horizontal;\n        }\n        if (vertical) {\n            props.block = vertical;\n        }\n\t\tthis.container.scrollIntoView(props);\n\t}\n\n    render() {\n        return (\n            <div ref={c => this.container = c}>&nbsp;</div>\n        );\n    }\n}\n\nexport default ScrollIntoView;\n","import { h, Component } from 'preact';\nimport util from 'preact-util';\nimport { observer } from 'mobx-preact';\nimport linkState from 'linkstate';\nimport { route } from 'preact-router';\nimport { toJS } from 'mobx';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport mu from '../../lib/musher-util';\nconst MARGIN_TOP = mu.marginTop(false);\nconst MARGIN_TOP_BACK = mu.marginTopBack(false);\nconst MARGIN_BOTTOM = mu.marginBottom();\n\nimport Images from '../../components/form/images';\nimport Files from '../../components/form/files';\nimport Map from '../../components/map';\n\nimport ScrollIntoView from '../../components/util/scrollIntoView';\n\nconst initialState = {\n    newTrack: {},\n};\n\n@observer\nclass Input extends Component {\n    handleImageErrored = (e) => {\n        const image = e.target;\n        image.onerror = null;\n        setTimeout(() => {\n            image.src += `?${new Date()}`;\n        }, 1000);\n    }\n\n    setDateToNow = () => {\n        const { field, updateField, track } = this.props;\n        const value = util.isoDate(undefined, false, false, true);\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, type, isNew = false, skipTimer = false }) => {\n        updateField({ id: track.id, field, value });\n    }\n\n    setTimeToNow = () => {\n        const { field, updateField, track } = this.props;\n        const value = util.isoTime();\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, type, isNew = false, skipTimer = false }) => {\n        updateField({ id: track.id, field, value });\n    }\n\n    removeImage = async (e) => {\n        const { trackStore } = this.props.stores;\n        const { track } = this.props;\n        const imageName = e.target.parentElement.dataset.name || e.target.dataset.name;\n        trackStore.removeImage({\n            id: track.id,\n            name: imageName,\n        });\n    }\n\n    removeMainImage = () => {\n        const { track, field, updateField } = this.props;\n        updateField({ id: track.id, field, value: {} });\n    }\n\n    render() {\n        // const { saved, dog, type = 'text', datalist = [], min, max, step, field, title, icon, help, onInput, updateField } = this.props;\n        const { saved, track, type = 'text', field, values = [], title, icon, help, onInput, updateField } = this.props;\n        let value = toJS(track[field]);\n        if (type === 'date') {\n            if (value) {\n                value = util.isoDate(track[field], false, false, true);\n            }\n        }\n        if (type === 'image') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n\n                    <div class='container-fluid'>\n                        <div class='row'>\n                            {track.image && track.image.s3SmallLink && <div class='col-3 p-1'>\n                                <img src={track.image.s3SmallLink} class='img-fluid border rounded-lg' onError={this.handleImageErrored} />\n                                <button class='btn btn-sm btn-link'\n                                    onClick={this.removeMainImage}\n                                    data-name={track.image.name}\n                                ><i class='fas fa-trash' /> Del</button>\n                                <span class='badge badge-success'>Main</span>\n                            </div>}\n                            {track.images && track.images.map(img => (\n                                <div class='col-3 p-1'>\n                                    <img src={img.s3SmallLink} class='img-fluid' onError={this.handleImageErrored} />\n                                    <button class='btn btn-sm btn-link'\n                                        onClick={this.removeImage}\n                                        data-name={img.name}\n                                    ><i class='fas fa-trash' /> Del</button>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <Images saved={saved} object={track} field={field} updateField={updateField} autoOpen={false} />\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'file') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <Files saved={saved} object={track} field={field} updateField={updateField} />\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'radio') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title} \"{value}\"</label>\n                    {values.map(option => <>\n                        <div class='form-check'>\n                            <input\n                                class={`form-check-input ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}\n                                type='radio'\n                                id={`${field}Input`}\n                                value={option[0]}\n                                data-id={track.id}\n                                data-field={field}\n                                onInput={onInput}\n                                checked={value == option[0] ? 'checked' : ''}\n                            />\n                            <label class='form-check-label' for={`${field}Input`}>\n                                {option[1]}\n                            </label>\n                        </div>\n                    </>)}\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        if (type === 'toggle') {\n            return (\n                <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                    <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                    <div class='custom-control custom-switch'>\n                        <input type='checkbox'\n                            class='custom-control-input'\n                            id={`${field}Input`}\n                            value={value === 1 ? 0 : 1}\n                            data-id={track.id}\n                            data-field={field}\n                            onInput={onInput}\n                            checked={value == 1 ? 'checked' : ''}\n                        />\n                        <label class='custom-control-label' for={`${field}Input`} />\n                    </div>\n                    {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                        <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n                </div>\n            );\n        }\n        return (\n            <div class={`form-group ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`}>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type={type} class={`form-control ${saved[`${field}.${track.id}`] ? 'is-valid' : ''}`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    value={value}\n                    data-id={track.id}\n                    data-field={field}\n                    onInput={onInput}\n                />\n                {saved[`${field}.${track.id}`] ? <div class={`valid-feedback`} style='display: block;'><Text id='tracks.changes-saved'>Endringene er lagret</Text></div> : \n                    <small id={`${field}Help`} class='form-text text-muted'>{help}</small>}\n            </div>\n        );\n    }\n}\n\n@observer\nclass InputNew extends Component {\n    onInput = (e) => {\n        const { field } = this.props;\n        const value = e.target.value;\n        const { trackStore } = this.props.stores;\n        // console.log('trackStore.newTrack', trackStore.newTrack);\n        trackStore.updateObjectKeyValue('newTrack', field, value);\n    }\n\n    render() {\n        const { field, icon, title, help } = this.props;\n        const { trackStore } = this.props.stores;\n        const { newTrack } = trackStore;\n        return (\n            <div class='form-group'>\n                <label for={`${field}Input`}>{icon && <i class={`${icon} text-muted`} />} {title}</label>\n                <input type='text' class={`form-control`} id={`${field}Input`} aria-describedby={`${field}Help`}\n                    onInput={this.onInput}\n                    value={newTrack[field]}\n                />\n                <small id={`${field}Help`} class='form-text text-muted'>{help}</small>\n            </div>\n        );\n    }\n}\n\n@observer\nclass TracksEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n        };\n        this.updateTimer = {};\n    }\n\n    async loadTrack() {\n\t\tconst { trackStore } = this.props.stores;\n        if (this.props.track === 'new') {\n            this.setState({ createNew: true });\n        } else {\n            trackStore.load(this.props.track);\n        }\n    }\n\n\tresetTrack() {\n        const { trackStore } = this.props.stores;\n        trackStore.updateKeyValue('newTrack', {});\n\t}\n\n\tinsertTrack = async () => {\n\t\tconst { trackStore, userStore } = this.props.stores;\n\t\tconst { newTrack } = trackStore;\n\t\tawait trackStore.insert({ ...newTrack });\n        await userStore.getInfo();\n        this.resetTrack();\n        route(`/tracks/`);\n\t}\n\n    updateField = (e) => {\n        const { id, field, type, elementtype, isNew } = e.target.dataset;\n        const value = e.target.value;\n        this.updateFieldValue({ id: parseInt(id, 10), field, value, type, elementtype, isNew });\n    }\n\n    updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const { trackStore } = this.props.stores;\n        let newValue = value;\n\n        let localObjectValue = value;\n        const { track } = trackStore;\n        if (field === 'images') {\n            if (Array.isArray(track.images) && Array.isArray(value)) {\n                localObjectValue = [...track.images, ...value];\n            }\n        }\n    \n        if (datatype === 'array' && !Array.isArray(value)) {\n            if (elementtype === 'number') {\n                newValue = value.split(',').map(e => parseFloat(e) || e);\n            } else  {\n                newValue = value.split(',');\n            }\n            // console.log('updateFieldValue', id, field, value, datatype, elementtype);\n        }\n\n        if (isNew) {\n            trackStore.updateObjectKeyValue('newTrack', field, value);\n        } else {\n            trackStore.updateField(id, field, localObjectValue);\n            if (skipTimer) {\n                this.doUpdateField(id, field, newValue);\n            } else {\n                clearTimeout(this.updateTimer[field]);\n                this.updateTimer[field] = setTimeout(async () => {\n                    this.doUpdateField(id, field, newValue);\n                }, 500);\n            }\n        }\n    }\n\n    async doUpdateField(id, field, value) {\n        const { trackStore } = this.props.stores;\n        await trackStore.saveField(id, field, value);\n    }\n\n    back = () => {\n        const { history } = this.props.stores;\n        history.goBack();\n    }\n\n\tcomponentDidMount() {\n        this.loadTrack();\n    }\n\n\trender() {\n        const { createNew } = this.state;\n\t\tconst { trackStore } = this.props.stores;\n\t\tconst { insertStatus, saved, track } = trackStore;\n        const { name, gpx, gpxInfo } = track;\n\t\treturn (\n\t\t\t<div class='container-fluid' style={`margin-bottom: ${MARGIN_BOTTOM}; margin-top: ${MARGIN_TOP};`}>\n                <button class='btn btn-link pl-0 fixed-top text-primary'\n                    style={`top: ${MARGIN_TOP_BACK}; left: 5px; font-size: 35px; width: 45px;`}\n                    onClick={this.back}>\n                    <i class='fas fa-arrow-circle-left' />\n                </button>\n\t\t\t\t<div class='row'>\n\t\t\t\t\t<div class='offset-0 col-12 offset-sm-2 col-sm-8 offset-lg-4 col-lg-4' style='padding-left: 35px;'>\n                        {createNew ? (\n                            <div> \n                                <h5><Text id='tracks.add-new'>Legg til ny treningsrunde</Text></h5>\n                                <InputNew stores={this.props.stores} field='name' icon='fas fa-heading'\n                                    title={<Text id='tracks.title'>Tittel</Text>}\n                                    help={<Text id='tracks.title-help'>Tittel på denne runden. Eks: 'Rundt Veslevann og tilbake'</Text>} />\n                                <InputNew stores={this.props.stores} field='distanceKm' icon='fas fa-road'\n                                    title={<Text id='tracks.distance'>Distanse i km</Text>}\n                                    help={<Text id='tracks.distance-help'>Hvor lang er runden i km.</Text>} />\n                                <InputNew stores={this.props.stores} field='elevation' icon='fas fa-mountain'\n                                    title={<Text id='tracks.elevation'>Høydemeter</Text>}\n                                    help={<Text id='tracks.elevation-help'>Høydemeter du klatrer på denne runden.</Text>} />\n\n                                <button type='button' class='btn btn-primary'\n                                    onClick={this.insertTrack}\n                                >\n                                    <Text id='tracks.save'>Registrer ny treningsrunde</Text>\n                                </button>\n                                <p class='mt-4'>\n                                    <Text id='tracks.gpx-info'>For å legge til GPX må du lagre og gå tilbake og endre denne.</Text>\n                                </p>\n                            </div>\n                        ) : (\n                            <div>\n                                <h5><Text id='tracks.edit'>Endre</Text>: {name}</h5>\n                                <Input saved={saved} track={track} field='public' icon='fas fa-users' type='toggle'\n                                    title={<Text id='tracks.public'>Offentlig</Text>}\n                                    help={<Text id='tracks.public-help'>Er denne runden synlig for alle som bruker appen?</Text>}\n                                    onInput={this.updateField} />\n                                <Input saved={saved} track={track} field='name' icon='fas fa-heading'\n                                    title={<Text id='tracks.title'>Tittel</Text>}\n                                    help={<Text id='tracks.title-help'>Tittel på denne runden. Eks: 'Rundt Veslevann og tilbake'</Text>}\n                                    onInput={this.updateField} />\n\n                                <div class='row'>\n                                    <div class='col'>\n                                        <Input stores={this.props.stores} saved={saved} track={track} field='date' icon='fas fa-calendar' type='date' min='2010-01-01' max='today'\n                                            title={<Text id='tracks.date'>Dato</Text>}\n                                            help={<Text id='tracks.date-help'>Dato for turen. Format på dato er: 'YYYY-MM-DD'.</Text>}\n                                            onInput={this.updateField}\n                                            updateField={this.updateFieldValue}\n                                        />\n                                    </div>\n                                    <div class='col'>\n                                        <Input stores={this.props.stores} saved={saved} track={track} field='time' icon='fas fa-clock' type='time'\n                                            title={<Text id='tracks.time'>Klokka</Text>}\n                                            help={<Text id='tracks.time-help'>Klokkeslett for turen. Format: 'HH:MI'.</Text>}\n                                            onInput={this.updateField}\n                                            updateField={this.updateFieldValue}\n                                        />\n                                    </div>\n                                </div>\n\n                                <Input saved={saved} track={track} field='distanceKm' icon='fas fa-road'\n                                    title={<Text id='tracks.distance'>Distanse i km</Text>}\n                                    help={<Text id='tracks.distance-help'>Hvor lang er runden i km.</Text>}\n                                    onInput={this.updateField} />\n                                <Input saved={saved} track={track} field='elevation' icon='fas fa-mountain'\n                                    title={<Text id='tracks.elevation'>Høydemeter</Text>}\n                                    help={<Text id='tracks.elevation-help'>Høydemeter du klatrer på denne runden.</Text>}\n                                    onInput={this.updateField} />\n                                <Input saved={saved} track={track} field='image' icon='fas fa-camera' type='image'\n                                    stores={this.props.stores}\n                                    title={<Text id='tracks.photos'>Bilder</Text>}\n                                    help={<Text id='tracks.photos-help'>Bilder fra denne runden.</Text>}\n                                    onInput={this.updateField} updateField={this.updateFieldValue} />\n\n                                {gpx && <div style='height: 500px;'>\n                                    <Map stores={this.props.stores} mapId={track.id} geojson={gpx.geoJSON} gpxInfo={gpx.gpxInfo || gpxInfo} />\n                                </div>}\n                                <Input saved={saved} track={track} field='gpx' type='file'\n                                    title={<Text id='tracks.gpx'>Gpx</Text>}\n                                    help={<Text id='tracks.gpx-help'>Gpx til denne runden.</Text>}\n                                    onInput={this.updateField} updateField={this.updateFieldValue} />\n\n                            </div>                                                        \n                        )}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{insertStatus && <div class='alert alert-success mt-4 col-12' role='alert'>\n\t\t\t\t\t\t<Text id='tracks.saved'>Runden er lagret.</Text>\n\t\t\t\t\t</div>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TracksEdit;\n","import { h, Component } from 'preact';\nimport { observer } from 'mobx-preact';\nimport { toJS } from 'mobx';\nimport util from 'preact-util';\nimport { Text, Localizer } from 'preact-i18n';\n\nimport DragNDropFileupload from './dragNdropFileupload';\n\n@observer\nclass Files extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n        };\n    }\n    \n    handleAddImage = (file) => {\n        // <Images saved={saved} object={dog} field={field} updateField={updateField} />\n        // updateFieldValue = ({ id, field, value, datatype, elementtype, isNew = false, skipTimer = false }) => {\n        const {\n            updateField,\n            object,\n            field,\n        } = this.props;\n        updateField({ id: object.id, field, value: file });\n\n        // let images = toJS(object.images);\n        // if (!util.isArray(images)) {\n        //     images = [];\n        // }\n        // images.push(file);\n        // updateField({ id: object.id, field: 'images', value: images });\n    };\n\n    render() {\n        const { uploadStatus = () => {}, before = () => {}, after = () => {}, autoOpen = false } = this.props;\n        return (\n            <div class='row'>\n                <div class='col-12'>\n                    <Text id='form.files.upload-file'>Last opp fil</Text>:<br />\n                    <DragNDropFileupload\n                        handleAddImage={this.handleAddImage}\n                        apiUrl={'/api/fileupload'}\n                        uploadStatus={uploadStatus}\n                        before={before}\n                        after={after}\n                        autoOpen={autoOpen}\n                    >\n                        <div style={{ height: 30, width: '100%' }}>\n                            {/* {files.map((file, idx) => (\n                                <div key={idx}>\n                                    {file.name}\n                                    Total: {util.asString(file, 'load', 'total')}\n                                    <img style='width: 48px;'\n                                        alt='Preview'\n                                        key={file.preview}\n                                        src={file.src}\n                                    />\n                                </div>\n                            ))} */}\n                        </div>\n                    </DragNDropFileupload>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Files;\n"],"sourceRoot":""}